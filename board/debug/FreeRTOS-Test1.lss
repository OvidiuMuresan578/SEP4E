
FreeRTOS-Test1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000056  00800100  000029b4  00002a48  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000029b4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000005ea  00800156  00800156  00002a9e  2**0
                  ALLOC
  3 .comment      00000060  00000000  00000000  00002a9e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00002b00  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000498  00000000  00000000  00002b40  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00005f06  00000000  00000000  00002fd8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000172c  00000000  00000000  00008ede  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000033bf  00000000  00000000  0000a60a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000f54  00000000  00000000  0000d9cc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00001c93  00000000  00000000  0000e920  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00005972  00000000  00000000  000105b3  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000005b0  00000000  00000000  00015f25  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__ctors_end>
       4:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
       8:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
       c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      10:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      14:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      18:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      1c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      20:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      24:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      28:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      2c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      30:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      34:	0c 94 c2 08 	jmp	0x1184	; 0x1184 <__vector_13>
      38:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      3c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      40:	0c 94 0f 06 	jmp	0xc1e	; 0xc1e <__vector_16>
      44:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      48:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      4c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      50:	0c 94 b8 09 	jmp	0x1370	; 0x1370 <__vector_20>
      54:	0c 94 f6 09 	jmp	0x13ec	; 0x13ec <__vector_21>
      58:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      5c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      60:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      64:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      68:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      6c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      70:	0c 94 3e 0a 	jmp	0x147c	; 0x147c <__vector_28>
      74:	0c 94 7c 0a 	jmp	0x14f8	; 0x14f8 <__vector_29>
      78:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>

0000007c <__ctors_end>:
      7c:	11 24       	eor	r1, r1
      7e:	1f be       	out	0x3f, r1	; 63
      80:	cf ef       	ldi	r28, 0xFF	; 255
      82:	d8 e0       	ldi	r29, 0x08	; 8
      84:	de bf       	out	0x3e, r29	; 62
      86:	cd bf       	out	0x3d, r28	; 61

00000088 <__do_copy_data>:
      88:	11 e0       	ldi	r17, 0x01	; 1
      8a:	a0 e0       	ldi	r26, 0x00	; 0
      8c:	b1 e0       	ldi	r27, 0x01	; 1
      8e:	e4 eb       	ldi	r30, 0xB4	; 180
      90:	f9 e2       	ldi	r31, 0x29	; 41
      92:	02 c0       	rjmp	.+4      	; 0x98 <__do_copy_data+0x10>
      94:	05 90       	lpm	r0, Z+
      96:	0d 92       	st	X+, r0
      98:	a6 35       	cpi	r26, 0x56	; 86
      9a:	b1 07       	cpc	r27, r17
      9c:	d9 f7       	brne	.-10     	; 0x94 <__do_copy_data+0xc>

0000009e <__do_clear_bss>:
      9e:	27 e0       	ldi	r18, 0x07	; 7
      a0:	a6 e5       	ldi	r26, 0x56	; 86
      a2:	b1 e0       	ldi	r27, 0x01	; 1
      a4:	01 c0       	rjmp	.+2      	; 0xa8 <.do_clear_bss_start>

000000a6 <.do_clear_bss_loop>:
      a6:	1d 92       	st	X+, r1

000000a8 <.do_clear_bss_start>:
      a8:	a0 34       	cpi	r26, 0x40	; 64
      aa:	b2 07       	cpc	r27, r18
      ac:	e1 f7       	brne	.-8      	; 0xa6 <.do_clear_bss_loop>
      ae:	0e 94 c1 05 	call	0xb82	; 0xb82 <main>
      b2:	0c 94 d8 14 	jmp	0x29b0	; 0x29b0 <_exit>

000000b6 <__bad_interrupt>:
      b6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ba <connection>:
{
	int i;
	int num = (rand() %(upper - lower +1)) + lower;
	return num;

}
      ba:	cf 93       	push	r28
      bc:	df 93       	push	r29
      be:	1f 92       	push	r1
      c0:	cd b7       	in	r28, 0x3d	; 61
      c2:	de b7       	in	r29, 0x3e	; 62
      c4:	62 e0       	ldi	r22, 0x02	; 2
      c6:	70 e0       	ldi	r23, 0x00	; 0
      c8:	80 e0       	ldi	r24, 0x00	; 0
      ca:	90 e0       	ldi	r25, 0x00	; 0
      cc:	0e 94 ee 10 	call	0x21dc	; 0x21dc <vTaskSetApplicationTaskTag>
      d0:	10 e0       	ldi	r17, 0x00	; 0
      d2:	20 e0       	ldi	r18, 0x00	; 0
      d4:	4a ef       	ldi	r20, 0xFA	; 250
      d6:	50 e0       	ldi	r21, 0x00	; 0
      d8:	60 e0       	ldi	r22, 0x00	; 0
      da:	70 e0       	ldi	r23, 0x00	; 0
      dc:	80 91 85 01 	lds	r24, 0x0185	; 0x800185 <xMutex1>
      e0:	90 91 86 01 	lds	r25, 0x0186	; 0x800186 <xMutex1+0x1>
      e4:	0e 94 ed 0c 	call	0x19da	; 0x19da <xQueueGenericReceive>
      e8:	88 23       	and	r24, r24
      ea:	c1 f0       	breq	.+48     	; 0x11c <connection+0x62>
      ec:	20 e0       	ldi	r18, 0x00	; 0
      ee:	48 ee       	ldi	r20, 0xE8	; 232
      f0:	53 e0       	ldi	r21, 0x03	; 3
      f2:	be 01       	movw	r22, r28
      f4:	6f 5f       	subi	r22, 0xFF	; 255
      f6:	7f 4f       	sbci	r23, 0xFF	; 255
      f8:	80 91 89 01 	lds	r24, 0x0189	; 0x800189 <_x_com_received_chars_queue>
      fc:	90 91 8a 01 	lds	r25, 0x018A	; 0x80018a <_x_com_received_chars_queue+0x1>
     100:	0e 94 ed 0c 	call	0x19da	; 0x19da <xQueueGenericReceive>
     104:	18 2f       	mov	r17, r24
     106:	20 e0       	ldi	r18, 0x00	; 0
     108:	40 e0       	ldi	r20, 0x00	; 0
     10a:	50 e0       	ldi	r21, 0x00	; 0
     10c:	60 e0       	ldi	r22, 0x00	; 0
     10e:	70 e0       	ldi	r23, 0x00	; 0
     110:	80 91 85 01 	lds	r24, 0x0185	; 0x800185 <xMutex1>
     114:	90 91 86 01 	lds	r25, 0x0186	; 0x800186 <xMutex1+0x1>
     118:	0e 94 f8 0b 	call	0x17f0	; 0x17f0 <xQueueGenericSend>
     11c:	11 23       	and	r17, r17
     11e:	c9 f2       	breq	.-78     	; 0xd2 <connection+0x18>
     120:	89 81       	ldd	r24, Y+1	; 0x01
     122:	83 37       	cpi	r24, 0x73	; 115
     124:	61 f4       	brne	.+24     	; 0x13e <connection+0x84>
     126:	80 91 65 01 	lds	r24, 0x0165	; 0x800165 <player2Y>
     12a:	90 91 66 01 	lds	r25, 0x0166	; 0x800166 <player2Y+0x1>
     12e:	00 97       	sbiw	r24, 0x00	; 0
     130:	81 f2       	breq	.-96     	; 0xd2 <connection+0x18>
     132:	01 97       	sbiw	r24, 0x01	; 1
     134:	90 93 66 01 	sts	0x0166, r25	; 0x800166 <player2Y+0x1>
     138:	80 93 65 01 	sts	0x0165, r24	; 0x800165 <player2Y>
     13c:	ca cf       	rjmp	.-108    	; 0xd2 <connection+0x18>
     13e:	87 37       	cpi	r24, 0x77	; 119
     140:	41 f6       	brne	.-112    	; 0xd2 <connection+0x18>
     142:	80 91 65 01 	lds	r24, 0x0165	; 0x800165 <player2Y>
     146:	90 91 66 01 	lds	r25, 0x0166	; 0x800166 <player2Y+0x1>
     14a:	88 30       	cpi	r24, 0x08	; 8
     14c:	91 05       	cpc	r25, r1
     14e:	09 f2       	breq	.-126    	; 0xd2 <connection+0x18>
     150:	01 96       	adiw	r24, 0x01	; 1
     152:	90 93 66 01 	sts	0x0166, r25	; 0x800166 <player2Y+0x1>
     156:	80 93 65 01 	sts	0x0165, r24	; 0x800165 <player2Y>
     15a:	bb cf       	rjmp	.-138    	; 0xd2 <connection+0x18>

0000015c <startup_task>:
     15c:	61 e0       	ldi	r22, 0x01	; 1
     15e:	70 e0       	ldi	r23, 0x00	; 0
     160:	80 e0       	ldi	r24, 0x00	; 0
     162:	90 e0       	ldi	r25, 0x00	; 0
     164:	0e 94 ee 10 	call	0x21dc	; 0x21dc <vTaskSetApplicationTaskTag>
     168:	40 e0       	ldi	r20, 0x00	; 0
     16a:	61 e0       	ldi	r22, 0x01	; 1
     16c:	8e e1       	ldi	r24, 0x1E	; 30
     16e:	0e 94 c7 0b 	call	0x178e	; 0x178e <xQueueGenericCreate>
     172:	90 93 8a 01 	sts	0x018A, r25	; 0x80018a <_x_com_received_chars_queue+0x1>
     176:	80 93 89 01 	sts	0x0189, r24	; 0x800189 <_x_com_received_chars_queue>
     17a:	0e 94 f8 05 	call	0xbf0	; 0xbf0 <init_com>
     17e:	81 e0       	ldi	r24, 0x01	; 1
     180:	0e 94 99 0c 	call	0x1932	; 0x1932 <xQueueCreateMutex>
     184:	90 93 88 01 	sts	0x0188, r25	; 0x800188 <xMutex+0x1>
     188:	80 93 87 01 	sts	0x0187, r24	; 0x800187 <xMutex>
     18c:	81 e0       	ldi	r24, 0x01	; 1
     18e:	0e 94 99 0c 	call	0x1932	; 0x1932 <xQueueCreateMutex>
     192:	90 93 86 01 	sts	0x0186, r25	; 0x800186 <xMutex1+0x1>
     196:	80 93 85 01 	sts	0x0185, r24	; 0x800185 <xMutex1>
     19a:	e1 2c       	mov	r14, r1
     19c:	f1 2c       	mov	r15, r1
     19e:	03 e0       	ldi	r16, 0x03	; 3
     1a0:	20 e0       	ldi	r18, 0x00	; 0
     1a2:	30 e0       	ldi	r19, 0x00	; 0
     1a4:	45 e5       	ldi	r20, 0x55	; 85
     1a6:	50 e0       	ldi	r21, 0x00	; 0
     1a8:	62 e1       	ldi	r22, 0x12	; 18
     1aa:	71 e0       	ldi	r23, 0x01	; 1
     1ac:	8d e5       	ldi	r24, 0x5D	; 93
     1ae:	90 e0       	ldi	r25, 0x00	; 0
     1b0:	0e 94 1c 0e 	call	0x1c38	; 0x1c38 <xTaskCreate>
     1b4:	20 e0       	ldi	r18, 0x00	; 0
     1b6:	30 e0       	ldi	r19, 0x00	; 0
     1b8:	45 e5       	ldi	r20, 0x55	; 85
     1ba:	50 e0       	ldi	r21, 0x00	; 0
     1bc:	6d e1       	ldi	r22, 0x1D	; 29
     1be:	71 e0       	ldi	r23, 0x01	; 1
     1c0:	82 e5       	ldi	r24, 0x52	; 82
     1c2:	93 e0       	ldi	r25, 0x03	; 3
     1c4:	0e 94 1c 0e 	call	0x1c38	; 0x1c38 <xTaskCreate>
     1c8:	01 e0       	ldi	r16, 0x01	; 1
     1ca:	20 e0       	ldi	r18, 0x00	; 0
     1cc:	30 e0       	ldi	r19, 0x00	; 0
     1ce:	45 e5       	ldi	r20, 0x55	; 85
     1d0:	50 e0       	ldi	r21, 0x00	; 0
     1d2:	62 e2       	ldi	r22, 0x22	; 34
     1d4:	71 e0       	ldi	r23, 0x01	; 1
     1d6:	81 ea       	ldi	r24, 0xA1	; 161
     1d8:	95 e0       	ldi	r25, 0x05	; 5
     1da:	0e 94 1c 0e 	call	0x1c38	; 0x1c38 <xTaskCreate>
     1de:	88 ee       	ldi	r24, 0xE8	; 232
     1e0:	93 e0       	ldi	r25, 0x03	; 3
     1e2:	0e 94 9b 10 	call	0x2136	; 0x2136 <vTaskDelay>
     1e6:	fb cf       	rjmp	.-10     	; 0x1de <startup_task+0x82>

000001e8 <prepare_shiftregister>:
     1e8:	5a 9a       	sbi	0x0b, 2	; 11
     1ea:	08 95       	ret

000001ec <clock_shift_register_and_prepare_for_next_col>:
     1ec:	5d 9a       	sbi	0x0b, 5	; 11
     1ee:	5d 98       	cbi	0x0b, 5	; 11
     1f0:	5c 9a       	sbi	0x0b, 4	; 11
     1f2:	5c 98       	cbi	0x0b, 4	; 11
     1f4:	5a 98       	cbi	0x0b, 2	; 11
     1f6:	08 95       	ret

000001f8 <load_col_value>:
     1f8:	80 95       	com	r24
     1fa:	82 b9       	out	0x02, r24	; 2
     1fc:	85 b1       	in	r24, 0x05	; 5
     1fe:	83 60       	ori	r24, 0x03	; 3
     200:	85 b9       	out	0x05, r24	; 5
     202:	85 b1       	in	r24, 0x05	; 5
     204:	93 70       	andi	r25, 0x03	; 3
     206:	90 95       	com	r25
     208:	89 23       	and	r24, r25
     20a:	85 b9       	out	0x05, r24	; 5
     20c:	08 95       	ret

0000020e <handle_display>:
     20e:	cf 93       	push	r28
     210:	c0 91 56 01 	lds	r28, 0x0156	; 0x800156 <__data_end>
     214:	c1 11       	cpse	r28, r1
     216:	0e c0       	rjmp	.+28     	; 0x234 <handle_display+0x26>
     218:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <prepare_shiftregister>
     21c:	80 91 69 01 	lds	r24, 0x0169	; 0x800169 <frame_buf>
     220:	90 91 6a 01 	lds	r25, 0x016A	; 0x80016a <frame_buf+0x1>
     224:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <load_col_value>
     228:	0e 94 f6 00 	call	0x1ec	; 0x1ec <clock_shift_register_and_prepare_for_next_col>
     22c:	81 e0       	ldi	r24, 0x01	; 1
     22e:	80 93 56 01 	sts	0x0156, r24	; 0x800156 <__data_end>
     232:	14 c0       	rjmp	.+40     	; 0x25c <handle_display+0x4e>
     234:	ec 2f       	mov	r30, r28
     236:	f0 e0       	ldi	r31, 0x00	; 0
     238:	ee 0f       	add	r30, r30
     23a:	ff 1f       	adc	r31, r31
     23c:	e7 59       	subi	r30, 0x97	; 151
     23e:	fe 4f       	sbci	r31, 0xFE	; 254
     240:	80 81       	ld	r24, Z
     242:	91 81       	ldd	r25, Z+1	; 0x01
     244:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <load_col_value>
     248:	0e 94 f6 00 	call	0x1ec	; 0x1ec <clock_shift_register_and_prepare_for_next_col>
     24c:	cf 5f       	subi	r28, 0xFF	; 255
     24e:	ce 30       	cpi	r28, 0x0E	; 14
     250:	18 f4       	brcc	.+6      	; 0x258 <handle_display+0x4a>
     252:	c0 93 56 01 	sts	0x0156, r28	; 0x800156 <__data_end>
     256:	02 c0       	rjmp	.+4      	; 0x25c <handle_display+0x4e>
     258:	10 92 56 01 	sts	0x0156, r1	; 0x800156 <__data_end>
     25c:	cf 91       	pop	r28
     25e:	08 95       	ret

00000260 <setEndGameScreen>:
     260:	e4 e2       	ldi	r30, 0x24	; 36
     262:	f6 e0       	ldi	r31, 0x06	; 6
     264:	4c e3       	ldi	r20, 0x3C	; 60
     266:	57 e0       	ldi	r21, 0x07	; 7
     268:	09 c0       	rjmp	.+18     	; 0x27c <setEndGameScreen+0x1c>
     26a:	11 92       	st	Z+, r1
     26c:	11 92       	st	Z+, r1
     26e:	e2 17       	cp	r30, r18
     270:	f3 07       	cpc	r31, r19
     272:	d9 f7       	brne	.-10     	; 0x26a <setEndGameScreen+0xa>
     274:	f9 01       	movw	r30, r18
     276:	42 17       	cp	r20, r18
     278:	53 07       	cpc	r21, r19
     27a:	21 f0       	breq	.+8      	; 0x284 <setEndGameScreen+0x24>
     27c:	9f 01       	movw	r18, r30
     27e:	24 5e       	subi	r18, 0xE4	; 228
     280:	3f 4f       	sbci	r19, 0xFF	; 255
     282:	f3 cf       	rjmp	.-26     	; 0x26a <setEndGameScreen+0xa>
     284:	24 e0       	ldi	r18, 0x04	; 4
     286:	30 e0       	ldi	r19, 0x00	; 0
     288:	30 93 5e 01 	sts	0x015E, r19	; 0x80015e <ballX+0x1>
     28c:	20 93 5d 01 	sts	0x015D, r18	; 0x80015d <ballX>
     290:	2d e0       	ldi	r18, 0x0D	; 13
     292:	30 e0       	ldi	r19, 0x00	; 0
     294:	30 93 5c 01 	sts	0x015C, r19	; 0x80015c <ballY+0x1>
     298:	20 93 5b 01 	sts	0x015B, r18	; 0x80015b <ballY>
     29c:	81 30       	cpi	r24, 0x01	; 1
     29e:	91 05       	cpc	r25, r1
     2a0:	99 f5       	brne	.+102    	; 0x308 <setEndGameScreen+0xa8>
     2a2:	81 e0       	ldi	r24, 0x01	; 1
     2a4:	90 e0       	ldi	r25, 0x00	; 0
     2a6:	90 93 af 06 	sts	0x06AF, r25	; 0x8006af <maze+0x8b>
     2aa:	80 93 ae 06 	sts	0x06AE, r24	; 0x8006ae <maze+0x8a>
     2ae:	90 93 ad 06 	sts	0x06AD, r25	; 0x8006ad <maze+0x89>
     2b2:	80 93 ac 06 	sts	0x06AC, r24	; 0x8006ac <maze+0x88>
     2b6:	90 93 ab 06 	sts	0x06AB, r25	; 0x8006ab <maze+0x87>
     2ba:	80 93 aa 06 	sts	0x06AA, r24	; 0x8006aa <maze+0x86>
     2be:	90 93 a9 06 	sts	0x06A9, r25	; 0x8006a9 <maze+0x85>
     2c2:	80 93 a8 06 	sts	0x06A8, r24	; 0x8006a8 <maze+0x84>
     2c6:	90 93 a7 06 	sts	0x06A7, r25	; 0x8006a7 <maze+0x83>
     2ca:	80 93 a6 06 	sts	0x06A6, r24	; 0x8006a6 <maze+0x82>
     2ce:	90 93 a5 06 	sts	0x06A5, r25	; 0x8006a5 <maze+0x81>
     2d2:	80 93 a4 06 	sts	0x06A4, r24	; 0x8006a4 <maze+0x80>
     2d6:	90 93 91 06 	sts	0x0691, r25	; 0x800691 <maze+0x6d>
     2da:	80 93 90 06 	sts	0x0690, r24	; 0x800690 <maze+0x6c>
     2de:	90 93 73 06 	sts	0x0673, r25	; 0x800673 <maze+0x4f>
     2e2:	80 93 72 06 	sts	0x0672, r24	; 0x800672 <maze+0x4e>
     2e6:	90 93 6d 06 	sts	0x066D, r25	; 0x80066d <maze+0x49>
     2ea:	80 93 6c 06 	sts	0x066C, r24	; 0x80066c <maze+0x48>
     2ee:	90 93 89 06 	sts	0x0689, r25	; 0x800689 <maze+0x65>
     2f2:	80 93 88 06 	sts	0x0688, r24	; 0x800688 <maze+0x64>
     2f6:	90 93 c1 06 	sts	0x06C1, r25	; 0x8006c1 <maze+0x9d>
     2fa:	80 93 c0 06 	sts	0x06C0, r24	; 0x8006c0 <maze+0x9c>
     2fe:	90 93 dd 06 	sts	0x06DD, r25	; 0x8006dd <maze+0xb9>
     302:	80 93 dc 06 	sts	0x06DC, r24	; 0x8006dc <maze+0xb8>
     306:	45 c0       	rjmp	.+138    	; 0x392 <setEndGameScreen+0x132>
     308:	02 97       	sbiw	r24, 0x02	; 2
     30a:	09 f0       	breq	.+2      	; 0x30e <setEndGameScreen+0xae>
     30c:	42 c0       	rjmp	.+132    	; 0x392 <setEndGameScreen+0x132>
     30e:	81 e0       	ldi	r24, 0x01	; 1
     310:	90 e0       	ldi	r25, 0x00	; 0
     312:	90 93 93 06 	sts	0x0693, r25	; 0x800693 <maze+0x6f>
     316:	80 93 92 06 	sts	0x0692, r24	; 0x800692 <maze+0x6e>
     31a:	90 93 af 06 	sts	0x06AF, r25	; 0x8006af <maze+0x8b>
     31e:	80 93 ae 06 	sts	0x06AE, r24	; 0x8006ae <maze+0x8a>
     322:	90 93 cb 06 	sts	0x06CB, r25	; 0x8006cb <maze+0xa7>
     326:	80 93 ca 06 	sts	0x06CA, r24	; 0x8006ca <maze+0xa6>
     32a:	90 93 75 06 	sts	0x0675, r25	; 0x800675 <maze+0x51>
     32e:	80 93 74 06 	sts	0x0674, r24	; 0x800674 <maze+0x50>
     332:	90 93 e5 06 	sts	0x06E5, r25	; 0x8006e5 <maze+0xc1>
     336:	80 93 e4 06 	sts	0x06E4, r24	; 0x8006e4 <maze+0xc0>
     33a:	90 93 73 06 	sts	0x0673, r25	; 0x800673 <maze+0x4f>
     33e:	80 93 72 06 	sts	0x0672, r24	; 0x800672 <maze+0x4e>
     342:	90 93 e3 06 	sts	0x06E3, r25	; 0x8006e3 <maze+0xbf>
     346:	80 93 e2 06 	sts	0x06E2, r24	; 0x8006e2 <maze+0xbe>
     34a:	90 93 e1 06 	sts	0x06E1, r25	; 0x8006e1 <maze+0xbd>
     34e:	80 93 e0 06 	sts	0x06E0, r24	; 0x8006e0 <maze+0xbc>
     352:	90 93 a7 06 	sts	0x06A7, r25	; 0x8006a7 <maze+0x83>
     356:	80 93 a6 06 	sts	0x06A6, r24	; 0x8006a6 <maze+0x82>
     35a:	90 93 c3 06 	sts	0x06C3, r25	; 0x8006c3 <maze+0x9f>
     35e:	80 93 c2 06 	sts	0x06C2, r24	; 0x8006c2 <maze+0x9e>
     362:	90 93 89 06 	sts	0x0689, r25	; 0x800689 <maze+0x65>
     366:	80 93 88 06 	sts	0x0688, r24	; 0x800688 <maze+0x64>
     36a:	90 93 6b 06 	sts	0x066B, r25	; 0x80066b <maze+0x47>
     36e:	80 93 6a 06 	sts	0x066A, r24	; 0x80066a <maze+0x46>
     372:	90 93 87 06 	sts	0x0687, r25	; 0x800687 <maze+0x63>
     376:	80 93 86 06 	sts	0x0686, r24	; 0x800686 <maze+0x62>
     37a:	90 93 a3 06 	sts	0x06A3, r25	; 0x8006a3 <maze+0x7f>
     37e:	80 93 a2 06 	sts	0x06A2, r24	; 0x8006a2 <maze+0x7e>
     382:	90 93 bf 06 	sts	0x06BF, r25	; 0x8006bf <maze+0x9b>
     386:	80 93 be 06 	sts	0x06BE, r24	; 0x8006be <maze+0x9a>
     38a:	90 93 db 06 	sts	0x06DB, r25	; 0x8006db <maze+0xb7>
     38e:	80 93 da 06 	sts	0x06DA, r24	; 0x8006da <maze+0xb6>
     392:	e4 e2       	ldi	r30, 0x24	; 36
     394:	f6 e0       	ldi	r31, 0x06	; 6
     396:	81 e0       	ldi	r24, 0x01	; 1
     398:	90 e0       	ldi	r25, 0x00	; 0
     39a:	93 87       	std	Z+11, r25	; 0x0b
     39c:	82 87       	std	Z+10, r24	; 0x0a
     39e:	97 a3       	std	Z+39, r25	; 0x27
     3a0:	86 a3       	std	Z+38, r24	; 0x26
     3a2:	90 93 67 06 	sts	0x0667, r25	; 0x800667 <maze+0x43>
     3a6:	80 93 66 06 	sts	0x0666, r24	; 0x800666 <maze+0x42>
     3aa:	90 93 83 06 	sts	0x0683, r25	; 0x800683 <maze+0x5f>
     3ae:	80 93 82 06 	sts	0x0682, r24	; 0x800682 <maze+0x5e>
     3b2:	90 93 bb 06 	sts	0x06BB, r25	; 0x8006bb <maze+0x97>
     3b6:	80 93 ba 06 	sts	0x06BA, r24	; 0x8006ba <maze+0x96>
     3ba:	90 93 d7 06 	sts	0x06D7, r25	; 0x8006d7 <maze+0xb3>
     3be:	80 93 d6 06 	sts	0x06D6, r24	; 0x8006d6 <maze+0xb2>
     3c2:	90 93 f3 06 	sts	0x06F3, r25	; 0x8006f3 <maze+0xcf>
     3c6:	80 93 f2 06 	sts	0x06F2, r24	; 0x8006f2 <maze+0xce>
     3ca:	90 93 0f 07 	sts	0x070F, r25	; 0x80070f <maze+0xeb>
     3ce:	80 93 0e 07 	sts	0x070E, r24	; 0x80070e <maze+0xea>
     3d2:	91 87       	std	Z+9, r25	; 0x09
     3d4:	80 87       	std	Z+8, r24	; 0x08
     3d6:	90 93 b9 06 	sts	0x06B9, r25	; 0x8006b9 <maze+0x95>
     3da:	80 93 b8 06 	sts	0x06B8, r24	; 0x8006b8 <maze+0x94>
     3de:	97 83       	std	Z+7, r25	; 0x07
     3e0:	86 83       	std	Z+6, r24	; 0x06
     3e2:	97 af       	std	Z+63, r25	; 0x3f
     3e4:	86 af       	std	Z+62, r24	; 0x3e
     3e6:	90 93 7f 06 	sts	0x067F, r25	; 0x80067f <maze+0x5b>
     3ea:	80 93 7e 06 	sts	0x067E, r24	; 0x80067e <maze+0x5a>
     3ee:	90 93 b7 06 	sts	0x06B7, r25	; 0x8006b7 <maze+0x93>
     3f2:	80 93 b6 06 	sts	0x06B6, r24	; 0x8006b6 <maze+0x92>
     3f6:	90 93 ef 06 	sts	0x06EF, r25	; 0x8006ef <maze+0xcb>
     3fa:	80 93 ee 06 	sts	0x06EE, r24	; 0x8006ee <maze+0xca>
     3fe:	90 93 0b 07 	sts	0x070B, r25	; 0x80070b <maze+0xe7>
     402:	80 93 0a 07 	sts	0x070A, r24	; 0x80070a <maze+0xe6>
     406:	95 83       	std	Z+5, r25	; 0x05
     408:	84 83       	std	Z+4, r24	; 0x04
     40a:	90 93 7d 06 	sts	0x067D, r25	; 0x80067d <maze+0x59>
     40e:	80 93 7c 06 	sts	0x067C, r24	; 0x80067c <maze+0x58>
     412:	90 93 b5 06 	sts	0x06B5, r25	; 0x8006b5 <maze+0x91>
     416:	80 93 b4 06 	sts	0x06B4, r24	; 0x8006b4 <maze+0x90>
     41a:	90 93 09 07 	sts	0x0709, r25	; 0x800709 <maze+0xe5>
     41e:	80 93 08 07 	sts	0x0708, r24	; 0x800708 <maze+0xe4>
     422:	93 83       	std	Z+3, r25	; 0x03
     424:	82 83       	std	Z+2, r24	; 0x02
     426:	97 8f       	std	Z+31, r25	; 0x1f
     428:	86 8f       	std	Z+30, r24	; 0x1e
     42a:	93 af       	std	Z+59, r25	; 0x3b
     42c:	82 af       	std	Z+58, r24	; 0x3a
     42e:	90 93 7b 06 	sts	0x067B, r25	; 0x80067b <maze+0x57>
     432:	80 93 7a 06 	sts	0x067A, r24	; 0x80067a <maze+0x56>
     436:	90 93 b3 06 	sts	0x06B3, r25	; 0x8006b3 <maze+0x8f>
     43a:	80 93 b2 06 	sts	0x06B2, r24	; 0x8006b2 <maze+0x8e>
     43e:	90 93 cf 06 	sts	0x06CF, r25	; 0x8006cf <maze+0xab>
     442:	80 93 ce 06 	sts	0x06CE, r24	; 0x8006ce <maze+0xaa>
     446:	90 93 eb 06 	sts	0x06EB, r25	; 0x8006eb <maze+0xc7>
     44a:	80 93 ea 06 	sts	0x06EA, r24	; 0x8006ea <maze+0xc6>
     44e:	90 93 07 07 	sts	0x0707, r25	; 0x800707 <maze+0xe3>
     452:	80 93 06 07 	sts	0x0706, r24	; 0x800706 <maze+0xe2>
     456:	08 95       	ret

00000458 <innitMaze>:
     458:	cf 93       	push	r28
     45a:	df 93       	push	r29
     45c:	44 e2       	ldi	r20, 0x24	; 36
     45e:	56 e0       	ldi	r21, 0x06	; 6
     460:	20 e0       	ldi	r18, 0x00	; 0
     462:	30 e0       	ldi	r19, 0x00	; 0
     464:	c2 e0       	ldi	r28, 0x02	; 2
     466:	d0 e0       	ldi	r29, 0x00	; 0
     468:	61 e0       	ldi	r22, 0x01	; 1
     46a:	70 e0       	ldi	r23, 0x00	; 0
     46c:	1f c0       	rjmp	.+62     	; 0x4ac <innitMaze+0x54>
     46e:	df 01       	movw	r26, r30
     470:	11 82       	std	Z+1, r1	; 0x01
     472:	10 82       	st	Z, r1
     474:	00 97       	sbiw	r24, 0x00	; 0
     476:	19 f0       	breq	.+6      	; 0x47e <innitMaze+0x26>
     478:	8d 30       	cpi	r24, 0x0D	; 13
     47a:	91 05       	cpc	r25, r1
     47c:	19 f4       	brne	.+6      	; 0x484 <innitMaze+0x2c>
     47e:	11 96       	adiw	r26, 0x01	; 1
     480:	dc 93       	st	X, r29
     482:	ce 93       	st	-X, r28
     484:	21 15       	cp	r18, r1
     486:	31 05       	cpc	r19, r1
     488:	19 f0       	breq	.+6      	; 0x490 <innitMaze+0x38>
     48a:	29 30       	cpi	r18, 0x09	; 9
     48c:	31 05       	cpc	r19, r1
     48e:	11 f4       	brne	.+4      	; 0x494 <innitMaze+0x3c>
     490:	6d 93       	st	X+, r22
     492:	7c 93       	st	X, r23
     494:	01 96       	adiw	r24, 0x01	; 1
     496:	32 96       	adiw	r30, 0x02	; 2
     498:	8e 30       	cpi	r24, 0x0E	; 14
     49a:	91 05       	cpc	r25, r1
     49c:	41 f7       	brne	.-48     	; 0x46e <innitMaze+0x16>
     49e:	2f 5f       	subi	r18, 0xFF	; 255
     4a0:	3f 4f       	sbci	r19, 0xFF	; 255
     4a2:	44 5e       	subi	r20, 0xE4	; 228
     4a4:	5f 4f       	sbci	r21, 0xFF	; 255
     4a6:	2a 30       	cpi	r18, 0x0A	; 10
     4a8:	31 05       	cpc	r19, r1
     4aa:	21 f0       	breq	.+8      	; 0x4b4 <innitMaze+0x5c>
     4ac:	fa 01       	movw	r30, r20
     4ae:	80 e0       	ldi	r24, 0x00	; 0
     4b0:	90 e0       	ldi	r25, 0x00	; 0
     4b2:	dd cf       	rjmp	.-70     	; 0x46e <innitMaze+0x16>
     4b4:	df 91       	pop	r29
     4b6:	cf 91       	pop	r28
     4b8:	08 95       	ret

000004ba <pow>:
     4ba:	0f 93       	push	r16
     4bc:	1f 93       	push	r17
     4be:	cf 93       	push	r28
     4c0:	df 93       	push	r29
     4c2:	61 15       	cp	r22, r1
     4c4:	71 05       	cpc	r23, r1
     4c6:	29 f1       	breq	.+74     	; 0x512 <pow+0x58>
     4c8:	9b 01       	movw	r18, r22
     4ca:	77 23       	and	r23, r23
     4cc:	14 f4       	brge	.+4      	; 0x4d2 <pow+0x18>
     4ce:	2f 5f       	subi	r18, 0xFF	; 255
     4d0:	3f 4f       	sbci	r19, 0xFF	; 255
     4d2:	eb 01       	movw	r28, r22
     4d4:	8c 01       	movw	r16, r24
     4d6:	b9 01       	movw	r22, r18
     4d8:	75 95       	asr	r23
     4da:	67 95       	ror	r22
     4dc:	0e 94 5d 02 	call	0x4ba	; 0x4ba <pow>
     4e0:	9c 01       	movw	r18, r24
     4e2:	c0 fd       	sbrc	r28, 0
     4e4:	07 c0       	rjmp	.+14     	; 0x4f4 <pow+0x3a>
     4e6:	22 9f       	mul	r18, r18
     4e8:	c0 01       	movw	r24, r0
     4ea:	23 9f       	mul	r18, r19
     4ec:	90 0d       	add	r25, r0
     4ee:	90 0d       	add	r25, r0
     4f0:	11 24       	eor	r1, r1
     4f2:	11 c0       	rjmp	.+34     	; 0x516 <pow+0x5c>
     4f4:	02 9f       	mul	r16, r18
     4f6:	a0 01       	movw	r20, r0
     4f8:	03 9f       	mul	r16, r19
     4fa:	50 0d       	add	r21, r0
     4fc:	12 9f       	mul	r17, r18
     4fe:	50 0d       	add	r21, r0
     500:	11 24       	eor	r1, r1
     502:	42 9f       	mul	r20, r18
     504:	c0 01       	movw	r24, r0
     506:	43 9f       	mul	r20, r19
     508:	90 0d       	add	r25, r0
     50a:	52 9f       	mul	r21, r18
     50c:	90 0d       	add	r25, r0
     50e:	11 24       	eor	r1, r1
     510:	02 c0       	rjmp	.+4      	; 0x516 <pow+0x5c>
     512:	81 e0       	ldi	r24, 0x01	; 1
     514:	90 e0       	ldi	r25, 0x00	; 0
     516:	df 91       	pop	r29
     518:	cf 91       	pop	r28
     51a:	1f 91       	pop	r17
     51c:	0f 91       	pop	r16
     51e:	08 95       	ret

00000520 <printMaze>:

void printMaze()  // PRINTS MAZE  /////////////////////////////////////////////////////////////////////////////////////
{
     520:	2f 92       	push	r2
     522:	3f 92       	push	r3
     524:	4f 92       	push	r4
     526:	5f 92       	push	r5
     528:	6f 92       	push	r6
     52a:	7f 92       	push	r7
     52c:	8f 92       	push	r8
     52e:	9f 92       	push	r9
     530:	af 92       	push	r10
     532:	bf 92       	push	r11
     534:	cf 92       	push	r12
     536:	df 92       	push	r13
     538:	ef 92       	push	r14
     53a:	ff 92       	push	r15
     53c:	0f 93       	push	r16
     53e:	1f 93       	push	r17
     540:	cf 93       	push	r28
     542:	df 93       	push	r29
     544:	cd b7       	in	r28, 0x3d	; 61
     546:	de b7       	in	r29, 0x3e	; 62
     548:	2a 97       	sbiw	r28, 0x0a	; 10
     54a:	0f b6       	in	r0, 0x3f	; 63
     54c:	f8 94       	cli
     54e:	de bf       	out	0x3e, r29	; 62
     550:	0f be       	out	0x3f, r0	; 63
     552:	cd bf       	out	0x3d, r28	; 61
	for (int j = 0; j < 14; j++) {
		int dec = 0;
		int power = 0;
		for (int i = 0; i < 10; i++)
		{
			if (maze[i][j] == 1  || maze[i][j] == 3 || (j==ballX && ballY== i)) {
     554:	a0 90 5d 01 	lds	r10, 0x015D	; 0x80015d <ballX>
     558:	b0 90 5e 01 	lds	r11, 0x015E	; 0x80015e <ballX+0x1>
     55c:	20 90 5b 01 	lds	r2, 0x015B	; 0x80015b <ballY>
     560:	30 90 5c 01 	lds	r3, 0x015C	; 0x80015c <ballY+0x1>
				//(j==0 && player1Y == i) || (j==0 && player1Y+1 == i) || (j==0 && player1Y+1 == i) || (j==13 && player2Y == i) || (j==13 && player2Y+1 == i) || (j==13 && player2Y+1 == i)
				dec += pow(2, power);
			}
			if(j==0 || j==13){
				maze[i][j]	=2;
				if((j==0 && player1Y == i) || (j==0 && player1Y+1 == i) || (j==0 && player1Y+1 == i) || (j==13 && player2Y == i) || (j==13 && player2Y+1 == i) || (j==13 && player2Y+1 == i)){
     564:	80 91 65 01 	lds	r24, 0x0165	; 0x800165 <player2Y>
     568:	90 91 66 01 	lds	r25, 0x0166	; 0x800166 <player2Y+0x1>
     56c:	9c 83       	std	Y+4, r25	; 0x04
     56e:	8b 83       	std	Y+3, r24	; 0x03
     570:	01 96       	adiw	r24, 0x01	; 1
     572:	98 87       	std	Y+8, r25	; 0x08
     574:	8f 83       	std	Y+7, r24	; 0x07
     576:	e0 91 67 01 	lds	r30, 0x0167	; 0x800167 <player1Y>
     57a:	f0 91 68 01 	lds	r31, 0x0168	; 0x800168 <player1Y+0x1>
     57e:	fa 83       	std	Y+2, r31	; 0x02
     580:	e9 83       	std	Y+1, r30	; 0x01
     582:	31 96       	adiw	r30, 0x01	; 1
     584:	fe 83       	std	Y+6, r31	; 0x06
     586:	ed 83       	std	Y+5, r30	; 0x05
     588:	0f 2e       	mov	r0, r31
     58a:	f9 e6       	ldi	r31, 0x69	; 105
     58c:	4f 2e       	mov	r4, r31
     58e:	f1 e0       	ldi	r31, 0x01	; 1
     590:	5f 2e       	mov	r5, r31
     592:	f0 2d       	mov	r31, r0
     594:	0f 2e       	mov	r0, r31
     596:	f4 e2       	ldi	r31, 0x24	; 36
     598:	6f 2e       	mov	r6, r31
     59a:	f6 e0       	ldi	r31, 0x06	; 6
     59c:	7f 2e       	mov	r7, r31
     59e:	f0 2d       	mov	r31, r0
}

void printMaze()  // PRINTS MAZE  /////////////////////////////////////////////////////////////////////////////////////
{

	for (int j = 0; j < 14; j++) {
     5a0:	81 2c       	mov	r8, r1
     5a2:	91 2c       	mov	r9, r1
     5a4:	48 c0       	rjmp	.+144    	; 0x636 <printMaze+0x116>
     5a6:	09 85       	ldd	r16, Y+9	; 0x09
     5a8:	1a 85       	ldd	r17, Y+10	; 0x0a
		int dec = 0;
		int power = 0;
		for (int i = 0; i < 10; i++)
		{
			if (maze[i][j] == 1  || maze[i][j] == 3 || (j==ballX && ballY== i)) {
     5aa:	f8 01       	movw	r30, r16
     5ac:	80 81       	ld	r24, Z
     5ae:	91 81       	ldd	r25, Z+1	; 0x01
     5b0:	8d 7f       	andi	r24, 0xFD	; 253
     5b2:	01 97       	sbiw	r24, 0x01	; 1
     5b4:	31 f0       	breq	.+12     	; 0x5c2 <printMaze+0xa2>
     5b6:	a8 14       	cp	r10, r8
     5b8:	b9 04       	cpc	r11, r9
     5ba:	51 f4       	brne	.+20     	; 0x5d0 <printMaze+0xb0>
     5bc:	2e 14       	cp	r2, r14
     5be:	3f 04       	cpc	r3, r15
     5c0:	39 f4       	brne	.+14     	; 0x5d0 <printMaze+0xb0>
				//(j==0 && player1Y == i) || (j==0 && player1Y+1 == i) || (j==0 && player1Y+1 == i) || (j==13 && player2Y == i) || (j==13 && player2Y+1 == i) || (j==13 && player2Y+1 == i)
				dec += pow(2, power);
     5c2:	b7 01       	movw	r22, r14
     5c4:	82 e0       	ldi	r24, 0x02	; 2
     5c6:	90 e0       	ldi	r25, 0x00	; 0
     5c8:	0e 94 5d 02 	call	0x4ba	; 0x4ba <pow>
     5cc:	c8 0e       	add	r12, r24
     5ce:	d9 1e       	adc	r13, r25
			}
			if(j==0 || j==13){
     5d0:	81 14       	cp	r8, r1
     5d2:	91 04       	cpc	r9, r1
     5d4:	09 f4       	brne	.+2      	; 0x5d8 <printMaze+0xb8>
     5d6:	41 c0       	rjmp	.+130    	; 0x65a <printMaze+0x13a>
     5d8:	fd e0       	ldi	r31, 0x0D	; 13
     5da:	8f 16       	cp	r8, r31
     5dc:	91 04       	cpc	r9, r1
     5de:	89 f4       	brne	.+34     	; 0x602 <printMaze+0xe2>
     5e0:	31 c0       	rjmp	.+98     	; 0x644 <printMaze+0x124>
				maze[i][j]	=2;
				if((j==0 && player1Y == i) || (j==0 && player1Y+1 == i) || (j==0 && player1Y+1 == i) || (j==13 && player2Y == i) || (j==13 && player2Y+1 == i) || (j==13 && player2Y+1 == i)){
     5e2:	8d 81       	ldd	r24, Y+5	; 0x05
     5e4:	9e 81       	ldd	r25, Y+6	; 0x06
     5e6:	8e 15       	cp	r24, r14
     5e8:	9f 05       	cpc	r25, r15
     5ea:	59 f4       	brne	.+22     	; 0x602 <printMaze+0xe2>
     5ec:	05 c0       	rjmp	.+10     	; 0x5f8 <printMaze+0xd8>
     5ee:	ef 81       	ldd	r30, Y+7	; 0x07
     5f0:	f8 85       	ldd	r31, Y+8	; 0x08
     5f2:	ee 15       	cp	r30, r14
     5f4:	ff 05       	cpc	r31, r15
     5f6:	29 f4       	brne	.+10     	; 0x602 <printMaze+0xe2>
					maze[i][j]	=3;
     5f8:	83 e0       	ldi	r24, 0x03	; 3
     5fa:	90 e0       	ldi	r25, 0x00	; 0
     5fc:	f8 01       	movw	r30, r16
     5fe:	91 83       	std	Z+1, r25	; 0x01
     600:	80 83       	st	Z, r24
				}
			}
			
				power++;
     602:	9f ef       	ldi	r25, 0xFF	; 255
     604:	e9 1a       	sub	r14, r25
     606:	f9 0a       	sbc	r15, r25
     608:	e9 85       	ldd	r30, Y+9	; 0x09
     60a:	fa 85       	ldd	r31, Y+10	; 0x0a
     60c:	7c 96       	adiw	r30, 0x1c	; 28
     60e:	fa 87       	std	Y+10, r31	; 0x0a
     610:	e9 87       	std	Y+9, r30	; 0x09
{

	for (int j = 0; j < 14; j++) {
		int dec = 0;
		int power = 0;
		for (int i = 0; i < 10; i++)
     612:	fa e0       	ldi	r31, 0x0A	; 10
     614:	ef 16       	cp	r14, r31
     616:	f1 04       	cpc	r15, r1
     618:	31 f6       	brne	.-116    	; 0x5a6 <printMaze+0x86>
				}
			}
			
				power++;
		}
		frame_buf[j]=dec; //j is a column, and on the column j, each bit with value 1 is lit. That's why I need to transform the normal array into bit values and this is what dec holds: the bit value for that column 
     61a:	f2 01       	movw	r30, r4
     61c:	c1 92       	st	Z+, r12
     61e:	d1 92       	st	Z+, r13
     620:	2f 01       	movw	r4, r30
}

void printMaze()  // PRINTS MAZE  /////////////////////////////////////////////////////////////////////////////////////
{

	for (int j = 0; j < 14; j++) {
     622:	ff ef       	ldi	r31, 0xFF	; 255
     624:	8f 1a       	sub	r8, r31
     626:	9f 0a       	sbc	r9, r31
     628:	82 e0       	ldi	r24, 0x02	; 2
     62a:	68 0e       	add	r6, r24
     62c:	71 1c       	adc	r7, r1
     62e:	9e e0       	ldi	r25, 0x0E	; 14
     630:	89 16       	cp	r8, r25
     632:	91 04       	cpc	r9, r1
     634:	f1 f0       	breq	.+60     	; 0x672 <printMaze+0x152>
	return num;

}

void printMaze()  // PRINTS MAZE  /////////////////////////////////////////////////////////////////////////////////////
{
     636:	7a 86       	std	Y+10, r7	; 0x0a
     638:	69 86       	std	Y+9, r6	; 0x09
     63a:	e1 2c       	mov	r14, r1
     63c:	f1 2c       	mov	r15, r1
     63e:	c1 2c       	mov	r12, r1
     640:	d1 2c       	mov	r13, r1
     642:	b1 cf       	rjmp	.-158    	; 0x5a6 <printMaze+0x86>
			if (maze[i][j] == 1  || maze[i][j] == 3 || (j==ballX && ballY== i)) {
				//(j==0 && player1Y == i) || (j==0 && player1Y+1 == i) || (j==0 && player1Y+1 == i) || (j==13 && player2Y == i) || (j==13 && player2Y+1 == i) || (j==13 && player2Y+1 == i)
				dec += pow(2, power);
			}
			if(j==0 || j==13){
				maze[i][j]	=2;
     644:	82 e0       	ldi	r24, 0x02	; 2
     646:	90 e0       	ldi	r25, 0x00	; 0
     648:	f8 01       	movw	r30, r16
     64a:	91 83       	std	Z+1, r25	; 0x01
     64c:	80 83       	st	Z, r24
				if((j==0 && player1Y == i) || (j==0 && player1Y+1 == i) || (j==0 && player1Y+1 == i) || (j==13 && player2Y == i) || (j==13 && player2Y+1 == i) || (j==13 && player2Y+1 == i)){
     64e:	8b 81       	ldd	r24, Y+3	; 0x03
     650:	9c 81       	ldd	r25, Y+4	; 0x04
     652:	8e 15       	cp	r24, r14
     654:	9f 05       	cpc	r25, r15
     656:	59 f6       	brne	.-106    	; 0x5ee <printMaze+0xce>
     658:	cf cf       	rjmp	.-98     	; 0x5f8 <printMaze+0xd8>
			if (maze[i][j] == 1  || maze[i][j] == 3 || (j==ballX && ballY== i)) {
				//(j==0 && player1Y == i) || (j==0 && player1Y+1 == i) || (j==0 && player1Y+1 == i) || (j==13 && player2Y == i) || (j==13 && player2Y+1 == i) || (j==13 && player2Y+1 == i)
				dec += pow(2, power);
			}
			if(j==0 || j==13){
				maze[i][j]	=2;
     65a:	82 e0       	ldi	r24, 0x02	; 2
     65c:	90 e0       	ldi	r25, 0x00	; 0
     65e:	f8 01       	movw	r30, r16
     660:	91 83       	std	Z+1, r25	; 0x01
     662:	80 83       	st	Z, r24
				if((j==0 && player1Y == i) || (j==0 && player1Y+1 == i) || (j==0 && player1Y+1 == i) || (j==13 && player2Y == i) || (j==13 && player2Y+1 == i) || (j==13 && player2Y+1 == i)){
     664:	89 81       	ldd	r24, Y+1	; 0x01
     666:	9a 81       	ldd	r25, Y+2	; 0x02
     668:	8e 15       	cp	r24, r14
     66a:	9f 05       	cpc	r25, r15
     66c:	09 f0       	breq	.+2      	; 0x670 <printMaze+0x150>
     66e:	b9 cf       	rjmp	.-142    	; 0x5e2 <printMaze+0xc2>
     670:	c3 cf       	rjmp	.-122    	; 0x5f8 <printMaze+0xd8>
			
				power++;
		}
		frame_buf[j]=dec; //j is a column, and on the column j, each bit with value 1 is lit. That's why I need to transform the normal array into bit values and this is what dec holds: the bit value for that column 
	}
}
     672:	2a 96       	adiw	r28, 0x0a	; 10
     674:	0f b6       	in	r0, 0x3f	; 63
     676:	f8 94       	cli
     678:	de bf       	out	0x3e, r29	; 62
     67a:	0f be       	out	0x3f, r0	; 63
     67c:	cd bf       	out	0x3d, r28	; 61
     67e:	df 91       	pop	r29
     680:	cf 91       	pop	r28
     682:	1f 91       	pop	r17
     684:	0f 91       	pop	r16
     686:	ff 90       	pop	r15
     688:	ef 90       	pop	r14
     68a:	df 90       	pop	r13
     68c:	cf 90       	pop	r12
     68e:	bf 90       	pop	r11
     690:	af 90       	pop	r10
     692:	9f 90       	pop	r9
     694:	8f 90       	pop	r8
     696:	7f 90       	pop	r7
     698:	6f 90       	pop	r6
     69a:	5f 90       	pop	r5
     69c:	4f 90       	pop	r4
     69e:	3f 90       	pop	r3
     6a0:	2f 90       	pop	r2
     6a2:	08 95       	ret

000006a4 <move_player_and_ball>:
	( void ) pvParameters;
	
	
	#if (configUSE_APPLICATION_TASK_TAG == 1)
	// Set task no to be used for tracing with R2R-Network
	vTaskSetApplicationTaskTag( NULL, ( void * ) 1 );
     6a4:	61 e0       	ldi	r22, 0x01	; 1
     6a6:	70 e0       	ldi	r23, 0x00	; 0
     6a8:	80 e0       	ldi	r24, 0x00	; 0
     6aa:	90 e0       	ldi	r25, 0x00	; 0
     6ac:	0e 94 ee 10 	call	0x21dc	; 0x21dc <vTaskSetApplicationTaskTag>
	
	//Game logic for P1 and ball from here
		while(1){
			vTaskDelay(1000);  // Delay at the start of the game to get players ready
				innitMaze();
				player1Y = 4;
     6b0:	68 94       	set
     6b2:	ee 24       	eor	r14, r14
     6b4:	e2 f8       	bld	r14, 2
     6b6:	f1 2c       	mov	r15, r1
			    player2Y = 4;
			    end = 0;
				
				//randomly place the ball somewhere in the middle
				if(random(0,100)<50)
     6b8:	05 e6       	ldi	r16, 0x65	; 101
     6ba:	10 e0       	ldi	r17, 0x00	; 0
					ballX = 7;
				else 
					ballX = 8;
     6bc:	68 94       	set
     6be:	aa 24       	eor	r10, r10
     6c0:	a3 f8       	bld	r10, 3
     6c2:	b1 2c       	mov	r11, r1
			    player2Y = 4;
			    end = 0;
				
				//randomly place the ball somewhere in the middle
				if(random(0,100)<50)
					ballX = 7;
     6c4:	0f 2e       	mov	r0, r31
     6c6:	f7 e0       	ldi	r31, 0x07	; 7
     6c8:	8f 2e       	mov	r8, r31
     6ca:	91 2c       	mov	r9, r1
     6cc:	f0 2d       	mov	r31, r0
					ballX = 8;
					
				if(random(0,100)<50)
					ballY = 5;
				else 
					ballY = 6;
     6ce:	0f 2e       	mov	r0, r31
     6d0:	f6 e0       	ldi	r31, 0x06	; 6
     6d2:	6f 2e       	mov	r6, r31
     6d4:	71 2c       	mov	r7, r1
     6d6:	f0 2d       	mov	r31, r0
					ballX = 7;
				else 
					ballX = 8;
					
				if(random(0,100)<50)
					ballY = 5;
     6d8:	0f 2e       	mov	r0, r31
     6da:	f5 e0       	ldi	r31, 0x05	; 5
     6dc:	4f 2e       	mov	r4, r31
     6de:	51 2c       	mov	r5, r1
     6e0:	f0 2d       	mov	r31, r0
			    //ballDirectionX = 1; //can be 1 or -1 going right or left
			    //ballDirectionY = -1 //can be 1 or -1 going down or up
				if(random(0,100)<50)
					ballDirectionX=1;
				else 
					ballDirectionX=-1;
     6e2:	cc 24       	eor	r12, r12
     6e4:	ca 94       	dec	r12
     6e6:	dc 2c       	mov	r13, r12
			    
				
			    //ballDirectionX = 1; //can be 1 or -1 going right or left
			    //ballDirectionY = -1 //can be 1 or -1 going down or up
				if(random(0,100)<50)
					ballDirectionX=1;
     6e8:	c1 e0       	ldi	r28, 0x01	; 1
     6ea:	d0 e0       	ldi	r29, 0x00	; 0
	#endif
	
	
	//Game logic for P1 and ball from here
		while(1){
			vTaskDelay(1000);  // Delay at the start of the game to get players ready
     6ec:	88 ee       	ldi	r24, 0xE8	; 232
     6ee:	93 e0       	ldi	r25, 0x03	; 3
     6f0:	0e 94 9b 10 	call	0x2136	; 0x2136 <vTaskDelay>
				innitMaze();
     6f4:	0e 94 2c 02 	call	0x458	; 0x458 <innitMaze>
				player1Y = 4;
     6f8:	f0 92 68 01 	sts	0x0168, r15	; 0x800168 <player1Y+0x1>
     6fc:	e0 92 67 01 	sts	0x0167, r14	; 0x800167 <player1Y>
			    player2Y = 4;
     700:	f0 92 66 01 	sts	0x0166, r15	; 0x800166 <player2Y+0x1>
     704:	e0 92 65 01 	sts	0x0165, r14	; 0x800165 <player2Y>
			    end = 0;
     708:	10 92 64 01 	sts	0x0164, r1	; 0x800164 <end+0x1>
     70c:	10 92 63 01 	sts	0x0163, r1	; 0x800163 <end>
}

int random(int lower, int upper)
{
	int i;
	int num = (rand() %(upper - lower +1)) + lower;
     710:	0e 94 77 14 	call	0x28ee	; 0x28ee <rand>
				player1Y = 4;
			    player2Y = 4;
			    end = 0;
				
				//randomly place the ball somewhere in the middle
				if(random(0,100)<50)
     714:	b8 01       	movw	r22, r16
     716:	0e 94 c0 12 	call	0x2580	; 0x2580 <__divmodhi4>
     71a:	c2 97       	sbiw	r24, 0x32	; 50
     71c:	2c f4       	brge	.+10     	; 0x728 <move_player_and_ball+0x84>
					ballX = 7;
     71e:	90 92 5e 01 	sts	0x015E, r9	; 0x80015e <ballX+0x1>
     722:	80 92 5d 01 	sts	0x015D, r8	; 0x80015d <ballX>
     726:	04 c0       	rjmp	.+8      	; 0x730 <move_player_and_ball+0x8c>
				else 
					ballX = 8;
     728:	b0 92 5e 01 	sts	0x015E, r11	; 0x80015e <ballX+0x1>
     72c:	a0 92 5d 01 	sts	0x015D, r10	; 0x80015d <ballX>
}

int random(int lower, int upper)
{
	int i;
	int num = (rand() %(upper - lower +1)) + lower;
     730:	0e 94 77 14 	call	0x28ee	; 0x28ee <rand>
				if(random(0,100)<50)
					ballX = 7;
				else 
					ballX = 8;
					
				if(random(0,100)<50)
     734:	b8 01       	movw	r22, r16
     736:	0e 94 c0 12 	call	0x2580	; 0x2580 <__divmodhi4>
     73a:	c2 97       	sbiw	r24, 0x32	; 50
     73c:	2c f4       	brge	.+10     	; 0x748 <move_player_and_ball+0xa4>
					ballY = 5;
     73e:	50 92 5c 01 	sts	0x015C, r5	; 0x80015c <ballY+0x1>
     742:	40 92 5b 01 	sts	0x015B, r4	; 0x80015b <ballY>
     746:	04 c0       	rjmp	.+8      	; 0x750 <move_player_and_ball+0xac>
				else 
					ballY = 6;
     748:	70 92 5c 01 	sts	0x015C, r7	; 0x80015c <ballY+0x1>
     74c:	60 92 5b 01 	sts	0x015B, r6	; 0x80015b <ballY>
}

int random(int lower, int upper)
{
	int i;
	int num = (rand() %(upper - lower +1)) + lower;
     750:	0e 94 77 14 	call	0x28ee	; 0x28ee <rand>
			    
			    
				
			    //ballDirectionX = 1; //can be 1 or -1 going right or left
			    //ballDirectionY = -1 //can be 1 or -1 going down or up
				if(random(0,100)<50)
     754:	b8 01       	movw	r22, r16
     756:	0e 94 c0 12 	call	0x2580	; 0x2580 <__divmodhi4>
     75a:	c2 97       	sbiw	r24, 0x32	; 50
     75c:	2c f4       	brge	.+10     	; 0x768 <move_player_and_ball+0xc4>
					ballDirectionX=1;
     75e:	d0 93 5a 01 	sts	0x015A, r29	; 0x80015a <ballDirectionX+0x1>
     762:	c0 93 59 01 	sts	0x0159, r28	; 0x800159 <ballDirectionX>
     766:	04 c0       	rjmp	.+8      	; 0x770 <move_player_and_ball+0xcc>
				else 
					ballDirectionX=-1;
     768:	d0 92 5a 01 	sts	0x015A, r13	; 0x80015a <ballDirectionX+0x1>
     76c:	c0 92 59 01 	sts	0x0159, r12	; 0x800159 <ballDirectionX>
}

int random(int lower, int upper)
{
	int i;
	int num = (rand() %(upper - lower +1)) + lower;
     770:	0e 94 77 14 	call	0x28ee	; 0x28ee <rand>
				if(random(0,100)<50)
					ballDirectionX=1;
				else 
					ballDirectionX=-1;
					
				if(random(0,100)<50)
     774:	b8 01       	movw	r22, r16
     776:	0e 94 c0 12 	call	0x2580	; 0x2580 <__divmodhi4>
     77a:	c2 97       	sbiw	r24, 0x32	; 50
     77c:	2c f4       	brge	.+10     	; 0x788 <move_player_and_ball+0xe4>
					ballDirectionY=1;
     77e:	d0 93 58 01 	sts	0x0158, r29	; 0x800158 <ballDirectionY+0x1>
     782:	c0 93 57 01 	sts	0x0157, r28	; 0x800157 <ballDirectionY>
     786:	04 c0       	rjmp	.+8      	; 0x790 <move_player_and_ball+0xec>
				else 
					ballDirectionY=-1;
     788:	d0 92 58 01 	sts	0x0158, r13	; 0x800158 <ballDirectionY+0x1>
     78c:	c0 92 57 01 	sts	0x0157, r12	; 0x800157 <ballDirectionY>
				
		 //boolean for ending the game
		//From here on the game starts.
		while (end == 0) {
     790:	80 91 63 01 	lds	r24, 0x0163	; 0x800163 <end>
     794:	90 91 64 01 	lds	r25, 0x0164	; 0x800164 <end+0x1>
     798:	89 2b       	or	r24, r25
     79a:	09 f0       	breq	.+2      	; 0x79e <move_player_and_ball+0xfa>
     79c:	a7 cf       	rjmp	.-178    	; 0x6ec <move_player_and_ball+0x48>
			if(score2>=5){//can set end condition here
     79e:	80 91 5f 01 	lds	r24, 0x015F	; 0x80015f <score2>
     7a2:	90 91 60 01 	lds	r25, 0x0160	; 0x800160 <score2+0x1>
     7a6:	05 97       	sbiw	r24, 0x05	; 5
     7a8:	0c f4       	brge	.+2      	; 0x7ac <move_player_and_ball+0x108>
     7aa:	4c c0       	rjmp	.+152    	; 0x844 <move_player_and_ball+0x1a0>
				
				if( xSemaphoreTake( xMutex, 250) ){
     7ac:	20 e0       	ldi	r18, 0x00	; 0
     7ae:	4a ef       	ldi	r20, 0xFA	; 250
     7b0:	50 e0       	ldi	r21, 0x00	; 0
     7b2:	60 e0       	ldi	r22, 0x00	; 0
     7b4:	70 e0       	ldi	r23, 0x00	; 0
     7b6:	80 91 87 01 	lds	r24, 0x0187	; 0x800187 <xMutex>
     7ba:	90 91 88 01 	lds	r25, 0x0188	; 0x800188 <xMutex+0x1>
     7be:	0e 94 ed 0c 	call	0x19da	; 0x19da <xQueueGenericReceive>
     7c2:	88 23       	and	r24, r24
     7c4:	71 f1       	breq	.+92     	; 0x822 <move_player_and_ball+0x17e>
					if( xSemaphoreTake( xMutex1, 250) ){
     7c6:	20 e0       	ldi	r18, 0x00	; 0
     7c8:	4a ef       	ldi	r20, 0xFA	; 250
     7ca:	50 e0       	ldi	r21, 0x00	; 0
     7cc:	60 e0       	ldi	r22, 0x00	; 0
     7ce:	70 e0       	ldi	r23, 0x00	; 0
     7d0:	80 91 85 01 	lds	r24, 0x0185	; 0x800185 <xMutex1>
     7d4:	90 91 86 01 	lds	r25, 0x0186	; 0x800186 <xMutex1+0x1>
     7d8:	0e 94 ed 0c 	call	0x19da	; 0x19da <xQueueGenericReceive>
     7dc:	88 23       	and	r24, r24
     7de:	81 f0       	breq	.+32     	; 0x800 <move_player_and_ball+0x15c>
						com_send_bytes((uint8_t*)"PLAYER2 WINS", 12);//send back to 2
     7e0:	6c e0       	ldi	r22, 0x0C	; 12
     7e2:	8a e2       	ldi	r24, 0x2A	; 42
     7e4:	91 e0       	ldi	r25, 0x01	; 1
     7e6:	0e 94 38 06 	call	0xc70	; 0xc70 <com_send_bytes>
						xSemaphoreGive(xMutex1);
     7ea:	20 e0       	ldi	r18, 0x00	; 0
     7ec:	40 e0       	ldi	r20, 0x00	; 0
     7ee:	50 e0       	ldi	r21, 0x00	; 0
     7f0:	60 e0       	ldi	r22, 0x00	; 0
     7f2:	70 e0       	ldi	r23, 0x00	; 0
     7f4:	80 91 85 01 	lds	r24, 0x0185	; 0x800185 <xMutex1>
     7f8:	90 91 86 01 	lds	r25, 0x0186	; 0x800186 <xMutex1+0x1>
     7fc:	0e 94 f8 0b 	call	0x17f0	; 0x17f0 <xQueueGenericSend>
					}
					setEndGameScreen(2);
     800:	82 e0       	ldi	r24, 0x02	; 2
     802:	90 e0       	ldi	r25, 0x00	; 0
     804:	0e 94 30 01 	call	0x260	; 0x260 <setEndGameScreen>
					printMaze();
     808:	0e 94 90 02 	call	0x520	; 0x520 <printMaze>
					xSemaphoreGive(xMutex);
     80c:	20 e0       	ldi	r18, 0x00	; 0
     80e:	40 e0       	ldi	r20, 0x00	; 0
     810:	50 e0       	ldi	r21, 0x00	; 0
     812:	60 e0       	ldi	r22, 0x00	; 0
     814:	70 e0       	ldi	r23, 0x00	; 0
     816:	80 91 87 01 	lds	r24, 0x0187	; 0x800187 <xMutex>
     81a:	90 91 88 01 	lds	r25, 0x0188	; 0x800188 <xMutex+0x1>
     81e:	0e 94 f8 0b 	call	0x17f0	; 0x17f0 <xQueueGenericSend>
				}
				//while(1);//ends the game
				vTaskDelay(5000);
     822:	88 e8       	ldi	r24, 0x88	; 136
     824:	93 e1       	ldi	r25, 0x13	; 19
     826:	0e 94 9b 10 	call	0x2136	; 0x2136 <vTaskDelay>
				score1=0;
     82a:	10 92 62 01 	sts	0x0162, r1	; 0x800162 <score1+0x1>
     82e:	10 92 61 01 	sts	0x0161, r1	; 0x800161 <score1>
				score2=0;
     832:	10 92 60 01 	sts	0x0160, r1	; 0x800160 <score2+0x1>
     836:	10 92 5f 01 	sts	0x015F, r1	; 0x80015f <score2>
				end=1;
     83a:	d0 93 64 01 	sts	0x0164, r29	; 0x800164 <end+0x1>
     83e:	c0 93 63 01 	sts	0x0163, r28	; 0x800163 <end>
     842:	51 c0       	rjmp	.+162    	; 0x8e6 <move_player_and_ball+0x242>
				
			}
			if(score1>=5){//can set end condition here
     844:	80 91 61 01 	lds	r24, 0x0161	; 0x800161 <score1>
     848:	90 91 62 01 	lds	r25, 0x0162	; 0x800162 <score1+0x1>
     84c:	05 97       	sbiw	r24, 0x05	; 5
     84e:	0c f4       	brge	.+2      	; 0x852 <move_player_and_ball+0x1ae>
     850:	4a c0       	rjmp	.+148    	; 0x8e6 <move_player_and_ball+0x242>
				
				if( xSemaphoreTake( xMutex, 250) ){
     852:	20 e0       	ldi	r18, 0x00	; 0
     854:	4a ef       	ldi	r20, 0xFA	; 250
     856:	50 e0       	ldi	r21, 0x00	; 0
     858:	60 e0       	ldi	r22, 0x00	; 0
     85a:	70 e0       	ldi	r23, 0x00	; 0
     85c:	80 91 87 01 	lds	r24, 0x0187	; 0x800187 <xMutex>
     860:	90 91 88 01 	lds	r25, 0x0188	; 0x800188 <xMutex+0x1>
     864:	0e 94 ed 0c 	call	0x19da	; 0x19da <xQueueGenericReceive>
     868:	88 23       	and	r24, r24
     86a:	69 f1       	breq	.+90     	; 0x8c6 <move_player_and_ball+0x222>
					if( xSemaphoreTake( xMutex1, 250) ){
     86c:	20 e0       	ldi	r18, 0x00	; 0
     86e:	4a ef       	ldi	r20, 0xFA	; 250
     870:	50 e0       	ldi	r21, 0x00	; 0
     872:	60 e0       	ldi	r22, 0x00	; 0
     874:	70 e0       	ldi	r23, 0x00	; 0
     876:	80 91 85 01 	lds	r24, 0x0185	; 0x800185 <xMutex1>
     87a:	90 91 86 01 	lds	r25, 0x0186	; 0x800186 <xMutex1+0x1>
     87e:	0e 94 ed 0c 	call	0x19da	; 0x19da <xQueueGenericReceive>
     882:	88 23       	and	r24, r24
     884:	81 f0       	breq	.+32     	; 0x8a6 <move_player_and_ball+0x202>
					com_send_bytes((uint8_t*)"PLAYER1 WINS", 12);//send back to 2
     886:	6c e0       	ldi	r22, 0x0C	; 12
     888:	87 e3       	ldi	r24, 0x37	; 55
     88a:	91 e0       	ldi	r25, 0x01	; 1
     88c:	0e 94 38 06 	call	0xc70	; 0xc70 <com_send_bytes>
					xSemaphoreGive(xMutex1);
     890:	20 e0       	ldi	r18, 0x00	; 0
     892:	40 e0       	ldi	r20, 0x00	; 0
     894:	50 e0       	ldi	r21, 0x00	; 0
     896:	60 e0       	ldi	r22, 0x00	; 0
     898:	70 e0       	ldi	r23, 0x00	; 0
     89a:	80 91 85 01 	lds	r24, 0x0185	; 0x800185 <xMutex1>
     89e:	90 91 86 01 	lds	r25, 0x0186	; 0x800186 <xMutex1+0x1>
     8a2:	0e 94 f8 0b 	call	0x17f0	; 0x17f0 <xQueueGenericSend>
					}
					setEndGameScreen(1);
     8a6:	ce 01       	movw	r24, r28
     8a8:	0e 94 30 01 	call	0x260	; 0x260 <setEndGameScreen>
					printMaze();
     8ac:	0e 94 90 02 	call	0x520	; 0x520 <printMaze>
					xSemaphoreGive(xMutex);
     8b0:	20 e0       	ldi	r18, 0x00	; 0
     8b2:	40 e0       	ldi	r20, 0x00	; 0
     8b4:	50 e0       	ldi	r21, 0x00	; 0
     8b6:	60 e0       	ldi	r22, 0x00	; 0
     8b8:	70 e0       	ldi	r23, 0x00	; 0
     8ba:	80 91 87 01 	lds	r24, 0x0187	; 0x800187 <xMutex>
     8be:	90 91 88 01 	lds	r25, 0x0188	; 0x800188 <xMutex+0x1>
     8c2:	0e 94 f8 0b 	call	0x17f0	; 0x17f0 <xQueueGenericSend>
				}
				//while(1);//ends the game
				vTaskDelay(5000);
     8c6:	88 e8       	ldi	r24, 0x88	; 136
     8c8:	93 e1       	ldi	r25, 0x13	; 19
     8ca:	0e 94 9b 10 	call	0x2136	; 0x2136 <vTaskDelay>
				score1=0;
     8ce:	10 92 62 01 	sts	0x0162, r1	; 0x800162 <score1+0x1>
     8d2:	10 92 61 01 	sts	0x0161, r1	; 0x800161 <score1>
				score2=0;
     8d6:	10 92 60 01 	sts	0x0160, r1	; 0x800160 <score2+0x1>
     8da:	10 92 5f 01 	sts	0x015F, r1	; 0x80015f <score2>
				end=1;
     8de:	d0 93 64 01 	sts	0x0164, r29	; 0x800164 <end+0x1>
     8e2:	c0 93 63 01 	sts	0x0163, r28	; 0x800163 <end>
			}
			
			int PinCValue = PINC & 0b11000011 ; // Masking PINC
     8e6:	86 b1       	in	r24, 0x06	; 6
     8e8:	83 7c       	andi	r24, 0xC3	; 195
     8ea:	90 e0       	ldi	r25, 0x00	; 0
			//Moving the character
				
			if(PinCValue==up)
     8ec:	20 91 0a 01 	lds	r18, 0x010A	; 0x80010a <up>
     8f0:	30 91 0b 01 	lds	r19, 0x010B	; 0x80010b <up+0x1>
     8f4:	82 17       	cp	r24, r18
     8f6:	93 07       	cpc	r25, r19
     8f8:	71 f4       	brne	.+28     	; 0x916 <__stack+0x17>
				if (player1Y != 0){
     8fa:	20 91 67 01 	lds	r18, 0x0167	; 0x800167 <player1Y>
     8fe:	30 91 68 01 	lds	r19, 0x0168	; 0x800168 <player1Y+0x1>
     902:	21 15       	cp	r18, r1
     904:	31 05       	cpc	r19, r1
     906:	09 f4       	brne	.+2      	; 0x90a <__stack+0xb>
     908:	13 c1       	rjmp	.+550    	; 0xb30 <__stack+0x231>
						player1Y = player1Y - 1;}
     90a:	21 50       	subi	r18, 0x01	; 1
     90c:	31 09       	sbc	r19, r1
     90e:	30 93 68 01 	sts	0x0168, r19	; 0x800168 <player1Y+0x1>
     912:	20 93 67 01 	sts	0x0167, r18	; 0x800167 <player1Y>
					//	player2Y = player2Y - 1;} //temporary until PC connectivity is implemented
					
			if(PinCValue==down)
     916:	20 91 0c 01 	lds	r18, 0x010C	; 0x80010c <down>
     91a:	30 91 0d 01 	lds	r19, 0x010D	; 0x80010d <down+0x1>
     91e:	82 17       	cp	r24, r18
     920:	93 07       	cpc	r25, r19
     922:	69 f4       	brne	.+26     	; 0x93e <__stack+0x3f>
				if (player1Y != 8){
     924:	20 91 67 01 	lds	r18, 0x0167	; 0x800167 <player1Y>
     928:	30 91 68 01 	lds	r19, 0x0168	; 0x800168 <player1Y+0x1>
     92c:	28 30       	cpi	r18, 0x08	; 8
     92e:	31 05       	cpc	r19, r1
     930:	31 f0       	breq	.+12     	; 0x93e <__stack+0x3f>
						player1Y = player1Y + 1;}
     932:	2f 5f       	subi	r18, 0xFF	; 255
     934:	3f 4f       	sbci	r19, 0xFF	; 255
     936:	30 93 68 01 	sts	0x0168, r19	; 0x800168 <player1Y+0x1>
     93a:	20 93 67 01 	sts	0x0167, r18	; 0x800167 <player1Y>
					//	player2Y = player2Y + 1;} //temporary until PC connectivity is implemented

			//Move ball				int maze[10][14];
				if(ballY+ballDirectionY==0 && ballX+ballDirectionX==0 || ballY+ballDirectionY==0 && ballX+ballDirectionX==14 || ballY+ballDirectionY==10 && ballX+ballDirectionX==0 || ballY+ballDirectionY==10 && ballX+ballDirectionX==14 ){//corner bug fixed here
     93e:	20 91 57 01 	lds	r18, 0x0157	; 0x800157 <ballDirectionY>
     942:	30 91 58 01 	lds	r19, 0x0158	; 0x800158 <ballDirectionY+0x1>
     946:	80 91 5b 01 	lds	r24, 0x015B	; 0x80015b <ballY>
     94a:	90 91 5c 01 	lds	r25, 0x015C	; 0x80015c <ballY+0x1>
     94e:	82 0f       	add	r24, r18
     950:	93 1f       	adc	r25, r19
     952:	00 97       	sbiw	r24, 0x00	; 0
     954:	89 f4       	brne	.+34     	; 0x978 <__stack+0x79>
     956:	60 91 5d 01 	lds	r22, 0x015D	; 0x80015d <ballX>
     95a:	70 91 5e 01 	lds	r23, 0x015E	; 0x80015e <ballX+0x1>
     95e:	40 91 59 01 	lds	r20, 0x0159	; 0x800159 <ballDirectionX>
     962:	50 91 5a 01 	lds	r21, 0x015A	; 0x80015a <ballDirectionX+0x1>
     966:	46 0f       	add	r20, r22
     968:	57 1f       	adc	r21, r23
     96a:	41 15       	cp	r20, r1
     96c:	51 05       	cpc	r21, r1
     96e:	b9 f0       	breq	.+46     	; 0x99e <__stack+0x9f>
     970:	4e 30       	cpi	r20, 0x0E	; 14
     972:	51 05       	cpc	r21, r1
     974:	39 f5       	brne	.+78     	; 0x9c4 <__stack+0xc5>
     976:	13 c0       	rjmp	.+38     	; 0x99e <__stack+0x9f>
     978:	8a 30       	cpi	r24, 0x0A	; 10
     97a:	91 05       	cpc	r25, r1
     97c:	19 f5       	brne	.+70     	; 0x9c4 <__stack+0xc5>
     97e:	60 91 5d 01 	lds	r22, 0x015D	; 0x80015d <ballX>
     982:	70 91 5e 01 	lds	r23, 0x015E	; 0x80015e <ballX+0x1>
     986:	40 91 59 01 	lds	r20, 0x0159	; 0x800159 <ballDirectionX>
     98a:	50 91 5a 01 	lds	r21, 0x015A	; 0x80015a <ballDirectionX+0x1>
     98e:	46 0f       	add	r20, r22
     990:	57 1f       	adc	r21, r23
     992:	41 15       	cp	r20, r1
     994:	51 05       	cpc	r21, r1
     996:	19 f0       	breq	.+6      	; 0x99e <__stack+0x9f>
     998:	4e 30       	cpi	r20, 0x0E	; 14
     99a:	51 05       	cpc	r21, r1
     99c:	99 f4       	brne	.+38     	; 0x9c4 <__stack+0xc5>
					ballDirectionY=ballDirectionY*(-1);
     99e:	31 95       	neg	r19
     9a0:	21 95       	neg	r18
     9a2:	31 09       	sbc	r19, r1
     9a4:	30 93 58 01 	sts	0x0158, r19	; 0x800158 <ballDirectionY+0x1>
     9a8:	20 93 57 01 	sts	0x0157, r18	; 0x800157 <ballDirectionY>
					ballDirectionX=ballDirectionX*(-1);
     9ac:	80 91 59 01 	lds	r24, 0x0159	; 0x800159 <ballDirectionX>
     9b0:	90 91 5a 01 	lds	r25, 0x015A	; 0x80015a <ballDirectionX+0x1>
     9b4:	91 95       	neg	r25
     9b6:	81 95       	neg	r24
     9b8:	91 09       	sbc	r25, r1
     9ba:	90 93 5a 01 	sts	0x015A, r25	; 0x80015a <ballDirectionX+0x1>
     9be:	80 93 59 01 	sts	0x0159, r24	; 0x800159 <ballDirectionX>
     9c2:	8e c0       	rjmp	.+284    	; 0xae0 <__stack+0x1e1>
				}
				else if(maze[ballY+ballDirectionY][ballX+ballDirectionX]==1) //if ball is going and on the next position would enter the same pixel as a wall, it will change direction
     9c4:	40 91 5d 01 	lds	r20, 0x015D	; 0x80015d <ballX>
     9c8:	50 91 5e 01 	lds	r21, 0x015E	; 0x80015e <ballX+0x1>
     9cc:	60 91 59 01 	lds	r22, 0x0159	; 0x800159 <ballDirectionX>
     9d0:	70 91 5a 01 	lds	r23, 0x015A	; 0x80015a <ballDirectionX+0x1>
     9d4:	88 0f       	add	r24, r24
     9d6:	99 1f       	adc	r25, r25
     9d8:	fc 01       	movw	r30, r24
     9da:	ee 0f       	add	r30, r30
     9dc:	ff 1f       	adc	r31, r31
     9de:	ee 0f       	add	r30, r30
     9e0:	ff 1f       	adc	r31, r31
     9e2:	ee 0f       	add	r30, r30
     9e4:	ff 1f       	adc	r31, r31
     9e6:	e8 1b       	sub	r30, r24
     9e8:	f9 0b       	sbc	r31, r25
     9ea:	ca 01       	movw	r24, r20
     9ec:	86 0f       	add	r24, r22
     9ee:	97 1f       	adc	r25, r23
     9f0:	e8 0f       	add	r30, r24
     9f2:	f9 1f       	adc	r31, r25
     9f4:	ee 0f       	add	r30, r30
     9f6:	ff 1f       	adc	r31, r31
     9f8:	ec 5d       	subi	r30, 0xDC	; 220
     9fa:	f9 4f       	sbci	r31, 0xF9	; 249
     9fc:	80 81       	ld	r24, Z
     9fe:	91 81       	ldd	r25, Z+1	; 0x01
     a00:	81 30       	cpi	r24, 0x01	; 1
     a02:	91 05       	cpc	r25, r1
     a04:	41 f4       	brne	.+16     	; 0xa16 <__stack+0x117>
					ballDirectionY=ballDirectionY*(-1);
     a06:	31 95       	neg	r19
     a08:	21 95       	neg	r18
     a0a:	31 09       	sbc	r19, r1
     a0c:	30 93 58 01 	sts	0x0158, r19	; 0x800158 <ballDirectionY+0x1>
     a10:	20 93 57 01 	sts	0x0157, r18	; 0x800157 <ballDirectionY>
     a14:	65 c0       	rjmp	.+202    	; 0xae0 <__stack+0x1e1>
				
				//else if(maze[ballX+ballDirectionX][ballY+ballDirectionY]==2)
				else if(ballX==0 || ballX==13)
     a16:	41 15       	cp	r20, r1
     a18:	51 05       	cpc	r21, r1
     a1a:	21 f0       	breq	.+8      	; 0xa24 <__stack+0x125>
     a1c:	4d 30       	cpi	r20, 0x0D	; 13
     a1e:	51 05       	cpc	r21, r1
     a20:	09 f0       	breq	.+2      	; 0xa24 <__stack+0x125>
     a22:	55 c0       	rjmp	.+170    	; 0xace <__stack+0x1cf>
				{							 //if ball is going and on the next position would enter game over position, one player wins the game
				if(ballDirectionX==-1){
     a24:	6f 3f       	cpi	r22, 0xFF	; 255
     a26:	7f 4f       	sbci	r23, 0xFF	; 255
     a28:	39 f5       	brne	.+78     	; 0xa78 <__stack+0x179>
					score2++;
     a2a:	80 91 5f 01 	lds	r24, 0x015F	; 0x80015f <score2>
     a2e:	90 91 60 01 	lds	r25, 0x0160	; 0x800160 <score2+0x1>
     a32:	01 96       	adiw	r24, 0x01	; 1
     a34:	90 93 60 01 	sts	0x0160, r25	; 0x800160 <score2+0x1>
     a38:	80 93 5f 01 	sts	0x015F, r24	; 0x80015f <score2>
					if( xSemaphoreTake( xMutex1, 250) ){
     a3c:	20 e0       	ldi	r18, 0x00	; 0
     a3e:	4a ef       	ldi	r20, 0xFA	; 250
     a40:	50 e0       	ldi	r21, 0x00	; 0
     a42:	60 e0       	ldi	r22, 0x00	; 0
     a44:	70 e0       	ldi	r23, 0x00	; 0
     a46:	80 91 85 01 	lds	r24, 0x0185	; 0x800185 <xMutex1>
     a4a:	90 91 86 01 	lds	r25, 0x0186	; 0x800186 <xMutex1+0x1>
     a4e:	0e 94 ed 0c 	call	0x19da	; 0x19da <xQueueGenericReceive>
     a52:	88 23       	and	r24, r24
     a54:	b9 f1       	breq	.+110    	; 0xac4 <__stack+0x1c5>
						com_send_bytes((uint8_t*)"2", 12);
     a56:	6c e0       	ldi	r22, 0x0C	; 12
     a58:	84 e4       	ldi	r24, 0x44	; 68
     a5a:	91 e0       	ldi	r25, 0x01	; 1
     a5c:	0e 94 38 06 	call	0xc70	; 0xc70 <com_send_bytes>
						xSemaphoreGive(xMutex1);}
     a60:	20 e0       	ldi	r18, 0x00	; 0
     a62:	40 e0       	ldi	r20, 0x00	; 0
     a64:	50 e0       	ldi	r21, 0x00	; 0
     a66:	60 e0       	ldi	r22, 0x00	; 0
     a68:	70 e0       	ldi	r23, 0x00	; 0
     a6a:	80 91 85 01 	lds	r24, 0x0185	; 0x800185 <xMutex1>
     a6e:	90 91 86 01 	lds	r25, 0x0186	; 0x800186 <xMutex1+0x1>
     a72:	0e 94 f8 0b 	call	0x17f0	; 0x17f0 <xQueueGenericSend>
     a76:	26 c0       	rjmp	.+76     	; 0xac4 <__stack+0x1c5>
					
					}
				else{
					score1++;
     a78:	80 91 61 01 	lds	r24, 0x0161	; 0x800161 <score1>
     a7c:	90 91 62 01 	lds	r25, 0x0162	; 0x800162 <score1+0x1>
     a80:	01 96       	adiw	r24, 0x01	; 1
     a82:	90 93 62 01 	sts	0x0162, r25	; 0x800162 <score1+0x1>
     a86:	80 93 61 01 	sts	0x0161, r24	; 0x800161 <score1>
					if( xSemaphoreTake( xMutex1, 250) ){
     a8a:	20 e0       	ldi	r18, 0x00	; 0
     a8c:	4a ef       	ldi	r20, 0xFA	; 250
     a8e:	50 e0       	ldi	r21, 0x00	; 0
     a90:	60 e0       	ldi	r22, 0x00	; 0
     a92:	70 e0       	ldi	r23, 0x00	; 0
     a94:	80 91 85 01 	lds	r24, 0x0185	; 0x800185 <xMutex1>
     a98:	90 91 86 01 	lds	r25, 0x0186	; 0x800186 <xMutex1+0x1>
     a9c:	0e 94 ed 0c 	call	0x19da	; 0x19da <xQueueGenericReceive>
     aa0:	88 23       	and	r24, r24
     aa2:	81 f0       	breq	.+32     	; 0xac4 <__stack+0x1c5>
						com_send_bytes((uint8_t*)"1", 12);
     aa4:	6c e0       	ldi	r22, 0x0C	; 12
     aa6:	86 e4       	ldi	r24, 0x46	; 70
     aa8:	91 e0       	ldi	r25, 0x01	; 1
     aaa:	0e 94 38 06 	call	0xc70	; 0xc70 <com_send_bytes>
						xSemaphoreGive(xMutex1);}
     aae:	20 e0       	ldi	r18, 0x00	; 0
     ab0:	40 e0       	ldi	r20, 0x00	; 0
     ab2:	50 e0       	ldi	r21, 0x00	; 0
     ab4:	60 e0       	ldi	r22, 0x00	; 0
     ab6:	70 e0       	ldi	r23, 0x00	; 0
     ab8:	80 91 85 01 	lds	r24, 0x0185	; 0x800185 <xMutex1>
     abc:	90 91 86 01 	lds	r25, 0x0186	; 0x800186 <xMutex1+0x1>
     ac0:	0e 94 f8 0b 	call	0x17f0	; 0x17f0 <xQueueGenericSend>
					
					}
					
				end = 1;
     ac4:	d0 93 64 01 	sts	0x0164, r29	; 0x800164 <end+0x1>
     ac8:	c0 93 63 01 	sts	0x0163, r28	; 0x800163 <end>
     acc:	09 c0       	rjmp	.+18     	; 0xae0 <__stack+0x1e1>
				}
				
				else if(maze[ballY+ballDirectionY][ballX+ballDirectionX]==3) // if ball is going and on next position hits a player, it will change direction
     ace:	03 97       	sbiw	r24, 0x03	; 3
     ad0:	39 f4       	brne	.+14     	; 0xae0 <__stack+0x1e1>
					{
						ballDirectionX=ballDirectionX*(-1);
     ad2:	71 95       	neg	r23
     ad4:	61 95       	neg	r22
     ad6:	71 09       	sbc	r23, r1
     ad8:	70 93 5a 01 	sts	0x015A, r23	; 0x80015a <ballDirectionX+0x1>
     adc:	60 93 59 01 	sts	0x0159, r22	; 0x800159 <ballDirectionX>
					}
					
				ballX=ballX+ballDirectionX;
     ae0:	20 91 5d 01 	lds	r18, 0x015D	; 0x80015d <ballX>
     ae4:	30 91 5e 01 	lds	r19, 0x015E	; 0x80015e <ballX+0x1>
     ae8:	80 91 59 01 	lds	r24, 0x0159	; 0x800159 <ballDirectionX>
     aec:	90 91 5a 01 	lds	r25, 0x015A	; 0x80015a <ballDirectionX+0x1>
     af0:	82 0f       	add	r24, r18
     af2:	93 1f       	adc	r25, r19
     af4:	90 93 5e 01 	sts	0x015E, r25	; 0x80015e <ballX+0x1>
     af8:	80 93 5d 01 	sts	0x015D, r24	; 0x80015d <ballX>
				ballY=ballY+ballDirectionY;
     afc:	20 91 5b 01 	lds	r18, 0x015B	; 0x80015b <ballY>
     b00:	30 91 5c 01 	lds	r19, 0x015C	; 0x80015c <ballY+0x1>
     b04:	80 91 57 01 	lds	r24, 0x0157	; 0x800157 <ballDirectionY>
     b08:	90 91 58 01 	lds	r25, 0x0158	; 0x800158 <ballDirectionY+0x1>
     b0c:	82 0f       	add	r24, r18
     b0e:	93 1f       	adc	r25, r19
     b10:	90 93 5c 01 	sts	0x015C, r25	; 0x80015c <ballY+0x1>
     b14:	80 93 5b 01 	sts	0x015B, r24	; 0x80015b <ballY>
				
			vTaskDelay(200);  // Task delay
     b18:	88 ec       	ldi	r24, 0xC8	; 200
     b1a:	90 e0       	ldi	r25, 0x00	; 0
     b1c:	0e 94 9b 10 	call	0x2136	; 0x2136 <vTaskDelay>
				else 
					ballDirectionY=-1;
				
		 //boolean for ending the game
		//From here on the game starts.
		while (end == 0) {
     b20:	80 91 63 01 	lds	r24, 0x0163	; 0x800163 <end>
     b24:	90 91 64 01 	lds	r25, 0x0164	; 0x800164 <end+0x1>
     b28:	89 2b       	or	r24, r25
     b2a:	09 f4       	brne	.+2      	; 0xb2e <__stack+0x22f>
     b2c:	38 ce       	rjmp	.-912    	; 0x79e <move_player_and_ball+0xfa>
     b2e:	de cd       	rjmp	.-1092   	; 0x6ec <move_player_and_ball+0x48>
			if(PinCValue==up)
				if (player1Y != 0){
						player1Y = player1Y - 1;}
					//	player2Y = player2Y - 1;} //temporary until PC connectivity is implemented
					
			if(PinCValue==down)
     b30:	40 91 0c 01 	lds	r20, 0x010C	; 0x80010c <down>
     b34:	50 91 0d 01 	lds	r21, 0x010D	; 0x80010d <down+0x1>
     b38:	84 17       	cp	r24, r20
     b3a:	95 07       	cpc	r25, r21
     b3c:	09 f0       	breq	.+2      	; 0xb40 <__stack+0x241>
     b3e:	ff ce       	rjmp	.-514    	; 0x93e <__stack+0x3f>
     b40:	f8 ce       	rjmp	.-528    	; 0x932 <__stack+0x33>

00000b42 <refresh_display>:
	// Set task no to be used for tracing with R2R-Network
	//vTaskSetApplicationTaskTag( NULL, ( void * ) 1 );
	//#endif
	
	for(;;){
			if( xSemaphoreTake( xMutex, 250) ){
     b42:	20 e0       	ldi	r18, 0x00	; 0
     b44:	4a ef       	ldi	r20, 0xFA	; 250
     b46:	50 e0       	ldi	r21, 0x00	; 0
     b48:	60 e0       	ldi	r22, 0x00	; 0
     b4a:	70 e0       	ldi	r23, 0x00	; 0
     b4c:	80 91 87 01 	lds	r24, 0x0187	; 0x800187 <xMutex>
     b50:	90 91 88 01 	lds	r25, 0x0188	; 0x800188 <xMutex+0x1>
     b54:	0e 94 ed 0c 	call	0x19da	; 0x19da <xQueueGenericReceive>
     b58:	88 23       	and	r24, r24
     b5a:	99 f3       	breq	.-26     	; 0xb42 <refresh_display>
			printMaze();
     b5c:	0e 94 90 02 	call	0x520	; 0x520 <printMaze>
			vTaskDelay(100); //interval of time at which the maze is printed. This needs to be long enough for the other tasks to execute. 
     b60:	84 e6       	ldi	r24, 0x64	; 100
     b62:	90 e0       	ldi	r25, 0x00	; 0
     b64:	0e 94 9b 10 	call	0x2136	; 0x2136 <vTaskDelay>
			xSemaphoreGive( xMutex );
     b68:	20 e0       	ldi	r18, 0x00	; 0
     b6a:	40 e0       	ldi	r20, 0x00	; 0
     b6c:	50 e0       	ldi	r21, 0x00	; 0
     b6e:	60 e0       	ldi	r22, 0x00	; 0
     b70:	70 e0       	ldi	r23, 0x00	; 0
     b72:	80 91 87 01 	lds	r24, 0x0187	; 0x800187 <xMutex>
     b76:	90 91 88 01 	lds	r25, 0x0188	; 0x800188 <xMutex+0x1>
     b7a:	0e 94 f8 0b 	call	0x17f0	; 0x17f0 <xQueueGenericSend>
     b7e:	e1 cf       	rjmp	.-62     	; 0xb42 <refresh_display>

00000b80 <vApplicationIdleHook>:
	}
}


void vApplicationIdleHook( void )
{
     b80:	08 95       	ret

00000b82 <main>:
}

//-----------------------------------------
int main(void)
{
	init_board();
     b82:	0e 94 41 06 	call	0xc82	; 0xc82 <init_board>
	
	// Shift register Enable output (G=0)
	PORTD &= ~_BV(PORTD6);
     b86:	5e 98       	cbi	0x0b, 6	; 11
	
	//creates tasks
	BaseType_t t1 = xTaskCreate(startup_task, (const char *)"Startup", configMINIMAL_STACK_SIZE, (void *)NULL, tskIDLE_PRIORITY, NULL); // This task starts the other tasks as well. I guess.
     b88:	e1 2c       	mov	r14, r1
     b8a:	f1 2c       	mov	r15, r1
     b8c:	00 e0       	ldi	r16, 0x00	; 0
     b8e:	20 e0       	ldi	r18, 0x00	; 0
     b90:	30 e0       	ldi	r19, 0x00	; 0
     b92:	45 e5       	ldi	r20, 0x55	; 85
     b94:	50 e0       	ldi	r21, 0x00	; 0
     b96:	68 e4       	ldi	r22, 0x48	; 72
     b98:	71 e0       	ldi	r23, 0x01	; 1
     b9a:	8e ea       	ldi	r24, 0xAE	; 174
     b9c:	90 e0       	ldi	r25, 0x00	; 0
     b9e:	0e 94 1c 0e 	call	0x1c38	; 0x1c38 <xTaskCreate>

	// Start the display handler timer
	init_display_timer(handle_display);
     ba2:	87 e0       	ldi	r24, 0x07	; 7
     ba4:	91 e0       	ldi	r25, 0x01	; 1
     ba6:	0e 94 fd 05 	call	0xbfa	; 0xbfa <init_display_timer>
	
	
	sei();
     baa:	78 94       	sei
	//Start the scheduler
	vTaskStartScheduler();
     bac:	0e 94 31 0f 	call	0x1e62	; 0x1e62 <vTaskStartScheduler>
     bb0:	ff cf       	rjmp	.-2      	; 0xbb0 <main+0x2e>

00000bb2 <_com_call_back>:
     bb2:	cf 93       	push	r28
     bb4:	df 93       	push	r29
     bb6:	00 d0       	rcall	.+0      	; 0xbb8 <_com_call_back+0x6>
     bb8:	cd b7       	in	r28, 0x3d	; 61
     bba:	de b7       	in	r29, 0x3e	; 62
     bbc:	6a 83       	std	Y+2, r22	; 0x02
     bbe:	80 91 d3 01 	lds	r24, 0x01D3	; 0x8001d3 <_x_rx_com_queue>
     bc2:	90 91 d4 01 	lds	r25, 0x01D4	; 0x8001d4 <_x_rx_com_queue+0x1>
     bc6:	00 97       	sbiw	r24, 0x00	; 0
     bc8:	71 f0       	breq	.+28     	; 0xbe6 <_com_call_back+0x34>
     bca:	19 82       	std	Y+1, r1	; 0x01
     bcc:	20 e0       	ldi	r18, 0x00	; 0
     bce:	ae 01       	movw	r20, r28
     bd0:	4f 5f       	subi	r20, 0xFF	; 255
     bd2:	5f 4f       	sbci	r21, 0xFF	; 255
     bd4:	be 01       	movw	r22, r28
     bd6:	6e 5f       	subi	r22, 0xFE	; 254
     bd8:	7f 4f       	sbci	r23, 0xFF	; 255
     bda:	0e 94 b3 0c 	call	0x1966	; 0x1966 <xQueueGenericSendFromISR>
     bde:	89 81       	ldd	r24, Y+1	; 0x01
     be0:	81 11       	cpse	r24, r1
     be2:	0e 94 0d 08 	call	0x101a	; 0x101a <vPortYield>
     be6:	0f 90       	pop	r0
     be8:	0f 90       	pop	r0
     bea:	df 91       	pop	r29
     bec:	cf 91       	pop	r28
     bee:	08 95       	ret

00000bf0 <init_com>:
     bf0:	90 93 d4 01 	sts	0x01D4, r25	; 0x8001d4 <_x_rx_com_queue+0x1>
     bf4:	80 93 d3 01 	sts	0x01D3, r24	; 0x8001d3 <_x_rx_com_queue>
     bf8:	08 95       	ret

00000bfa <init_display_timer>:
     bfa:	90 93 d2 01 	sts	0x01D2, r25	; 0x8001d2 <cb_ptr+0x1>
     bfe:	80 93 d1 01 	sts	0x01D1, r24	; 0x8001d1 <cb_ptr>
     c02:	8a e0       	ldi	r24, 0x0A	; 10
     c04:	87 bd       	out	0x27, r24	; 39
     c06:	84 b5       	in	r24, 0x24	; 36
     c08:	82 60       	ori	r24, 0x02	; 2
     c0a:	84 bd       	out	0x24, r24	; 36
     c0c:	ee e6       	ldi	r30, 0x6E	; 110
     c0e:	f0 e0       	ldi	r31, 0x00	; 0
     c10:	80 81       	ld	r24, Z
     c12:	82 60       	ori	r24, 0x02	; 2
     c14:	80 83       	st	Z, r24
     c16:	85 b5       	in	r24, 0x25	; 37
     c18:	85 60       	ori	r24, 0x05	; 5
     c1a:	85 bd       	out	0x25, r24	; 37
     c1c:	08 95       	ret

00000c1e <__vector_16>:
     c1e:	1f 92       	push	r1
     c20:	0f 92       	push	r0
     c22:	0f b6       	in	r0, 0x3f	; 63
     c24:	0f 92       	push	r0
     c26:	11 24       	eor	r1, r1
     c28:	2f 93       	push	r18
     c2a:	3f 93       	push	r19
     c2c:	4f 93       	push	r20
     c2e:	5f 93       	push	r21
     c30:	6f 93       	push	r22
     c32:	7f 93       	push	r23
     c34:	8f 93       	push	r24
     c36:	9f 93       	push	r25
     c38:	af 93       	push	r26
     c3a:	bf 93       	push	r27
     c3c:	ef 93       	push	r30
     c3e:	ff 93       	push	r31
     c40:	e0 91 d1 01 	lds	r30, 0x01D1	; 0x8001d1 <cb_ptr>
     c44:	f0 91 d2 01 	lds	r31, 0x01D2	; 0x8001d2 <cb_ptr+0x1>
     c48:	30 97       	sbiw	r30, 0x00	; 0
     c4a:	09 f0       	breq	.+2      	; 0xc4e <__vector_16+0x30>
     c4c:	09 95       	icall
     c4e:	ff 91       	pop	r31
     c50:	ef 91       	pop	r30
     c52:	bf 91       	pop	r27
     c54:	af 91       	pop	r26
     c56:	9f 91       	pop	r25
     c58:	8f 91       	pop	r24
     c5a:	7f 91       	pop	r23
     c5c:	6f 91       	pop	r22
     c5e:	5f 91       	pop	r21
     c60:	4f 91       	pop	r20
     c62:	3f 91       	pop	r19
     c64:	2f 91       	pop	r18
     c66:	0f 90       	pop	r0
     c68:	0f be       	out	0x3f, r0	; 63
     c6a:	0f 90       	pop	r0
     c6c:	1f 90       	pop	r1
     c6e:	18 95       	reti

00000c70 <com_send_bytes>:
     c70:	46 2f       	mov	r20, r22
     c72:	bc 01       	movw	r22, r24
     c74:	80 91 d5 01 	lds	r24, 0x01D5	; 0x8001d5 <_com_serial_instance>
     c78:	90 91 d6 01 	lds	r25, 0x01D6	; 0x8001d6 <_com_serial_instance+0x1>
     c7c:	0e 94 75 09 	call	0x12ea	; 0x12ea <serial_send_bytes>
     c80:	08 95       	ret

00000c82 <init_board>:
     c82:	8f 92       	push	r8
     c84:	9f 92       	push	r9
     c86:	af 92       	push	r10
     c88:	bf 92       	push	r11
     c8a:	cf 92       	push	r12
     c8c:	df 92       	push	r13
     c8e:	ef 92       	push	r14
     c90:	0f 93       	push	r16
     c92:	8e ea       	ldi	r24, 0xAE	; 174
     c94:	91 e0       	ldi	r25, 0x01	; 1
     c96:	0e 94 9a 06 	call	0xd34	; 0xd34 <buffer_init>
     c9a:	8b e8       	ldi	r24, 0x8B	; 139
     c9c:	91 e0       	ldi	r25, 0x01	; 1
     c9e:	0e 94 9a 06 	call	0xd34	; 0xd34 <buffer_init>
     ca2:	0f 2e       	mov	r0, r31
     ca4:	f9 ed       	ldi	r31, 0xD9	; 217
     ca6:	8f 2e       	mov	r8, r31
     ca8:	f5 e0       	ldi	r31, 0x05	; 5
     caa:	9f 2e       	mov	r9, r31
     cac:	f0 2d       	mov	r31, r0
     cae:	0f 2e       	mov	r0, r31
     cb0:	fb e8       	ldi	r31, 0x8B	; 139
     cb2:	af 2e       	mov	r10, r31
     cb4:	f1 e0       	ldi	r31, 0x01	; 1
     cb6:	bf 2e       	mov	r11, r31
     cb8:	f0 2d       	mov	r31, r0
     cba:	0f 2e       	mov	r0, r31
     cbc:	fe ea       	ldi	r31, 0xAE	; 174
     cbe:	cf 2e       	mov	r12, r31
     cc0:	f1 e0       	ldi	r31, 0x01	; 1
     cc2:	df 2e       	mov	r13, r31
     cc4:	f0 2d       	mov	r31, r0
     cc6:	e1 2c       	mov	r14, r1
     cc8:	00 e0       	ldi	r16, 0x00	; 0
     cca:	23 e0       	ldi	r18, 0x03	; 3
     ccc:	40 e0       	ldi	r20, 0x00	; 0
     cce:	52 ec       	ldi	r21, 0xC2	; 194
     cd0:	61 e0       	ldi	r22, 0x01	; 1
     cd2:	70 e0       	ldi	r23, 0x00	; 0
     cd4:	80 e0       	ldi	r24, 0x00	; 0
     cd6:	0e 94 fb 08 	call	0x11f6	; 0x11f6 <serial_new_instance>
     cda:	90 93 d6 01 	sts	0x01D6, r25	; 0x8001d6 <_com_serial_instance+0x1>
     cde:	80 93 d5 01 	sts	0x01D5, r24	; 0x8001d5 <_com_serial_instance>
     ce2:	88 b1       	in	r24, 0x08	; 8
     ce4:	83 6c       	ori	r24, 0xC3	; 195
     ce6:	88 b9       	out	0x08, r24	; 8
     ce8:	5b 9a       	sbi	0x0b, 3	; 11
     cea:	8a b1       	in	r24, 0x0a	; 10
     cec:	84 67       	ori	r24, 0x74	; 116
     cee:	8a b9       	out	0x0a, r24	; 10
     cf0:	5e 9a       	sbi	0x0b, 6	; 11
     cf2:	81 b1       	in	r24, 0x01	; 1
     cf4:	8f ef       	ldi	r24, 0xFF	; 255
     cf6:	81 b9       	out	0x01, r24	; 1
     cf8:	84 b1       	in	r24, 0x04	; 4
     cfa:	83 60       	ori	r24, 0x03	; 3
     cfc:	84 b9       	out	0x04, r24	; 4
     cfe:	84 b1       	in	r24, 0x04	; 4
     d00:	8c 63       	ori	r24, 0x3C	; 60
     d02:	84 b9       	out	0x04, r24	; 4
     d04:	0f 91       	pop	r16
     d06:	ef 90       	pop	r14
     d08:	df 90       	pop	r13
     d0a:	cf 90       	pop	r12
     d0c:	bf 90       	pop	r11
     d0e:	af 90       	pop	r10
     d10:	9f 90       	pop	r9
     d12:	8f 90       	pop	r8
     d14:	08 95       	ret

00000d16 <switch_in>:
     d16:	95 b1       	in	r25, 0x05	; 5
     d18:	93 7c       	andi	r25, 0xC3	; 195
     d1a:	95 b9       	out	0x05, r25	; 5
     d1c:	25 b1       	in	r18, 0x05	; 5
     d1e:	34 e0       	ldi	r19, 0x04	; 4
     d20:	83 9f       	mul	r24, r19
     d22:	c0 01       	movw	r24, r0
     d24:	11 24       	eor	r1, r1
     d26:	82 2b       	or	r24, r18
     d28:	85 b9       	out	0x05, r24	; 5
     d2a:	08 95       	ret

00000d2c <switch_out>:
     d2c:	85 b1       	in	r24, 0x05	; 5
     d2e:	83 7c       	andi	r24, 0xC3	; 195
     d30:	85 b9       	out	0x05, r24	; 5
     d32:	08 95       	ret

00000d34 <buffer_init>:
     d34:	fc 01       	movw	r30, r24
     d36:	10 a2       	std	Z+32, r1	; 0x20
     d38:	11 a2       	std	Z+33, r1	; 0x21
     d3a:	12 a2       	std	Z+34, r1	; 0x22
     d3c:	08 95       	ret

00000d3e <buffer_get_item>:
     d3e:	fc 01       	movw	r30, r24
     d40:	82 a1       	ldd	r24, Z+34	; 0x22
     d42:	88 23       	and	r24, r24
     d44:	d9 f0       	breq	.+54     	; 0xd7c <buffer_get_item+0x3e>
     d46:	81 a1       	ldd	r24, Z+33	; 0x21
     d48:	df 01       	movw	r26, r30
     d4a:	a8 0f       	add	r26, r24
     d4c:	b1 1d       	adc	r27, r1
     d4e:	8c 91       	ld	r24, X
     d50:	db 01       	movw	r26, r22
     d52:	8c 93       	st	X, r24
     d54:	21 a1       	ldd	r18, Z+33	; 0x21
     d56:	30 e0       	ldi	r19, 0x00	; 0
     d58:	2f 5f       	subi	r18, 0xFF	; 255
     d5a:	3f 4f       	sbci	r19, 0xFF	; 255
     d5c:	2f 71       	andi	r18, 0x1F	; 31
     d5e:	30 78       	andi	r19, 0x80	; 128
     d60:	33 23       	and	r19, r19
     d62:	34 f4       	brge	.+12     	; 0xd70 <buffer_get_item+0x32>
     d64:	21 50       	subi	r18, 0x01	; 1
     d66:	31 09       	sbc	r19, r1
     d68:	20 6e       	ori	r18, 0xE0	; 224
     d6a:	3f 6f       	ori	r19, 0xFF	; 255
     d6c:	2f 5f       	subi	r18, 0xFF	; 255
     d6e:	3f 4f       	sbci	r19, 0xFF	; 255
     d70:	21 a3       	std	Z+33, r18	; 0x21
     d72:	82 a1       	ldd	r24, Z+34	; 0x22
     d74:	81 50       	subi	r24, 0x01	; 1
     d76:	82 a3       	std	Z+34, r24	; 0x22
     d78:	80 e0       	ldi	r24, 0x00	; 0
     d7a:	08 95       	ret
     d7c:	81 e0       	ldi	r24, 0x01	; 1
     d7e:	08 95       	ret

00000d80 <buffer_put_item>:
     d80:	fc 01       	movw	r30, r24
     d82:	42 a1       	ldd	r20, Z+34	; 0x22
     d84:	40 32       	cpi	r20, 0x20	; 32
     d86:	b8 f4       	brcc	.+46     	; 0xdb6 <buffer_put_item+0x36>
     d88:	20 a1       	ldd	r18, Z+32	; 0x20
     d8a:	30 e0       	ldi	r19, 0x00	; 0
     d8c:	e2 0f       	add	r30, r18
     d8e:	f3 1f       	adc	r31, r19
     d90:	60 83       	st	Z, r22
     d92:	2f 5f       	subi	r18, 0xFF	; 255
     d94:	3f 4f       	sbci	r19, 0xFF	; 255
     d96:	2f 71       	andi	r18, 0x1F	; 31
     d98:	30 78       	andi	r19, 0x80	; 128
     d9a:	33 23       	and	r19, r19
     d9c:	34 f4       	brge	.+12     	; 0xdaa <buffer_put_item+0x2a>
     d9e:	21 50       	subi	r18, 0x01	; 1
     da0:	31 09       	sbc	r19, r1
     da2:	20 6e       	ori	r18, 0xE0	; 224
     da4:	3f 6f       	ori	r19, 0xFF	; 255
     da6:	2f 5f       	subi	r18, 0xFF	; 255
     da8:	3f 4f       	sbci	r19, 0xFF	; 255
     daa:	fc 01       	movw	r30, r24
     dac:	20 a3       	std	Z+32, r18	; 0x20
     dae:	4f 5f       	subi	r20, 0xFF	; 255
     db0:	42 a3       	std	Z+34, r20	; 0x22
     db2:	80 e0       	ldi	r24, 0x00	; 0
     db4:	08 95       	ret
     db6:	82 e0       	ldi	r24, 0x02	; 2
     db8:	08 95       	ret

00000dba <vListInitialise>:
     dba:	fc 01       	movw	r30, r24
     dbc:	03 96       	adiw	r24, 0x03	; 3
     dbe:	92 83       	std	Z+2, r25	; 0x02
     dc0:	81 83       	std	Z+1, r24	; 0x01
     dc2:	2f ef       	ldi	r18, 0xFF	; 255
     dc4:	3f ef       	ldi	r19, 0xFF	; 255
     dc6:	34 83       	std	Z+4, r19	; 0x04
     dc8:	23 83       	std	Z+3, r18	; 0x03
     dca:	96 83       	std	Z+6, r25	; 0x06
     dcc:	85 83       	std	Z+5, r24	; 0x05
     dce:	90 87       	std	Z+8, r25	; 0x08
     dd0:	87 83       	std	Z+7, r24	; 0x07
     dd2:	10 82       	st	Z, r1
     dd4:	08 95       	ret

00000dd6 <vListInitialiseItem>:
     dd6:	fc 01       	movw	r30, r24
     dd8:	11 86       	std	Z+9, r1	; 0x09
     dda:	10 86       	std	Z+8, r1	; 0x08
     ddc:	08 95       	ret

00000dde <vListInsertEnd>:
     dde:	cf 93       	push	r28
     de0:	df 93       	push	r29
     de2:	9c 01       	movw	r18, r24
     de4:	fb 01       	movw	r30, r22
     de6:	dc 01       	movw	r26, r24
     de8:	11 96       	adiw	r26, 0x01	; 1
     dea:	cd 91       	ld	r28, X+
     dec:	dc 91       	ld	r29, X
     dee:	12 97       	sbiw	r26, 0x02	; 2
     df0:	d3 83       	std	Z+3, r29	; 0x03
     df2:	c2 83       	std	Z+2, r28	; 0x02
     df4:	8c 81       	ldd	r24, Y+4	; 0x04
     df6:	9d 81       	ldd	r25, Y+5	; 0x05
     df8:	95 83       	std	Z+5, r25	; 0x05
     dfa:	84 83       	std	Z+4, r24	; 0x04
     dfc:	8c 81       	ldd	r24, Y+4	; 0x04
     dfe:	9d 81       	ldd	r25, Y+5	; 0x05
     e00:	dc 01       	movw	r26, r24
     e02:	13 96       	adiw	r26, 0x03	; 3
     e04:	7c 93       	st	X, r23
     e06:	6e 93       	st	-X, r22
     e08:	12 97       	sbiw	r26, 0x02	; 2
     e0a:	7d 83       	std	Y+5, r23	; 0x05
     e0c:	6c 83       	std	Y+4, r22	; 0x04
     e0e:	31 87       	std	Z+9, r19	; 0x09
     e10:	20 87       	std	Z+8, r18	; 0x08
     e12:	f9 01       	movw	r30, r18
     e14:	80 81       	ld	r24, Z
     e16:	8f 5f       	subi	r24, 0xFF	; 255
     e18:	80 83       	st	Z, r24
     e1a:	df 91       	pop	r29
     e1c:	cf 91       	pop	r28
     e1e:	08 95       	ret

00000e20 <vListInsert>:
     e20:	cf 93       	push	r28
     e22:	df 93       	push	r29
     e24:	eb 01       	movw	r28, r22
     e26:	48 81       	ld	r20, Y
     e28:	59 81       	ldd	r21, Y+1	; 0x01
     e2a:	4f 3f       	cpi	r20, 0xFF	; 255
     e2c:	2f ef       	ldi	r18, 0xFF	; 255
     e2e:	52 07       	cpc	r21, r18
     e30:	21 f4       	brne	.+8      	; 0xe3a <vListInsert+0x1a>
     e32:	fc 01       	movw	r30, r24
     e34:	a7 81       	ldd	r26, Z+7	; 0x07
     e36:	b0 85       	ldd	r27, Z+8	; 0x08
     e38:	0d c0       	rjmp	.+26     	; 0xe54 <vListInsert+0x34>
     e3a:	dc 01       	movw	r26, r24
     e3c:	13 96       	adiw	r26, 0x03	; 3
     e3e:	01 c0       	rjmp	.+2      	; 0xe42 <vListInsert+0x22>
     e40:	df 01       	movw	r26, r30
     e42:	12 96       	adiw	r26, 0x02	; 2
     e44:	ed 91       	ld	r30, X+
     e46:	fc 91       	ld	r31, X
     e48:	13 97       	sbiw	r26, 0x03	; 3
     e4a:	20 81       	ld	r18, Z
     e4c:	31 81       	ldd	r19, Z+1	; 0x01
     e4e:	42 17       	cp	r20, r18
     e50:	53 07       	cpc	r21, r19
     e52:	b0 f7       	brcc	.-20     	; 0xe40 <vListInsert+0x20>
     e54:	12 96       	adiw	r26, 0x02	; 2
     e56:	ed 91       	ld	r30, X+
     e58:	fc 91       	ld	r31, X
     e5a:	13 97       	sbiw	r26, 0x03	; 3
     e5c:	fb 83       	std	Y+3, r31	; 0x03
     e5e:	ea 83       	std	Y+2, r30	; 0x02
     e60:	d5 83       	std	Z+5, r29	; 0x05
     e62:	c4 83       	std	Z+4, r28	; 0x04
     e64:	bd 83       	std	Y+5, r27	; 0x05
     e66:	ac 83       	std	Y+4, r26	; 0x04
     e68:	13 96       	adiw	r26, 0x03	; 3
     e6a:	dc 93       	st	X, r29
     e6c:	ce 93       	st	-X, r28
     e6e:	12 97       	sbiw	r26, 0x02	; 2
     e70:	99 87       	std	Y+9, r25	; 0x09
     e72:	88 87       	std	Y+8, r24	; 0x08
     e74:	fc 01       	movw	r30, r24
     e76:	20 81       	ld	r18, Z
     e78:	2f 5f       	subi	r18, 0xFF	; 255
     e7a:	20 83       	st	Z, r18
     e7c:	df 91       	pop	r29
     e7e:	cf 91       	pop	r28
     e80:	08 95       	ret

00000e82 <uxListRemove>:
     e82:	cf 93       	push	r28
     e84:	df 93       	push	r29
     e86:	fc 01       	movw	r30, r24
     e88:	a0 85       	ldd	r26, Z+8	; 0x08
     e8a:	b1 85       	ldd	r27, Z+9	; 0x09
     e8c:	c2 81       	ldd	r28, Z+2	; 0x02
     e8e:	d3 81       	ldd	r29, Z+3	; 0x03
     e90:	84 81       	ldd	r24, Z+4	; 0x04
     e92:	95 81       	ldd	r25, Z+5	; 0x05
     e94:	9d 83       	std	Y+5, r25	; 0x05
     e96:	8c 83       	std	Y+4, r24	; 0x04
     e98:	c4 81       	ldd	r28, Z+4	; 0x04
     e9a:	d5 81       	ldd	r29, Z+5	; 0x05
     e9c:	82 81       	ldd	r24, Z+2	; 0x02
     e9e:	93 81       	ldd	r25, Z+3	; 0x03
     ea0:	9b 83       	std	Y+3, r25	; 0x03
     ea2:	8a 83       	std	Y+2, r24	; 0x02
     ea4:	11 96       	adiw	r26, 0x01	; 1
     ea6:	8d 91       	ld	r24, X+
     ea8:	9c 91       	ld	r25, X
     eaa:	12 97       	sbiw	r26, 0x02	; 2
     eac:	e8 17       	cp	r30, r24
     eae:	f9 07       	cpc	r31, r25
     eb0:	31 f4       	brne	.+12     	; 0xebe <uxListRemove+0x3c>
     eb2:	84 81       	ldd	r24, Z+4	; 0x04
     eb4:	95 81       	ldd	r25, Z+5	; 0x05
     eb6:	12 96       	adiw	r26, 0x02	; 2
     eb8:	9c 93       	st	X, r25
     eba:	8e 93       	st	-X, r24
     ebc:	11 97       	sbiw	r26, 0x01	; 1
     ebe:	11 86       	std	Z+9, r1	; 0x09
     ec0:	10 86       	std	Z+8, r1	; 0x08
     ec2:	8c 91       	ld	r24, X
     ec4:	81 50       	subi	r24, 0x01	; 1
     ec6:	8c 93       	st	X, r24
     ec8:	df 91       	pop	r29
     eca:	cf 91       	pop	r28
     ecc:	08 95       	ret

00000ece <pxPortInitialiseStack>:
     ece:	31 e1       	ldi	r19, 0x11	; 17
     ed0:	fc 01       	movw	r30, r24
     ed2:	30 83       	st	Z, r19
     ed4:	31 97       	sbiw	r30, 0x01	; 1
     ed6:	22 e2       	ldi	r18, 0x22	; 34
     ed8:	20 83       	st	Z, r18
     eda:	31 97       	sbiw	r30, 0x01	; 1
     edc:	a3 e3       	ldi	r26, 0x33	; 51
     ede:	a0 83       	st	Z, r26
     ee0:	31 97       	sbiw	r30, 0x01	; 1
     ee2:	60 83       	st	Z, r22
     ee4:	31 97       	sbiw	r30, 0x01	; 1
     ee6:	70 83       	st	Z, r23
     ee8:	31 97       	sbiw	r30, 0x01	; 1
     eea:	10 82       	st	Z, r1
     eec:	31 97       	sbiw	r30, 0x01	; 1
     eee:	60 e8       	ldi	r22, 0x80	; 128
     ef0:	60 83       	st	Z, r22
     ef2:	31 97       	sbiw	r30, 0x01	; 1
     ef4:	10 82       	st	Z, r1
     ef6:	31 97       	sbiw	r30, 0x01	; 1
     ef8:	62 e0       	ldi	r22, 0x02	; 2
     efa:	60 83       	st	Z, r22
     efc:	31 97       	sbiw	r30, 0x01	; 1
     efe:	63 e0       	ldi	r22, 0x03	; 3
     f00:	60 83       	st	Z, r22
     f02:	31 97       	sbiw	r30, 0x01	; 1
     f04:	64 e0       	ldi	r22, 0x04	; 4
     f06:	60 83       	st	Z, r22
     f08:	31 97       	sbiw	r30, 0x01	; 1
     f0a:	65 e0       	ldi	r22, 0x05	; 5
     f0c:	60 83       	st	Z, r22
     f0e:	31 97       	sbiw	r30, 0x01	; 1
     f10:	66 e0       	ldi	r22, 0x06	; 6
     f12:	60 83       	st	Z, r22
     f14:	31 97       	sbiw	r30, 0x01	; 1
     f16:	67 e0       	ldi	r22, 0x07	; 7
     f18:	60 83       	st	Z, r22
     f1a:	31 97       	sbiw	r30, 0x01	; 1
     f1c:	68 e0       	ldi	r22, 0x08	; 8
     f1e:	60 83       	st	Z, r22
     f20:	31 97       	sbiw	r30, 0x01	; 1
     f22:	69 e0       	ldi	r22, 0x09	; 9
     f24:	60 83       	st	Z, r22
     f26:	31 97       	sbiw	r30, 0x01	; 1
     f28:	60 e1       	ldi	r22, 0x10	; 16
     f2a:	60 83       	st	Z, r22
     f2c:	31 97       	sbiw	r30, 0x01	; 1
     f2e:	30 83       	st	Z, r19
     f30:	31 97       	sbiw	r30, 0x01	; 1
     f32:	32 e1       	ldi	r19, 0x12	; 18
     f34:	30 83       	st	Z, r19
     f36:	31 97       	sbiw	r30, 0x01	; 1
     f38:	33 e1       	ldi	r19, 0x13	; 19
     f3a:	30 83       	st	Z, r19
     f3c:	31 97       	sbiw	r30, 0x01	; 1
     f3e:	34 e1       	ldi	r19, 0x14	; 20
     f40:	30 83       	st	Z, r19
     f42:	31 97       	sbiw	r30, 0x01	; 1
     f44:	35 e1       	ldi	r19, 0x15	; 21
     f46:	30 83       	st	Z, r19
     f48:	31 97       	sbiw	r30, 0x01	; 1
     f4a:	36 e1       	ldi	r19, 0x16	; 22
     f4c:	30 83       	st	Z, r19
     f4e:	31 97       	sbiw	r30, 0x01	; 1
     f50:	37 e1       	ldi	r19, 0x17	; 23
     f52:	30 83       	st	Z, r19
     f54:	31 97       	sbiw	r30, 0x01	; 1
     f56:	38 e1       	ldi	r19, 0x18	; 24
     f58:	30 83       	st	Z, r19
     f5a:	31 97       	sbiw	r30, 0x01	; 1
     f5c:	39 e1       	ldi	r19, 0x19	; 25
     f5e:	30 83       	st	Z, r19
     f60:	31 97       	sbiw	r30, 0x01	; 1
     f62:	30 e2       	ldi	r19, 0x20	; 32
     f64:	30 83       	st	Z, r19
     f66:	31 97       	sbiw	r30, 0x01	; 1
     f68:	31 e2       	ldi	r19, 0x21	; 33
     f6a:	30 83       	st	Z, r19
     f6c:	31 97       	sbiw	r30, 0x01	; 1
     f6e:	20 83       	st	Z, r18
     f70:	31 97       	sbiw	r30, 0x01	; 1
     f72:	23 e2       	ldi	r18, 0x23	; 35
     f74:	20 83       	st	Z, r18
     f76:	31 97       	sbiw	r30, 0x01	; 1
     f78:	40 83       	st	Z, r20
     f7a:	31 97       	sbiw	r30, 0x01	; 1
     f7c:	50 83       	st	Z, r21
     f7e:	31 97       	sbiw	r30, 0x01	; 1
     f80:	26 e2       	ldi	r18, 0x26	; 38
     f82:	20 83       	st	Z, r18
     f84:	31 97       	sbiw	r30, 0x01	; 1
     f86:	27 e2       	ldi	r18, 0x27	; 39
     f88:	20 83       	st	Z, r18
     f8a:	31 97       	sbiw	r30, 0x01	; 1
     f8c:	28 e2       	ldi	r18, 0x28	; 40
     f8e:	20 83       	st	Z, r18
     f90:	31 97       	sbiw	r30, 0x01	; 1
     f92:	29 e2       	ldi	r18, 0x29	; 41
     f94:	20 83       	st	Z, r18
     f96:	31 97       	sbiw	r30, 0x01	; 1
     f98:	20 e3       	ldi	r18, 0x30	; 48
     f9a:	20 83       	st	Z, r18
     f9c:	31 97       	sbiw	r30, 0x01	; 1
     f9e:	21 e3       	ldi	r18, 0x31	; 49
     fa0:	20 83       	st	Z, r18
     fa2:	86 97       	sbiw	r24, 0x26	; 38
     fa4:	08 95       	ret

00000fa6 <xPortStartScheduler>:
     fa6:	10 92 89 00 	sts	0x0089, r1	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
     faa:	85 ee       	ldi	r24, 0xE5	; 229
     fac:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
     fb0:	8b e0       	ldi	r24, 0x0B	; 11
     fb2:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
     fb6:	ef e6       	ldi	r30, 0x6F	; 111
     fb8:	f0 e0       	ldi	r31, 0x00	; 0
     fba:	80 81       	ld	r24, Z
     fbc:	82 60       	ori	r24, 0x02	; 2
     fbe:	80 83       	st	Z, r24
     fc0:	a0 91 22 06 	lds	r26, 0x0622	; 0x800622 <pxCurrentTCB>
     fc4:	b0 91 23 06 	lds	r27, 0x0623	; 0x800623 <pxCurrentTCB+0x1>
     fc8:	cd 91       	ld	r28, X+
     fca:	cd bf       	out	0x3d, r28	; 61
     fcc:	dd 91       	ld	r29, X+
     fce:	de bf       	out	0x3e, r29	; 62
     fd0:	ff 91       	pop	r31
     fd2:	ef 91       	pop	r30
     fd4:	df 91       	pop	r29
     fd6:	cf 91       	pop	r28
     fd8:	bf 91       	pop	r27
     fda:	af 91       	pop	r26
     fdc:	9f 91       	pop	r25
     fde:	8f 91       	pop	r24
     fe0:	7f 91       	pop	r23
     fe2:	6f 91       	pop	r22
     fe4:	5f 91       	pop	r21
     fe6:	4f 91       	pop	r20
     fe8:	3f 91       	pop	r19
     fea:	2f 91       	pop	r18
     fec:	1f 91       	pop	r17
     fee:	0f 91       	pop	r16
     ff0:	ff 90       	pop	r15
     ff2:	ef 90       	pop	r14
     ff4:	df 90       	pop	r13
     ff6:	cf 90       	pop	r12
     ff8:	bf 90       	pop	r11
     ffa:	af 90       	pop	r10
     ffc:	9f 90       	pop	r9
     ffe:	8f 90       	pop	r8
    1000:	7f 90       	pop	r7
    1002:	6f 90       	pop	r6
    1004:	5f 90       	pop	r5
    1006:	4f 90       	pop	r4
    1008:	3f 90       	pop	r3
    100a:	2f 90       	pop	r2
    100c:	1f 90       	pop	r1
    100e:	0f 90       	pop	r0
    1010:	0f be       	out	0x3f, r0	; 63
    1012:	0f 90       	pop	r0
    1014:	08 95       	ret
    1016:	81 e0       	ldi	r24, 0x01	; 1
    1018:	08 95       	ret

0000101a <vPortYield>:
    101a:	0f 92       	push	r0
    101c:	0f b6       	in	r0, 0x3f	; 63
    101e:	f8 94       	cli
    1020:	0f 92       	push	r0
    1022:	1f 92       	push	r1
    1024:	11 24       	eor	r1, r1
    1026:	2f 92       	push	r2
    1028:	3f 92       	push	r3
    102a:	4f 92       	push	r4
    102c:	5f 92       	push	r5
    102e:	6f 92       	push	r6
    1030:	7f 92       	push	r7
    1032:	8f 92       	push	r8
    1034:	9f 92       	push	r9
    1036:	af 92       	push	r10
    1038:	bf 92       	push	r11
    103a:	cf 92       	push	r12
    103c:	df 92       	push	r13
    103e:	ef 92       	push	r14
    1040:	ff 92       	push	r15
    1042:	0f 93       	push	r16
    1044:	1f 93       	push	r17
    1046:	2f 93       	push	r18
    1048:	3f 93       	push	r19
    104a:	4f 93       	push	r20
    104c:	5f 93       	push	r21
    104e:	6f 93       	push	r22
    1050:	7f 93       	push	r23
    1052:	8f 93       	push	r24
    1054:	9f 93       	push	r25
    1056:	af 93       	push	r26
    1058:	bf 93       	push	r27
    105a:	cf 93       	push	r28
    105c:	df 93       	push	r29
    105e:	ef 93       	push	r30
    1060:	ff 93       	push	r31
    1062:	a0 91 22 06 	lds	r26, 0x0622	; 0x800622 <pxCurrentTCB>
    1066:	b0 91 23 06 	lds	r27, 0x0623	; 0x800623 <pxCurrentTCB+0x1>
    106a:	0d b6       	in	r0, 0x3d	; 61
    106c:	0d 92       	st	X+, r0
    106e:	0e b6       	in	r0, 0x3e	; 62
    1070:	0d 92       	st	X+, r0
    1072:	0e 94 fd 10 	call	0x21fa	; 0x21fa <vTaskSwitchContext>
    1076:	a0 91 22 06 	lds	r26, 0x0622	; 0x800622 <pxCurrentTCB>
    107a:	b0 91 23 06 	lds	r27, 0x0623	; 0x800623 <pxCurrentTCB+0x1>
    107e:	cd 91       	ld	r28, X+
    1080:	cd bf       	out	0x3d, r28	; 61
    1082:	dd 91       	ld	r29, X+
    1084:	de bf       	out	0x3e, r29	; 62
    1086:	ff 91       	pop	r31
    1088:	ef 91       	pop	r30
    108a:	df 91       	pop	r29
    108c:	cf 91       	pop	r28
    108e:	bf 91       	pop	r27
    1090:	af 91       	pop	r26
    1092:	9f 91       	pop	r25
    1094:	8f 91       	pop	r24
    1096:	7f 91       	pop	r23
    1098:	6f 91       	pop	r22
    109a:	5f 91       	pop	r21
    109c:	4f 91       	pop	r20
    109e:	3f 91       	pop	r19
    10a0:	2f 91       	pop	r18
    10a2:	1f 91       	pop	r17
    10a4:	0f 91       	pop	r16
    10a6:	ff 90       	pop	r15
    10a8:	ef 90       	pop	r14
    10aa:	df 90       	pop	r13
    10ac:	cf 90       	pop	r12
    10ae:	bf 90       	pop	r11
    10b0:	af 90       	pop	r10
    10b2:	9f 90       	pop	r9
    10b4:	8f 90       	pop	r8
    10b6:	7f 90       	pop	r7
    10b8:	6f 90       	pop	r6
    10ba:	5f 90       	pop	r5
    10bc:	4f 90       	pop	r4
    10be:	3f 90       	pop	r3
    10c0:	2f 90       	pop	r2
    10c2:	1f 90       	pop	r1
    10c4:	0f 90       	pop	r0
    10c6:	0f be       	out	0x3f, r0	; 63
    10c8:	0f 90       	pop	r0
    10ca:	08 95       	ret

000010cc <vPortYieldFromTick>:
    10cc:	0f 92       	push	r0
    10ce:	0f b6       	in	r0, 0x3f	; 63
    10d0:	f8 94       	cli
    10d2:	0f 92       	push	r0
    10d4:	1f 92       	push	r1
    10d6:	11 24       	eor	r1, r1
    10d8:	2f 92       	push	r2
    10da:	3f 92       	push	r3
    10dc:	4f 92       	push	r4
    10de:	5f 92       	push	r5
    10e0:	6f 92       	push	r6
    10e2:	7f 92       	push	r7
    10e4:	8f 92       	push	r8
    10e6:	9f 92       	push	r9
    10e8:	af 92       	push	r10
    10ea:	bf 92       	push	r11
    10ec:	cf 92       	push	r12
    10ee:	df 92       	push	r13
    10f0:	ef 92       	push	r14
    10f2:	ff 92       	push	r15
    10f4:	0f 93       	push	r16
    10f6:	1f 93       	push	r17
    10f8:	2f 93       	push	r18
    10fa:	3f 93       	push	r19
    10fc:	4f 93       	push	r20
    10fe:	5f 93       	push	r21
    1100:	6f 93       	push	r22
    1102:	7f 93       	push	r23
    1104:	8f 93       	push	r24
    1106:	9f 93       	push	r25
    1108:	af 93       	push	r26
    110a:	bf 93       	push	r27
    110c:	cf 93       	push	r28
    110e:	df 93       	push	r29
    1110:	ef 93       	push	r30
    1112:	ff 93       	push	r31
    1114:	a0 91 22 06 	lds	r26, 0x0622	; 0x800622 <pxCurrentTCB>
    1118:	b0 91 23 06 	lds	r27, 0x0623	; 0x800623 <pxCurrentTCB+0x1>
    111c:	0d b6       	in	r0, 0x3d	; 61
    111e:	0d 92       	st	X+, r0
    1120:	0e b6       	in	r0, 0x3e	; 62
    1122:	0d 92       	st	X+, r0
    1124:	0e 94 61 0f 	call	0x1ec2	; 0x1ec2 <xTaskIncrementTick>
    1128:	81 11       	cpse	r24, r1
    112a:	0e 94 fd 10 	call	0x21fa	; 0x21fa <vTaskSwitchContext>
    112e:	a0 91 22 06 	lds	r26, 0x0622	; 0x800622 <pxCurrentTCB>
    1132:	b0 91 23 06 	lds	r27, 0x0623	; 0x800623 <pxCurrentTCB+0x1>
    1136:	cd 91       	ld	r28, X+
    1138:	cd bf       	out	0x3d, r28	; 61
    113a:	dd 91       	ld	r29, X+
    113c:	de bf       	out	0x3e, r29	; 62
    113e:	ff 91       	pop	r31
    1140:	ef 91       	pop	r30
    1142:	df 91       	pop	r29
    1144:	cf 91       	pop	r28
    1146:	bf 91       	pop	r27
    1148:	af 91       	pop	r26
    114a:	9f 91       	pop	r25
    114c:	8f 91       	pop	r24
    114e:	7f 91       	pop	r23
    1150:	6f 91       	pop	r22
    1152:	5f 91       	pop	r21
    1154:	4f 91       	pop	r20
    1156:	3f 91       	pop	r19
    1158:	2f 91       	pop	r18
    115a:	1f 91       	pop	r17
    115c:	0f 91       	pop	r16
    115e:	ff 90       	pop	r15
    1160:	ef 90       	pop	r14
    1162:	df 90       	pop	r13
    1164:	cf 90       	pop	r12
    1166:	bf 90       	pop	r11
    1168:	af 90       	pop	r10
    116a:	9f 90       	pop	r9
    116c:	8f 90       	pop	r8
    116e:	7f 90       	pop	r7
    1170:	6f 90       	pop	r6
    1172:	5f 90       	pop	r5
    1174:	4f 90       	pop	r4
    1176:	3f 90       	pop	r3
    1178:	2f 90       	pop	r2
    117a:	1f 90       	pop	r1
    117c:	0f 90       	pop	r0
    117e:	0f be       	out	0x3f, r0	; 63
    1180:	0f 90       	pop	r0
    1182:	08 95       	ret

00001184 <__vector_13>:
    1184:	0e 94 66 08 	call	0x10cc	; 0x10cc <vPortYieldFromTick>
    1188:	18 95       	reti

0000118a <pvPortMalloc>:
    118a:	cf 93       	push	r28
    118c:	df 93       	push	r29
    118e:	ec 01       	movw	r28, r24
    1190:	0e 94 5b 0f 	call	0x1eb6	; 0x1eb6 <vTaskSuspendAll>
    1194:	80 91 d7 01 	lds	r24, 0x01D7	; 0x8001d7 <pucAlignedHeap.2084>
    1198:	90 91 d8 01 	lds	r25, 0x01D8	; 0x8001d8 <pucAlignedHeap.2084+0x1>
    119c:	89 2b       	or	r24, r25
    119e:	31 f4       	brne	.+12     	; 0x11ac <pvPortMalloc+0x22>
    11a0:	8c ed       	ldi	r24, 0xDC	; 220
    11a2:	91 e0       	ldi	r25, 0x01	; 1
    11a4:	90 93 d8 01 	sts	0x01D8, r25	; 0x8001d8 <pucAlignedHeap.2084+0x1>
    11a8:	80 93 d7 01 	sts	0x01D7, r24	; 0x8001d7 <pucAlignedHeap.2084>
    11ac:	20 91 d9 01 	lds	r18, 0x01D9	; 0x8001d9 <xNextFreeByte>
    11b0:	30 91 da 01 	lds	r19, 0x01DA	; 0x8001da <xNextFreeByte+0x1>
    11b4:	c9 01       	movw	r24, r18
    11b6:	8c 0f       	add	r24, r28
    11b8:	9d 1f       	adc	r25, r29
    11ba:	87 3e       	cpi	r24, 0xE7	; 231
    11bc:	43 e0       	ldi	r20, 0x03	; 3
    11be:	94 07       	cpc	r25, r20
    11c0:	70 f4       	brcc	.+28     	; 0x11de <pvPortMalloc+0x54>
    11c2:	28 17       	cp	r18, r24
    11c4:	39 07       	cpc	r19, r25
    11c6:	70 f4       	brcc	.+28     	; 0x11e4 <pvPortMalloc+0x5a>
    11c8:	c0 91 d7 01 	lds	r28, 0x01D7	; 0x8001d7 <pucAlignedHeap.2084>
    11cc:	d0 91 d8 01 	lds	r29, 0x01D8	; 0x8001d8 <pucAlignedHeap.2084+0x1>
    11d0:	c2 0f       	add	r28, r18
    11d2:	d3 1f       	adc	r29, r19
    11d4:	90 93 da 01 	sts	0x01DA, r25	; 0x8001da <xNextFreeByte+0x1>
    11d8:	80 93 d9 01 	sts	0x01D9, r24	; 0x8001d9 <xNextFreeByte>
    11dc:	05 c0       	rjmp	.+10     	; 0x11e8 <pvPortMalloc+0x5e>
    11de:	c0 e0       	ldi	r28, 0x00	; 0
    11e0:	d0 e0       	ldi	r29, 0x00	; 0
    11e2:	02 c0       	rjmp	.+4      	; 0x11e8 <pvPortMalloc+0x5e>
    11e4:	c0 e0       	ldi	r28, 0x00	; 0
    11e6:	d0 e0       	ldi	r29, 0x00	; 0
    11e8:	0e 94 1c 10 	call	0x2038	; 0x2038 <xTaskResumeAll>
    11ec:	ce 01       	movw	r24, r28
    11ee:	df 91       	pop	r29
    11f0:	cf 91       	pop	r28
    11f2:	08 95       	ret

000011f4 <vPortFree>:
    11f4:	08 95       	ret

000011f6 <serial_new_instance>:
    11f6:	4f 92       	push	r4
    11f8:	5f 92       	push	r5
    11fa:	6f 92       	push	r6
    11fc:	7f 92       	push	r7
    11fe:	8f 92       	push	r8
    1200:	9f 92       	push	r9
    1202:	af 92       	push	r10
    1204:	bf 92       	push	r11
    1206:	cf 92       	push	r12
    1208:	df 92       	push	r13
    120a:	ff 92       	push	r15
    120c:	0f 93       	push	r16
    120e:	1f 93       	push	r17
    1210:	cf 93       	push	r28
    1212:	df 93       	push	r29
    1214:	cd b7       	in	r28, 0x3d	; 61
    1216:	de b7       	in	r29, 0x3e	; 62
    1218:	f8 2e       	mov	r15, r24
    121a:	2a 01       	movw	r4, r20
    121c:	3b 01       	movw	r6, r22
    121e:	88 e0       	ldi	r24, 0x08	; 8
    1220:	90 e0       	ldi	r25, 0x00	; 0
    1222:	0e 94 0a 13 	call	0x2614	; 0x2614 <malloc>
    1226:	8c 01       	movw	r16, r24
    1228:	8f 2d       	mov	r24, r15
    122a:	90 e0       	ldi	r25, 0x00	; 0
    122c:	88 0f       	add	r24, r24
    122e:	99 1f       	adc	r25, r25
    1230:	fc 01       	movw	r30, r24
    1232:	ed 53       	subi	r30, 0x3D	; 61
    1234:	fa 4f       	sbci	r31, 0xFA	; 250
    1236:	11 83       	std	Z+1, r17	; 0x01
    1238:	00 83       	st	Z, r16
    123a:	fc 01       	movw	r30, r24
    123c:	e2 5f       	subi	r30, 0xF2	; 242
    123e:	fe 4f       	sbci	r31, 0xFE	; 254
    1240:	80 81       	ld	r24, Z
    1242:	91 81       	ldd	r25, Z+1	; 0x01
    1244:	d8 01       	movw	r26, r16
    1246:	11 96       	adiw	r26, 0x01	; 1
    1248:	9c 93       	st	X, r25
    124a:	8e 93       	st	-X, r24
    124c:	13 96       	adiw	r26, 0x03	; 3
    124e:	bc 92       	st	X, r11
    1250:	ae 92       	st	-X, r10
    1252:	12 97       	sbiw	r26, 0x02	; 2
    1254:	15 96       	adiw	r26, 0x05	; 5
    1256:	dc 92       	st	X, r13
    1258:	ce 92       	st	-X, r12
    125a:	14 97       	sbiw	r26, 0x04	; 4
    125c:	17 96       	adiw	r26, 0x07	; 7
    125e:	9c 92       	st	X, r9
    1260:	8e 92       	st	-X, r8
    1262:	16 97       	sbiw	r26, 0x06	; 6
    1264:	ff b6       	in	r15, 0x3f	; 63
    1266:	f8 94       	cli
    1268:	ed 91       	ld	r30, X+
    126a:	fc 91       	ld	r31, X
    126c:	11 97       	sbiw	r26, 0x01	; 1
    126e:	36 97       	sbiw	r30, 0x06	; 6
    1270:	80 81       	ld	r24, Z
    1272:	82 60       	ori	r24, 0x02	; 2
    1274:	80 83       	st	Z, r24
    1276:	cd 90       	ld	r12, X+
    1278:	dc 90       	ld	r13, X
    127a:	d3 01       	movw	r26, r6
    127c:	c2 01       	movw	r24, r4
    127e:	88 0f       	add	r24, r24
    1280:	99 1f       	adc	r25, r25
    1282:	aa 1f       	adc	r26, r26
    1284:	bb 1f       	adc	r27, r27
    1286:	88 0f       	add	r24, r24
    1288:	99 1f       	adc	r25, r25
    128a:	aa 1f       	adc	r26, r26
    128c:	bb 1f       	adc	r27, r27
    128e:	9c 01       	movw	r18, r24
    1290:	ad 01       	movw	r20, r26
    1292:	22 0f       	add	r18, r18
    1294:	33 1f       	adc	r19, r19
    1296:	44 1f       	adc	r20, r20
    1298:	55 1f       	adc	r21, r21
    129a:	60 e0       	ldi	r22, 0x00	; 0
    129c:	70 e0       	ldi	r23, 0x00	; 0
    129e:	81 ee       	ldi	r24, 0xE1	; 225
    12a0:	90 e0       	ldi	r25, 0x00	; 0
    12a2:	0e 94 d4 12 	call	0x25a8	; 0x25a8 <__udivmodsi4>
    12a6:	21 50       	subi	r18, 0x01	; 1
    12a8:	f6 01       	movw	r30, r12
    12aa:	32 97       	sbiw	r30, 0x02	; 2
    12ac:	20 83       	st	Z, r18
    12ae:	d8 01       	movw	r26, r16
    12b0:	ed 91       	ld	r30, X+
    12b2:	fc 91       	ld	r31, X
    12b4:	11 97       	sbiw	r26, 0x01	; 1
    12b6:	35 97       	sbiw	r30, 0x05	; 5
    12b8:	88 e9       	ldi	r24, 0x98	; 152
    12ba:	80 83       	st	Z, r24
    12bc:	ed 91       	ld	r30, X+
    12be:	fc 91       	ld	r31, X
    12c0:	34 97       	sbiw	r30, 0x04	; 4
    12c2:	86 e0       	ldi	r24, 0x06	; 6
    12c4:	80 83       	st	Z, r24
    12c6:	ff be       	out	0x3f, r15	; 63
    12c8:	c8 01       	movw	r24, r16
    12ca:	df 91       	pop	r29
    12cc:	cf 91       	pop	r28
    12ce:	1f 91       	pop	r17
    12d0:	0f 91       	pop	r16
    12d2:	ff 90       	pop	r15
    12d4:	df 90       	pop	r13
    12d6:	cf 90       	pop	r12
    12d8:	bf 90       	pop	r11
    12da:	af 90       	pop	r10
    12dc:	9f 90       	pop	r9
    12de:	8f 90       	pop	r8
    12e0:	7f 90       	pop	r7
    12e2:	6f 90       	pop	r6
    12e4:	5f 90       	pop	r5
    12e6:	4f 90       	pop	r4
    12e8:	08 95       	ret

000012ea <serial_send_bytes>:
    12ea:	ef 92       	push	r14
    12ec:	ff 92       	push	r15
    12ee:	0f 93       	push	r16
    12f0:	1f 93       	push	r17
    12f2:	cf 93       	push	r28
    12f4:	df 93       	push	r29
    12f6:	fc 01       	movw	r30, r24
    12f8:	a2 81       	ldd	r26, Z+2	; 0x02
    12fa:	b3 81       	ldd	r27, Z+3	; 0x03
    12fc:	10 97       	sbiw	r26, 0x00	; 0
    12fe:	79 f0       	breq	.+30     	; 0x131e <serial_send_bytes+0x34>
    1300:	e4 2f       	mov	r30, r20
    1302:	f0 e0       	ldi	r31, 0x00	; 0
    1304:	92 96       	adiw	r26, 0x22	; 34
    1306:	5c 91       	ld	r21, X
    1308:	20 e2       	ldi	r18, 0x20	; 32
    130a:	30 e0       	ldi	r19, 0x00	; 0
    130c:	25 1b       	sub	r18, r21
    130e:	31 09       	sbc	r19, r1
    1310:	2e 17       	cp	r18, r30
    1312:	3f 07       	cpc	r19, r31
    1314:	1c f1       	brlt	.+70     	; 0x135c <serial_send_bytes+0x72>
    1316:	7c 01       	movw	r14, r24
    1318:	41 11       	cpse	r20, r1
    131a:	04 c0       	rjmp	.+8      	; 0x1324 <serial_send_bytes+0x3a>
    131c:	16 c0       	rjmp	.+44     	; 0x134a <serial_send_bytes+0x60>
    131e:	42 30       	cpi	r20, 0x02	; 2
    1320:	f8 f4       	brcc	.+62     	; 0x1360 <serial_send_bytes+0x76>
    1322:	f9 cf       	rjmp	.-14     	; 0x1316 <serial_send_bytes+0x2c>
    1324:	eb 01       	movw	r28, r22
    1326:	41 50       	subi	r20, 0x01	; 1
    1328:	04 2f       	mov	r16, r20
    132a:	10 e0       	ldi	r17, 0x00	; 0
    132c:	0f 5f       	subi	r16, 0xFF	; 255
    132e:	1f 4f       	sbci	r17, 0xFF	; 255
    1330:	06 0f       	add	r16, r22
    1332:	17 1f       	adc	r17, r23
    1334:	69 91       	ld	r22, Y+
    1336:	d7 01       	movw	r26, r14
    1338:	12 96       	adiw	r26, 0x02	; 2
    133a:	8d 91       	ld	r24, X+
    133c:	9c 91       	ld	r25, X
    133e:	13 97       	sbiw	r26, 0x03	; 3
    1340:	0e 94 c0 06 	call	0xd80	; 0xd80 <buffer_put_item>
    1344:	c0 17       	cp	r28, r16
    1346:	d1 07       	cpc	r29, r17
    1348:	a9 f7       	brne	.-22     	; 0x1334 <serial_send_bytes+0x4a>
    134a:	d7 01       	movw	r26, r14
    134c:	ed 91       	ld	r30, X+
    134e:	fc 91       	ld	r31, X
    1350:	35 97       	sbiw	r30, 0x05	; 5
    1352:	80 81       	ld	r24, Z
    1354:	80 62       	ori	r24, 0x20	; 32
    1356:	80 83       	st	Z, r24
    1358:	80 e0       	ldi	r24, 0x00	; 0
    135a:	03 c0       	rjmp	.+6      	; 0x1362 <serial_send_bytes+0x78>
    135c:	82 e0       	ldi	r24, 0x02	; 2
    135e:	01 c0       	rjmp	.+2      	; 0x1362 <serial_send_bytes+0x78>
    1360:	82 e0       	ldi	r24, 0x02	; 2
    1362:	df 91       	pop	r29
    1364:	cf 91       	pop	r28
    1366:	1f 91       	pop	r17
    1368:	0f 91       	pop	r16
    136a:	ff 90       	pop	r15
    136c:	ef 90       	pop	r14
    136e:	08 95       	ret

00001370 <__vector_20>:
    1370:	1f 92       	push	r1
    1372:	0f 92       	push	r0
    1374:	0f b6       	in	r0, 0x3f	; 63
    1376:	0f 92       	push	r0
    1378:	11 24       	eor	r1, r1
    137a:	2f 93       	push	r18
    137c:	3f 93       	push	r19
    137e:	4f 93       	push	r20
    1380:	5f 93       	push	r21
    1382:	6f 93       	push	r22
    1384:	7f 93       	push	r23
    1386:	8f 93       	push	r24
    1388:	9f 93       	push	r25
    138a:	af 93       	push	r26
    138c:	bf 93       	push	r27
    138e:	cf 93       	push	r28
    1390:	ef 93       	push	r30
    1392:	ff 93       	push	r31
    1394:	e0 91 c3 05 	lds	r30, 0x05C3	; 0x8005c3 <_ser_handle>
    1398:	f0 91 c4 05 	lds	r31, 0x05C4	; 0x8005c4 <_ser_handle+0x1>
    139c:	30 97       	sbiw	r30, 0x00	; 0
    139e:	a1 f0       	breq	.+40     	; 0x13c8 <__vector_20+0x58>
    13a0:	c0 91 c6 00 	lds	r28, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
    13a4:	6c 2f       	mov	r22, r28
    13a6:	84 81       	ldd	r24, Z+4	; 0x04
    13a8:	95 81       	ldd	r25, Z+5	; 0x05
    13aa:	0e 94 c0 06 	call	0xd80	; 0xd80 <buffer_put_item>
    13ae:	80 91 c3 05 	lds	r24, 0x05C3	; 0x8005c3 <_ser_handle>
    13b2:	90 91 c4 05 	lds	r25, 0x05C4	; 0x8005c4 <_ser_handle+0x1>
    13b6:	dc 01       	movw	r26, r24
    13b8:	16 96       	adiw	r26, 0x06	; 6
    13ba:	ed 91       	ld	r30, X+
    13bc:	fc 91       	ld	r31, X
    13be:	17 97       	sbiw	r26, 0x07	; 7
    13c0:	30 97       	sbiw	r30, 0x00	; 0
    13c2:	11 f0       	breq	.+4      	; 0x13c8 <__vector_20+0x58>
    13c4:	6c 2f       	mov	r22, r28
    13c6:	09 95       	icall
    13c8:	ff 91       	pop	r31
    13ca:	ef 91       	pop	r30
    13cc:	cf 91       	pop	r28
    13ce:	bf 91       	pop	r27
    13d0:	af 91       	pop	r26
    13d2:	9f 91       	pop	r25
    13d4:	8f 91       	pop	r24
    13d6:	7f 91       	pop	r23
    13d8:	6f 91       	pop	r22
    13da:	5f 91       	pop	r21
    13dc:	4f 91       	pop	r20
    13de:	3f 91       	pop	r19
    13e0:	2f 91       	pop	r18
    13e2:	0f 90       	pop	r0
    13e4:	0f be       	out	0x3f, r0	; 63
    13e6:	0f 90       	pop	r0
    13e8:	1f 90       	pop	r1
    13ea:	18 95       	reti

000013ec <__vector_21>:
    13ec:	1f 92       	push	r1
    13ee:	0f 92       	push	r0
    13f0:	0f b6       	in	r0, 0x3f	; 63
    13f2:	0f 92       	push	r0
    13f4:	11 24       	eor	r1, r1
    13f6:	2f 93       	push	r18
    13f8:	3f 93       	push	r19
    13fa:	4f 93       	push	r20
    13fc:	5f 93       	push	r21
    13fe:	6f 93       	push	r22
    1400:	7f 93       	push	r23
    1402:	8f 93       	push	r24
    1404:	9f 93       	push	r25
    1406:	af 93       	push	r26
    1408:	bf 93       	push	r27
    140a:	ef 93       	push	r30
    140c:	ff 93       	push	r31
    140e:	cf 93       	push	r28
    1410:	df 93       	push	r29
    1412:	1f 92       	push	r1
    1414:	cd b7       	in	r28, 0x3d	; 61
    1416:	de b7       	in	r29, 0x3e	; 62
    1418:	e0 91 c3 05 	lds	r30, 0x05C3	; 0x8005c3 <_ser_handle>
    141c:	f0 91 c4 05 	lds	r31, 0x05C4	; 0x8005c4 <_ser_handle+0x1>
    1420:	30 97       	sbiw	r30, 0x00	; 0
    1422:	99 f0       	breq	.+38     	; 0x144a <__vector_21+0x5e>
    1424:	be 01       	movw	r22, r28
    1426:	6f 5f       	subi	r22, 0xFF	; 255
    1428:	7f 4f       	sbci	r23, 0xFF	; 255
    142a:	82 81       	ldd	r24, Z+2	; 0x02
    142c:	93 81       	ldd	r25, Z+3	; 0x03
    142e:	0e 94 9f 06 	call	0xd3e	; 0xd3e <buffer_get_item>
    1432:	81 11       	cpse	r24, r1
    1434:	04 c0       	rjmp	.+8      	; 0x143e <__vector_21+0x52>
    1436:	89 81       	ldd	r24, Y+1	; 0x01
    1438:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
    143c:	0b c0       	rjmp	.+22     	; 0x1454 <__vector_21+0x68>
    143e:	e1 ec       	ldi	r30, 0xC1	; 193
    1440:	f0 e0       	ldi	r31, 0x00	; 0
    1442:	80 81       	ld	r24, Z
    1444:	8f 7d       	andi	r24, 0xDF	; 223
    1446:	80 83       	st	Z, r24
    1448:	05 c0       	rjmp	.+10     	; 0x1454 <__vector_21+0x68>
    144a:	e1 ec       	ldi	r30, 0xC1	; 193
    144c:	f0 e0       	ldi	r31, 0x00	; 0
    144e:	80 81       	ld	r24, Z
    1450:	8f 7d       	andi	r24, 0xDF	; 223
    1452:	80 83       	st	Z, r24
    1454:	0f 90       	pop	r0
    1456:	df 91       	pop	r29
    1458:	cf 91       	pop	r28
    145a:	ff 91       	pop	r31
    145c:	ef 91       	pop	r30
    145e:	bf 91       	pop	r27
    1460:	af 91       	pop	r26
    1462:	9f 91       	pop	r25
    1464:	8f 91       	pop	r24
    1466:	7f 91       	pop	r23
    1468:	6f 91       	pop	r22
    146a:	5f 91       	pop	r21
    146c:	4f 91       	pop	r20
    146e:	3f 91       	pop	r19
    1470:	2f 91       	pop	r18
    1472:	0f 90       	pop	r0
    1474:	0f be       	out	0x3f, r0	; 63
    1476:	0f 90       	pop	r0
    1478:	1f 90       	pop	r1
    147a:	18 95       	reti

0000147c <__vector_28>:
    147c:	1f 92       	push	r1
    147e:	0f 92       	push	r0
    1480:	0f b6       	in	r0, 0x3f	; 63
    1482:	0f 92       	push	r0
    1484:	11 24       	eor	r1, r1
    1486:	2f 93       	push	r18
    1488:	3f 93       	push	r19
    148a:	4f 93       	push	r20
    148c:	5f 93       	push	r21
    148e:	6f 93       	push	r22
    1490:	7f 93       	push	r23
    1492:	8f 93       	push	r24
    1494:	9f 93       	push	r25
    1496:	af 93       	push	r26
    1498:	bf 93       	push	r27
    149a:	cf 93       	push	r28
    149c:	ef 93       	push	r30
    149e:	ff 93       	push	r31
    14a0:	e0 91 c5 05 	lds	r30, 0x05C5	; 0x8005c5 <_ser_handle+0x2>
    14a4:	f0 91 c6 05 	lds	r31, 0x05C6	; 0x8005c6 <_ser_handle+0x3>
    14a8:	30 97       	sbiw	r30, 0x00	; 0
    14aa:	a1 f0       	breq	.+40     	; 0x14d4 <__vector_28+0x58>
    14ac:	c0 91 ce 00 	lds	r28, 0x00CE	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7e00ce>
    14b0:	6c 2f       	mov	r22, r28
    14b2:	84 81       	ldd	r24, Z+4	; 0x04
    14b4:	95 81       	ldd	r25, Z+5	; 0x05
    14b6:	0e 94 c0 06 	call	0xd80	; 0xd80 <buffer_put_item>
    14ba:	80 91 c5 05 	lds	r24, 0x05C5	; 0x8005c5 <_ser_handle+0x2>
    14be:	90 91 c6 05 	lds	r25, 0x05C6	; 0x8005c6 <_ser_handle+0x3>
    14c2:	dc 01       	movw	r26, r24
    14c4:	16 96       	adiw	r26, 0x06	; 6
    14c6:	ed 91       	ld	r30, X+
    14c8:	fc 91       	ld	r31, X
    14ca:	17 97       	sbiw	r26, 0x07	; 7
    14cc:	30 97       	sbiw	r30, 0x00	; 0
    14ce:	11 f0       	breq	.+4      	; 0x14d4 <__vector_28+0x58>
    14d0:	6c 2f       	mov	r22, r28
    14d2:	09 95       	icall
    14d4:	ff 91       	pop	r31
    14d6:	ef 91       	pop	r30
    14d8:	cf 91       	pop	r28
    14da:	bf 91       	pop	r27
    14dc:	af 91       	pop	r26
    14de:	9f 91       	pop	r25
    14e0:	8f 91       	pop	r24
    14e2:	7f 91       	pop	r23
    14e4:	6f 91       	pop	r22
    14e6:	5f 91       	pop	r21
    14e8:	4f 91       	pop	r20
    14ea:	3f 91       	pop	r19
    14ec:	2f 91       	pop	r18
    14ee:	0f 90       	pop	r0
    14f0:	0f be       	out	0x3f, r0	; 63
    14f2:	0f 90       	pop	r0
    14f4:	1f 90       	pop	r1
    14f6:	18 95       	reti

000014f8 <__vector_29>:
    14f8:	1f 92       	push	r1
    14fa:	0f 92       	push	r0
    14fc:	0f b6       	in	r0, 0x3f	; 63
    14fe:	0f 92       	push	r0
    1500:	11 24       	eor	r1, r1
    1502:	2f 93       	push	r18
    1504:	3f 93       	push	r19
    1506:	4f 93       	push	r20
    1508:	5f 93       	push	r21
    150a:	6f 93       	push	r22
    150c:	7f 93       	push	r23
    150e:	8f 93       	push	r24
    1510:	9f 93       	push	r25
    1512:	af 93       	push	r26
    1514:	bf 93       	push	r27
    1516:	ef 93       	push	r30
    1518:	ff 93       	push	r31
    151a:	cf 93       	push	r28
    151c:	df 93       	push	r29
    151e:	1f 92       	push	r1
    1520:	cd b7       	in	r28, 0x3d	; 61
    1522:	de b7       	in	r29, 0x3e	; 62
    1524:	e0 91 c5 05 	lds	r30, 0x05C5	; 0x8005c5 <_ser_handle+0x2>
    1528:	f0 91 c6 05 	lds	r31, 0x05C6	; 0x8005c6 <_ser_handle+0x3>
    152c:	30 97       	sbiw	r30, 0x00	; 0
    152e:	99 f0       	breq	.+38     	; 0x1556 <__vector_29+0x5e>
    1530:	be 01       	movw	r22, r28
    1532:	6f 5f       	subi	r22, 0xFF	; 255
    1534:	7f 4f       	sbci	r23, 0xFF	; 255
    1536:	82 81       	ldd	r24, Z+2	; 0x02
    1538:	93 81       	ldd	r25, Z+3	; 0x03
    153a:	0e 94 9f 06 	call	0xd3e	; 0xd3e <buffer_get_item>
    153e:	81 11       	cpse	r24, r1
    1540:	04 c0       	rjmp	.+8      	; 0x154a <__vector_29+0x52>
    1542:	89 81       	ldd	r24, Y+1	; 0x01
    1544:	80 93 ce 00 	sts	0x00CE, r24	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7e00ce>
    1548:	0b c0       	rjmp	.+22     	; 0x1560 <__vector_29+0x68>
    154a:	e9 ec       	ldi	r30, 0xC9	; 201
    154c:	f0 e0       	ldi	r31, 0x00	; 0
    154e:	80 81       	ld	r24, Z
    1550:	8f 7d       	andi	r24, 0xDF	; 223
    1552:	80 83       	st	Z, r24
    1554:	05 c0       	rjmp	.+10     	; 0x1560 <__vector_29+0x68>
    1556:	e9 ec       	ldi	r30, 0xC9	; 201
    1558:	f0 e0       	ldi	r31, 0x00	; 0
    155a:	80 81       	ld	r24, Z
    155c:	8f 7d       	andi	r24, 0xDF	; 223
    155e:	80 83       	st	Z, r24
    1560:	0f 90       	pop	r0
    1562:	df 91       	pop	r29
    1564:	cf 91       	pop	r28
    1566:	ff 91       	pop	r31
    1568:	ef 91       	pop	r30
    156a:	bf 91       	pop	r27
    156c:	af 91       	pop	r26
    156e:	9f 91       	pop	r25
    1570:	8f 91       	pop	r24
    1572:	7f 91       	pop	r23
    1574:	6f 91       	pop	r22
    1576:	5f 91       	pop	r21
    1578:	4f 91       	pop	r20
    157a:	3f 91       	pop	r19
    157c:	2f 91       	pop	r18
    157e:	0f 90       	pop	r0
    1580:	0f be       	out	0x3f, r0	; 63
    1582:	0f 90       	pop	r0
    1584:	1f 90       	pop	r1
    1586:	18 95       	reti

00001588 <prvCopyDataToQueue>:
    1588:	0f 93       	push	r16
    158a:	1f 93       	push	r17
    158c:	cf 93       	push	r28
    158e:	df 93       	push	r29
    1590:	ec 01       	movw	r28, r24
    1592:	04 2f       	mov	r16, r20
    1594:	1a 8d       	ldd	r17, Y+26	; 0x1a
    1596:	4c 8d       	ldd	r20, Y+28	; 0x1c
    1598:	41 11       	cpse	r20, r1
    159a:	0c c0       	rjmp	.+24     	; 0x15b4 <prvCopyDataToQueue+0x2c>
    159c:	88 81       	ld	r24, Y
    159e:	99 81       	ldd	r25, Y+1	; 0x01
    15a0:	89 2b       	or	r24, r25
    15a2:	09 f0       	breq	.+2      	; 0x15a6 <prvCopyDataToQueue+0x1e>
    15a4:	42 c0       	rjmp	.+132    	; 0x162a <prvCopyDataToQueue+0xa2>
    15a6:	8a 81       	ldd	r24, Y+2	; 0x02
    15a8:	9b 81       	ldd	r25, Y+3	; 0x03
    15aa:	0e 94 6e 12 	call	0x24dc	; 0x24dc <xTaskPriorityDisinherit>
    15ae:	1b 82       	std	Y+3, r1	; 0x03
    15b0:	1a 82       	std	Y+2, r1	; 0x02
    15b2:	42 c0       	rjmp	.+132    	; 0x1638 <prvCopyDataToQueue+0xb0>
    15b4:	01 11       	cpse	r16, r1
    15b6:	17 c0       	rjmp	.+46     	; 0x15e6 <prvCopyDataToQueue+0x5e>
    15b8:	50 e0       	ldi	r21, 0x00	; 0
    15ba:	8c 81       	ldd	r24, Y+4	; 0x04
    15bc:	9d 81       	ldd	r25, Y+5	; 0x05
    15be:	0e 94 87 14 	call	0x290e	; 0x290e <memcpy>
    15c2:	2c 8d       	ldd	r18, Y+28	; 0x1c
    15c4:	8c 81       	ldd	r24, Y+4	; 0x04
    15c6:	9d 81       	ldd	r25, Y+5	; 0x05
    15c8:	82 0f       	add	r24, r18
    15ca:	91 1d       	adc	r25, r1
    15cc:	9d 83       	std	Y+5, r25	; 0x05
    15ce:	8c 83       	std	Y+4, r24	; 0x04
    15d0:	2a 81       	ldd	r18, Y+2	; 0x02
    15d2:	3b 81       	ldd	r19, Y+3	; 0x03
    15d4:	82 17       	cp	r24, r18
    15d6:	93 07       	cpc	r25, r19
    15d8:	50 f1       	brcs	.+84     	; 0x162e <prvCopyDataToQueue+0xa6>
    15da:	88 81       	ld	r24, Y
    15dc:	99 81       	ldd	r25, Y+1	; 0x01
    15de:	9d 83       	std	Y+5, r25	; 0x05
    15e0:	8c 83       	std	Y+4, r24	; 0x04
    15e2:	80 e0       	ldi	r24, 0x00	; 0
    15e4:	29 c0       	rjmp	.+82     	; 0x1638 <prvCopyDataToQueue+0xb0>
    15e6:	50 e0       	ldi	r21, 0x00	; 0
    15e8:	8e 81       	ldd	r24, Y+6	; 0x06
    15ea:	9f 81       	ldd	r25, Y+7	; 0x07
    15ec:	0e 94 87 14 	call	0x290e	; 0x290e <memcpy>
    15f0:	8c 8d       	ldd	r24, Y+28	; 0x1c
    15f2:	90 e0       	ldi	r25, 0x00	; 0
    15f4:	91 95       	neg	r25
    15f6:	81 95       	neg	r24
    15f8:	91 09       	sbc	r25, r1
    15fa:	2e 81       	ldd	r18, Y+6	; 0x06
    15fc:	3f 81       	ldd	r19, Y+7	; 0x07
    15fe:	28 0f       	add	r18, r24
    1600:	39 1f       	adc	r19, r25
    1602:	3f 83       	std	Y+7, r19	; 0x07
    1604:	2e 83       	std	Y+6, r18	; 0x06
    1606:	48 81       	ld	r20, Y
    1608:	59 81       	ldd	r21, Y+1	; 0x01
    160a:	24 17       	cp	r18, r20
    160c:	35 07       	cpc	r19, r21
    160e:	30 f4       	brcc	.+12     	; 0x161c <prvCopyDataToQueue+0x94>
    1610:	2a 81       	ldd	r18, Y+2	; 0x02
    1612:	3b 81       	ldd	r19, Y+3	; 0x03
    1614:	82 0f       	add	r24, r18
    1616:	93 1f       	adc	r25, r19
    1618:	9f 83       	std	Y+7, r25	; 0x07
    161a:	8e 83       	std	Y+6, r24	; 0x06
    161c:	02 30       	cpi	r16, 0x02	; 2
    161e:	49 f4       	brne	.+18     	; 0x1632 <prvCopyDataToQueue+0xaa>
    1620:	11 23       	and	r17, r17
    1622:	49 f0       	breq	.+18     	; 0x1636 <prvCopyDataToQueue+0xae>
    1624:	11 50       	subi	r17, 0x01	; 1
    1626:	80 e0       	ldi	r24, 0x00	; 0
    1628:	07 c0       	rjmp	.+14     	; 0x1638 <prvCopyDataToQueue+0xb0>
    162a:	80 e0       	ldi	r24, 0x00	; 0
    162c:	05 c0       	rjmp	.+10     	; 0x1638 <prvCopyDataToQueue+0xb0>
    162e:	80 e0       	ldi	r24, 0x00	; 0
    1630:	03 c0       	rjmp	.+6      	; 0x1638 <prvCopyDataToQueue+0xb0>
    1632:	80 e0       	ldi	r24, 0x00	; 0
    1634:	01 c0       	rjmp	.+2      	; 0x1638 <prvCopyDataToQueue+0xb0>
    1636:	80 e0       	ldi	r24, 0x00	; 0
    1638:	1f 5f       	subi	r17, 0xFF	; 255
    163a:	1a 8f       	std	Y+26, r17	; 0x1a
    163c:	df 91       	pop	r29
    163e:	cf 91       	pop	r28
    1640:	1f 91       	pop	r17
    1642:	0f 91       	pop	r16
    1644:	08 95       	ret

00001646 <prvCopyDataFromQueue>:
    1646:	fc 01       	movw	r30, r24
    1648:	44 8d       	ldd	r20, Z+28	; 0x1c
    164a:	44 23       	and	r20, r20
    164c:	a9 f0       	breq	.+42     	; 0x1678 <prvCopyDataFromQueue+0x32>
    164e:	50 e0       	ldi	r21, 0x00	; 0
    1650:	26 81       	ldd	r18, Z+6	; 0x06
    1652:	37 81       	ldd	r19, Z+7	; 0x07
    1654:	24 0f       	add	r18, r20
    1656:	35 1f       	adc	r19, r21
    1658:	37 83       	std	Z+7, r19	; 0x07
    165a:	26 83       	std	Z+6, r18	; 0x06
    165c:	82 81       	ldd	r24, Z+2	; 0x02
    165e:	93 81       	ldd	r25, Z+3	; 0x03
    1660:	28 17       	cp	r18, r24
    1662:	39 07       	cpc	r19, r25
    1664:	20 f0       	brcs	.+8      	; 0x166e <prvCopyDataFromQueue+0x28>
    1666:	80 81       	ld	r24, Z
    1668:	91 81       	ldd	r25, Z+1	; 0x01
    166a:	97 83       	std	Z+7, r25	; 0x07
    166c:	86 83       	std	Z+6, r24	; 0x06
    166e:	cb 01       	movw	r24, r22
    1670:	66 81       	ldd	r22, Z+6	; 0x06
    1672:	77 81       	ldd	r23, Z+7	; 0x07
    1674:	0e 94 87 14 	call	0x290e	; 0x290e <memcpy>
    1678:	08 95       	ret

0000167a <prvUnlockQueue>:
    167a:	ef 92       	push	r14
    167c:	ff 92       	push	r15
    167e:	0f 93       	push	r16
    1680:	1f 93       	push	r17
    1682:	cf 93       	push	r28
    1684:	8c 01       	movw	r16, r24
    1686:	0f b6       	in	r0, 0x3f	; 63
    1688:	f8 94       	cli
    168a:	0f 92       	push	r0
    168c:	fc 01       	movw	r30, r24
    168e:	c6 8d       	ldd	r28, Z+30	; 0x1e
    1690:	1c 16       	cp	r1, r28
    1692:	ac f4       	brge	.+42     	; 0x16be <prvUnlockQueue+0x44>
    1694:	81 89       	ldd	r24, Z+17	; 0x11
    1696:	81 11       	cpse	r24, r1
    1698:	06 c0       	rjmp	.+12     	; 0x16a6 <prvUnlockQueue+0x2c>
    169a:	11 c0       	rjmp	.+34     	; 0x16be <prvUnlockQueue+0x44>
    169c:	f8 01       	movw	r30, r16
    169e:	81 89       	ldd	r24, Z+17	; 0x11
    16a0:	81 11       	cpse	r24, r1
    16a2:	05 c0       	rjmp	.+10     	; 0x16ae <prvUnlockQueue+0x34>
    16a4:	0c c0       	rjmp	.+24     	; 0x16be <prvUnlockQueue+0x44>
    16a6:	78 01       	movw	r14, r16
    16a8:	f1 e1       	ldi	r31, 0x11	; 17
    16aa:	ef 0e       	add	r14, r31
    16ac:	f1 1c       	adc	r15, r1
    16ae:	c7 01       	movw	r24, r14
    16b0:	0e 94 83 11 	call	0x2306	; 0x2306 <xTaskRemoveFromEventList>
    16b4:	81 11       	cpse	r24, r1
    16b6:	0e 94 08 12 	call	0x2410	; 0x2410 <vTaskMissedYield>
    16ba:	c1 50       	subi	r28, 0x01	; 1
    16bc:	79 f7       	brne	.-34     	; 0x169c <prvUnlockQueue+0x22>
    16be:	8f ef       	ldi	r24, 0xFF	; 255
    16c0:	f8 01       	movw	r30, r16
    16c2:	86 8f       	std	Z+30, r24	; 0x1e
    16c4:	0f 90       	pop	r0
    16c6:	0f be       	out	0x3f, r0	; 63
    16c8:	0f b6       	in	r0, 0x3f	; 63
    16ca:	f8 94       	cli
    16cc:	0f 92       	push	r0
    16ce:	c5 8d       	ldd	r28, Z+29	; 0x1d
    16d0:	1c 16       	cp	r1, r28
    16d2:	ac f4       	brge	.+42     	; 0x16fe <prvUnlockQueue+0x84>
    16d4:	80 85       	ldd	r24, Z+8	; 0x08
    16d6:	81 11       	cpse	r24, r1
    16d8:	06 c0       	rjmp	.+12     	; 0x16e6 <prvUnlockQueue+0x6c>
    16da:	11 c0       	rjmp	.+34     	; 0x16fe <prvUnlockQueue+0x84>
    16dc:	f8 01       	movw	r30, r16
    16de:	80 85       	ldd	r24, Z+8	; 0x08
    16e0:	81 11       	cpse	r24, r1
    16e2:	05 c0       	rjmp	.+10     	; 0x16ee <prvUnlockQueue+0x74>
    16e4:	0c c0       	rjmp	.+24     	; 0x16fe <prvUnlockQueue+0x84>
    16e6:	78 01       	movw	r14, r16
    16e8:	f8 e0       	ldi	r31, 0x08	; 8
    16ea:	ef 0e       	add	r14, r31
    16ec:	f1 1c       	adc	r15, r1
    16ee:	c7 01       	movw	r24, r14
    16f0:	0e 94 83 11 	call	0x2306	; 0x2306 <xTaskRemoveFromEventList>
    16f4:	81 11       	cpse	r24, r1
    16f6:	0e 94 08 12 	call	0x2410	; 0x2410 <vTaskMissedYield>
    16fa:	c1 50       	subi	r28, 0x01	; 1
    16fc:	79 f7       	brne	.-34     	; 0x16dc <prvUnlockQueue+0x62>
    16fe:	8f ef       	ldi	r24, 0xFF	; 255
    1700:	f8 01       	movw	r30, r16
    1702:	85 8f       	std	Z+29, r24	; 0x1d
    1704:	0f 90       	pop	r0
    1706:	0f be       	out	0x3f, r0	; 63
    1708:	cf 91       	pop	r28
    170a:	1f 91       	pop	r17
    170c:	0f 91       	pop	r16
    170e:	ff 90       	pop	r15
    1710:	ef 90       	pop	r14
    1712:	08 95       	ret

00001714 <xQueueGenericReset>:
    1714:	cf 93       	push	r28
    1716:	df 93       	push	r29
    1718:	ec 01       	movw	r28, r24
    171a:	0f b6       	in	r0, 0x3f	; 63
    171c:	f8 94       	cli
    171e:	0f 92       	push	r0
    1720:	48 81       	ld	r20, Y
    1722:	59 81       	ldd	r21, Y+1	; 0x01
    1724:	2c 8d       	ldd	r18, Y+28	; 0x1c
    1726:	30 e0       	ldi	r19, 0x00	; 0
    1728:	7b 8d       	ldd	r23, Y+27	; 0x1b
    172a:	72 9f       	mul	r23, r18
    172c:	c0 01       	movw	r24, r0
    172e:	73 9f       	mul	r23, r19
    1730:	90 0d       	add	r25, r0
    1732:	11 24       	eor	r1, r1
    1734:	fa 01       	movw	r30, r20
    1736:	e8 0f       	add	r30, r24
    1738:	f9 1f       	adc	r31, r25
    173a:	fb 83       	std	Y+3, r31	; 0x03
    173c:	ea 83       	std	Y+2, r30	; 0x02
    173e:	1a 8e       	std	Y+26, r1	; 0x1a
    1740:	5d 83       	std	Y+5, r21	; 0x05
    1742:	4c 83       	std	Y+4, r20	; 0x04
    1744:	82 1b       	sub	r24, r18
    1746:	93 0b       	sbc	r25, r19
    1748:	84 0f       	add	r24, r20
    174a:	95 1f       	adc	r25, r21
    174c:	9f 83       	std	Y+7, r25	; 0x07
    174e:	8e 83       	std	Y+6, r24	; 0x06
    1750:	8f ef       	ldi	r24, 0xFF	; 255
    1752:	8d 8f       	std	Y+29, r24	; 0x1d
    1754:	8e 8f       	std	Y+30, r24	; 0x1e
    1756:	61 11       	cpse	r22, r1
    1758:	0c c0       	rjmp	.+24     	; 0x1772 <xQueueGenericReset+0x5e>
    175a:	88 85       	ldd	r24, Y+8	; 0x08
    175c:	88 23       	and	r24, r24
    175e:	89 f0       	breq	.+34     	; 0x1782 <xQueueGenericReset+0x6e>
    1760:	ce 01       	movw	r24, r28
    1762:	08 96       	adiw	r24, 0x08	; 8
    1764:	0e 94 83 11 	call	0x2306	; 0x2306 <xTaskRemoveFromEventList>
    1768:	88 23       	and	r24, r24
    176a:	59 f0       	breq	.+22     	; 0x1782 <xQueueGenericReset+0x6e>
    176c:	0e 94 0d 08 	call	0x101a	; 0x101a <vPortYield>
    1770:	08 c0       	rjmp	.+16     	; 0x1782 <xQueueGenericReset+0x6e>
    1772:	ce 01       	movw	r24, r28
    1774:	08 96       	adiw	r24, 0x08	; 8
    1776:	0e 94 dd 06 	call	0xdba	; 0xdba <vListInitialise>
    177a:	ce 01       	movw	r24, r28
    177c:	41 96       	adiw	r24, 0x11	; 17
    177e:	0e 94 dd 06 	call	0xdba	; 0xdba <vListInitialise>
    1782:	0f 90       	pop	r0
    1784:	0f be       	out	0x3f, r0	; 63
    1786:	81 e0       	ldi	r24, 0x01	; 1
    1788:	df 91       	pop	r29
    178a:	cf 91       	pop	r28
    178c:	08 95       	ret

0000178e <xQueueGenericCreate>:
    178e:	ff 92       	push	r15
    1790:	0f 93       	push	r16
    1792:	1f 93       	push	r17
    1794:	cf 93       	push	r28
    1796:	df 93       	push	r29
    1798:	08 2f       	mov	r16, r24
    179a:	16 2f       	mov	r17, r22
    179c:	f4 2e       	mov	r15, r20
    179e:	66 23       	and	r22, r22
    17a0:	c9 f0       	breq	.+50     	; 0x17d4 <xQueueGenericCreate+0x46>
    17a2:	86 9f       	mul	r24, r22
    17a4:	c0 01       	movw	r24, r0
    17a6:	11 24       	eor	r1, r1
    17a8:	81 96       	adiw	r24, 0x21	; 33
    17aa:	0e 94 c5 08 	call	0x118a	; 0x118a <pvPortMalloc>
    17ae:	ec 01       	movw	r28, r24
    17b0:	00 97       	sbiw	r24, 0x00	; 0
    17b2:	49 f4       	brne	.+18     	; 0x17c6 <xQueueGenericCreate+0x38>
    17b4:	16 c0       	rjmp	.+44     	; 0x17e2 <xQueueGenericCreate+0x54>
    17b6:	0b 8f       	std	Y+27, r16	; 0x1b
    17b8:	1c 8f       	std	Y+28, r17	; 0x1c
    17ba:	61 e0       	ldi	r22, 0x01	; 1
    17bc:	ce 01       	movw	r24, r28
    17be:	0e 94 8a 0b 	call	0x1714	; 0x1714 <xQueueGenericReset>
    17c2:	f8 a2       	std	Y+32, r15	; 0x20
    17c4:	0e c0       	rjmp	.+28     	; 0x17e2 <xQueueGenericCreate+0x54>
    17c6:	81 96       	adiw	r24, 0x21	; 33
    17c8:	99 83       	std	Y+1, r25	; 0x01
    17ca:	88 83       	st	Y, r24
    17cc:	f4 cf       	rjmp	.-24     	; 0x17b6 <xQueueGenericCreate+0x28>
    17ce:	d9 83       	std	Y+1, r29	; 0x01
    17d0:	c8 83       	st	Y, r28
    17d2:	f1 cf       	rjmp	.-30     	; 0x17b6 <xQueueGenericCreate+0x28>
    17d4:	81 e2       	ldi	r24, 0x21	; 33
    17d6:	90 e0       	ldi	r25, 0x00	; 0
    17d8:	0e 94 c5 08 	call	0x118a	; 0x118a <pvPortMalloc>
    17dc:	ec 01       	movw	r28, r24
    17de:	89 2b       	or	r24, r25
    17e0:	b1 f7       	brne	.-20     	; 0x17ce <xQueueGenericCreate+0x40>
    17e2:	ce 01       	movw	r24, r28
    17e4:	df 91       	pop	r29
    17e6:	cf 91       	pop	r28
    17e8:	1f 91       	pop	r17
    17ea:	0f 91       	pop	r16
    17ec:	ff 90       	pop	r15
    17ee:	08 95       	ret

000017f0 <xQueueGenericSend>:
    17f0:	9f 92       	push	r9
    17f2:	af 92       	push	r10
    17f4:	bf 92       	push	r11
    17f6:	cf 92       	push	r12
    17f8:	df 92       	push	r13
    17fa:	ef 92       	push	r14
    17fc:	ff 92       	push	r15
    17fe:	0f 93       	push	r16
    1800:	1f 93       	push	r17
    1802:	cf 93       	push	r28
    1804:	df 93       	push	r29
    1806:	00 d0       	rcall	.+0      	; 0x1808 <xQueueGenericSend+0x18>
    1808:	00 d0       	rcall	.+0      	; 0x180a <xQueueGenericSend+0x1a>
    180a:	1f 92       	push	r1
    180c:	cd b7       	in	r28, 0x3d	; 61
    180e:	de b7       	in	r29, 0x3e	; 62
    1810:	8c 01       	movw	r16, r24
    1812:	6b 01       	movw	r12, r22
    1814:	5d 83       	std	Y+5, r21	; 0x05
    1816:	4c 83       	std	Y+4, r20	; 0x04
    1818:	a2 2e       	mov	r10, r18
    181a:	b1 2c       	mov	r11, r1
    181c:	99 24       	eor	r9, r9
    181e:	93 94       	inc	r9
    1820:	7c 01       	movw	r14, r24
    1822:	88 e0       	ldi	r24, 0x08	; 8
    1824:	e8 0e       	add	r14, r24
    1826:	f1 1c       	adc	r15, r1
    1828:	0f b6       	in	r0, 0x3f	; 63
    182a:	f8 94       	cli
    182c:	0f 92       	push	r0
    182e:	f8 01       	movw	r30, r16
    1830:	92 8d       	ldd	r25, Z+26	; 0x1a
    1832:	83 8d       	ldd	r24, Z+27	; 0x1b
    1834:	98 17       	cp	r25, r24
    1836:	18 f0       	brcs	.+6      	; 0x183e <xQueueGenericSend+0x4e>
    1838:	f2 e0       	ldi	r31, 0x02	; 2
    183a:	af 12       	cpse	r10, r31
    183c:	19 c0       	rjmp	.+50     	; 0x1870 <xQueueGenericSend+0x80>
    183e:	4a 2d       	mov	r20, r10
    1840:	b6 01       	movw	r22, r12
    1842:	c8 01       	movw	r24, r16
    1844:	0e 94 c4 0a 	call	0x1588	; 0x1588 <prvCopyDataToQueue>
    1848:	f8 01       	movw	r30, r16
    184a:	91 89       	ldd	r25, Z+17	; 0x11
    184c:	99 23       	and	r25, r25
    184e:	49 f0       	breq	.+18     	; 0x1862 <xQueueGenericSend+0x72>
    1850:	c8 01       	movw	r24, r16
    1852:	41 96       	adiw	r24, 0x11	; 17
    1854:	0e 94 83 11 	call	0x2306	; 0x2306 <xTaskRemoveFromEventList>
    1858:	88 23       	and	r24, r24
    185a:	31 f0       	breq	.+12     	; 0x1868 <xQueueGenericSend+0x78>
    185c:	0e 94 0d 08 	call	0x101a	; 0x101a <vPortYield>
    1860:	03 c0       	rjmp	.+6      	; 0x1868 <xQueueGenericSend+0x78>
    1862:	81 11       	cpse	r24, r1
    1864:	0e 94 0d 08 	call	0x101a	; 0x101a <vPortYield>
    1868:	0f 90       	pop	r0
    186a:	0f be       	out	0x3f, r0	; 63
    186c:	81 e0       	ldi	r24, 0x01	; 1
    186e:	50 c0       	rjmp	.+160    	; 0x1910 <xQueueGenericSend+0x120>
    1870:	8c 81       	ldd	r24, Y+4	; 0x04
    1872:	9d 81       	ldd	r25, Y+5	; 0x05
    1874:	89 2b       	or	r24, r25
    1876:	21 f4       	brne	.+8      	; 0x1880 <xQueueGenericSend+0x90>
    1878:	0f 90       	pop	r0
    187a:	0f be       	out	0x3f, r0	; 63
    187c:	80 e0       	ldi	r24, 0x00	; 0
    187e:	48 c0       	rjmp	.+144    	; 0x1910 <xQueueGenericSend+0x120>
    1880:	b1 10       	cpse	r11, r1
    1882:	05 c0       	rjmp	.+10     	; 0x188e <xQueueGenericSend+0x9e>
    1884:	ce 01       	movw	r24, r28
    1886:	01 96       	adiw	r24, 0x01	; 1
    1888:	0e 94 cb 11 	call	0x2396	; 0x2396 <vTaskSetTimeOutState>
    188c:	b9 2c       	mov	r11, r9
    188e:	0f 90       	pop	r0
    1890:	0f be       	out	0x3f, r0	; 63
    1892:	0e 94 5b 0f 	call	0x1eb6	; 0x1eb6 <vTaskSuspendAll>
    1896:	0f b6       	in	r0, 0x3f	; 63
    1898:	f8 94       	cli
    189a:	0f 92       	push	r0
    189c:	f8 01       	movw	r30, r16
    189e:	85 8d       	ldd	r24, Z+29	; 0x1d
    18a0:	8f 3f       	cpi	r24, 0xFF	; 255
    18a2:	09 f4       	brne	.+2      	; 0x18a6 <xQueueGenericSend+0xb6>
    18a4:	15 8e       	std	Z+29, r1	; 0x1d
    18a6:	f8 01       	movw	r30, r16
    18a8:	86 8d       	ldd	r24, Z+30	; 0x1e
    18aa:	8f 3f       	cpi	r24, 0xFF	; 255
    18ac:	09 f4       	brne	.+2      	; 0x18b0 <xQueueGenericSend+0xc0>
    18ae:	16 8e       	std	Z+30, r1	; 0x1e
    18b0:	0f 90       	pop	r0
    18b2:	0f be       	out	0x3f, r0	; 63
    18b4:	be 01       	movw	r22, r28
    18b6:	6c 5f       	subi	r22, 0xFC	; 252
    18b8:	7f 4f       	sbci	r23, 0xFF	; 255
    18ba:	ce 01       	movw	r24, r28
    18bc:	01 96       	adiw	r24, 0x01	; 1
    18be:	0e 94 d6 11 	call	0x23ac	; 0x23ac <xTaskCheckForTimeOut>
    18c2:	81 11       	cpse	r24, r1
    18c4:	1f c0       	rjmp	.+62     	; 0x1904 <xQueueGenericSend+0x114>
    18c6:	0f b6       	in	r0, 0x3f	; 63
    18c8:	f8 94       	cli
    18ca:	0f 92       	push	r0
    18cc:	f8 01       	movw	r30, r16
    18ce:	92 8d       	ldd	r25, Z+26	; 0x1a
    18d0:	0f 90       	pop	r0
    18d2:	0f be       	out	0x3f, r0	; 63
    18d4:	83 8d       	ldd	r24, Z+27	; 0x1b
    18d6:	98 13       	cpse	r25, r24
    18d8:	0f c0       	rjmp	.+30     	; 0x18f8 <xQueueGenericSend+0x108>
    18da:	6c 81       	ldd	r22, Y+4	; 0x04
    18dc:	7d 81       	ldd	r23, Y+5	; 0x05
    18de:	c7 01       	movw	r24, r14
    18e0:	0e 94 71 11 	call	0x22e2	; 0x22e2 <vTaskPlaceOnEventList>
    18e4:	c8 01       	movw	r24, r16
    18e6:	0e 94 3d 0b 	call	0x167a	; 0x167a <prvUnlockQueue>
    18ea:	0e 94 1c 10 	call	0x2038	; 0x2038 <xTaskResumeAll>
    18ee:	81 11       	cpse	r24, r1
    18f0:	9b cf       	rjmp	.-202    	; 0x1828 <xQueueGenericSend+0x38>
    18f2:	0e 94 0d 08 	call	0x101a	; 0x101a <vPortYield>
    18f6:	98 cf       	rjmp	.-208    	; 0x1828 <xQueueGenericSend+0x38>
    18f8:	c8 01       	movw	r24, r16
    18fa:	0e 94 3d 0b 	call	0x167a	; 0x167a <prvUnlockQueue>
    18fe:	0e 94 1c 10 	call	0x2038	; 0x2038 <xTaskResumeAll>
    1902:	92 cf       	rjmp	.-220    	; 0x1828 <xQueueGenericSend+0x38>
    1904:	c8 01       	movw	r24, r16
    1906:	0e 94 3d 0b 	call	0x167a	; 0x167a <prvUnlockQueue>
    190a:	0e 94 1c 10 	call	0x2038	; 0x2038 <xTaskResumeAll>
    190e:	80 e0       	ldi	r24, 0x00	; 0
    1910:	0f 90       	pop	r0
    1912:	0f 90       	pop	r0
    1914:	0f 90       	pop	r0
    1916:	0f 90       	pop	r0
    1918:	0f 90       	pop	r0
    191a:	df 91       	pop	r29
    191c:	cf 91       	pop	r28
    191e:	1f 91       	pop	r17
    1920:	0f 91       	pop	r16
    1922:	ff 90       	pop	r15
    1924:	ef 90       	pop	r14
    1926:	df 90       	pop	r13
    1928:	cf 90       	pop	r12
    192a:	bf 90       	pop	r11
    192c:	af 90       	pop	r10
    192e:	9f 90       	pop	r9
    1930:	08 95       	ret

00001932 <xQueueCreateMutex>:
    1932:	cf 93       	push	r28
    1934:	df 93       	push	r29
    1936:	48 2f       	mov	r20, r24
    1938:	60 e0       	ldi	r22, 0x00	; 0
    193a:	81 e0       	ldi	r24, 0x01	; 1
    193c:	0e 94 c7 0b 	call	0x178e	; 0x178e <xQueueGenericCreate>
    1940:	ec 01       	movw	r28, r24
    1942:	00 97       	sbiw	r24, 0x00	; 0
    1944:	61 f0       	breq	.+24     	; 0x195e <xQueueCreateMutex+0x2c>
    1946:	1b 82       	std	Y+3, r1	; 0x03
    1948:	1a 82       	std	Y+2, r1	; 0x02
    194a:	19 82       	std	Y+1, r1	; 0x01
    194c:	18 82       	st	Y, r1
    194e:	1e 82       	std	Y+6, r1	; 0x06
    1950:	20 e0       	ldi	r18, 0x00	; 0
    1952:	40 e0       	ldi	r20, 0x00	; 0
    1954:	50 e0       	ldi	r21, 0x00	; 0
    1956:	60 e0       	ldi	r22, 0x00	; 0
    1958:	70 e0       	ldi	r23, 0x00	; 0
    195a:	0e 94 f8 0b 	call	0x17f0	; 0x17f0 <xQueueGenericSend>
    195e:	ce 01       	movw	r24, r28
    1960:	df 91       	pop	r29
    1962:	cf 91       	pop	r28
    1964:	08 95       	ret

00001966 <xQueueGenericSendFromISR>:
    1966:	ef 92       	push	r14
    1968:	ff 92       	push	r15
    196a:	0f 93       	push	r16
    196c:	1f 93       	push	r17
    196e:	cf 93       	push	r28
    1970:	df 93       	push	r29
    1972:	8a 01       	movw	r16, r20
    1974:	fc 01       	movw	r30, r24
    1976:	52 8d       	ldd	r21, Z+26	; 0x1a
    1978:	33 8d       	ldd	r19, Z+27	; 0x1b
    197a:	53 17       	cp	r21, r19
    197c:	10 f0       	brcs	.+4      	; 0x1982 <xQueueGenericSendFromISR+0x1c>
    197e:	22 30       	cpi	r18, 0x02	; 2
    1980:	f1 f4       	brne	.+60     	; 0x19be <xQueueGenericSendFromISR+0x58>
    1982:	42 2f       	mov	r20, r18
    1984:	78 01       	movw	r14, r16
    1986:	ec 01       	movw	r28, r24
    1988:	1e 8d       	ldd	r17, Y+30	; 0x1e
    198a:	0e 94 c4 0a 	call	0x1588	; 0x1588 <prvCopyDataToQueue>
    198e:	1f 3f       	cpi	r17, 0xFF	; 255
    1990:	81 f4       	brne	.+32     	; 0x19b2 <xQueueGenericSendFromISR+0x4c>
    1992:	89 89       	ldd	r24, Y+17	; 0x11
    1994:	88 23       	and	r24, r24
    1996:	a9 f0       	breq	.+42     	; 0x19c2 <xQueueGenericSendFromISR+0x5c>
    1998:	ce 01       	movw	r24, r28
    199a:	41 96       	adiw	r24, 0x11	; 17
    199c:	0e 94 83 11 	call	0x2306	; 0x2306 <xTaskRemoveFromEventList>
    19a0:	88 23       	and	r24, r24
    19a2:	89 f0       	breq	.+34     	; 0x19c6 <xQueueGenericSendFromISR+0x60>
    19a4:	e1 14       	cp	r14, r1
    19a6:	f1 04       	cpc	r15, r1
    19a8:	81 f0       	breq	.+32     	; 0x19ca <xQueueGenericSendFromISR+0x64>
    19aa:	81 e0       	ldi	r24, 0x01	; 1
    19ac:	f7 01       	movw	r30, r14
    19ae:	80 83       	st	Z, r24
    19b0:	0d c0       	rjmp	.+26     	; 0x19cc <xQueueGenericSendFromISR+0x66>
    19b2:	ff 24       	eor	r15, r15
    19b4:	f3 94       	inc	r15
    19b6:	f1 0e       	add	r15, r17
    19b8:	fe 8e       	std	Y+30, r15	; 0x1e
    19ba:	81 e0       	ldi	r24, 0x01	; 1
    19bc:	07 c0       	rjmp	.+14     	; 0x19cc <xQueueGenericSendFromISR+0x66>
    19be:	80 e0       	ldi	r24, 0x00	; 0
    19c0:	05 c0       	rjmp	.+10     	; 0x19cc <xQueueGenericSendFromISR+0x66>
    19c2:	81 e0       	ldi	r24, 0x01	; 1
    19c4:	03 c0       	rjmp	.+6      	; 0x19cc <xQueueGenericSendFromISR+0x66>
    19c6:	81 e0       	ldi	r24, 0x01	; 1
    19c8:	01 c0       	rjmp	.+2      	; 0x19cc <xQueueGenericSendFromISR+0x66>
    19ca:	81 e0       	ldi	r24, 0x01	; 1
    19cc:	df 91       	pop	r29
    19ce:	cf 91       	pop	r28
    19d0:	1f 91       	pop	r17
    19d2:	0f 91       	pop	r16
    19d4:	ff 90       	pop	r15
    19d6:	ef 90       	pop	r14
    19d8:	08 95       	ret

000019da <xQueueGenericReceive>:
    19da:	8f 92       	push	r8
    19dc:	9f 92       	push	r9
    19de:	af 92       	push	r10
    19e0:	bf 92       	push	r11
    19e2:	cf 92       	push	r12
    19e4:	df 92       	push	r13
    19e6:	ef 92       	push	r14
    19e8:	ff 92       	push	r15
    19ea:	0f 93       	push	r16
    19ec:	1f 93       	push	r17
    19ee:	cf 93       	push	r28
    19f0:	df 93       	push	r29
    19f2:	00 d0       	rcall	.+0      	; 0x19f4 <xQueueGenericReceive+0x1a>
    19f4:	00 d0       	rcall	.+0      	; 0x19f6 <xQueueGenericReceive+0x1c>
    19f6:	1f 92       	push	r1
    19f8:	cd b7       	in	r28, 0x3d	; 61
    19fa:	de b7       	in	r29, 0x3e	; 62
    19fc:	8c 01       	movw	r16, r24
    19fe:	5b 01       	movw	r10, r22
    1a00:	5d 83       	std	Y+5, r21	; 0x05
    1a02:	4c 83       	std	Y+4, r20	; 0x04
    1a04:	82 2e       	mov	r8, r18
    1a06:	e1 2c       	mov	r14, r1
    1a08:	99 24       	eor	r9, r9
    1a0a:	93 94       	inc	r9
    1a0c:	6c 01       	movw	r12, r24
    1a0e:	81 e1       	ldi	r24, 0x11	; 17
    1a10:	c8 0e       	add	r12, r24
    1a12:	d1 1c       	adc	r13, r1
    1a14:	0f b6       	in	r0, 0x3f	; 63
    1a16:	f8 94       	cli
    1a18:	0f 92       	push	r0
    1a1a:	f8 01       	movw	r30, r16
    1a1c:	f2 8c       	ldd	r15, Z+26	; 0x1a
    1a1e:	ff 20       	and	r15, r15
    1a20:	91 f1       	breq	.+100    	; 0x1a86 <xQueueGenericReceive+0xac>
    1a22:	c6 80       	ldd	r12, Z+6	; 0x06
    1a24:	d7 80       	ldd	r13, Z+7	; 0x07
    1a26:	b5 01       	movw	r22, r10
    1a28:	c8 01       	movw	r24, r16
    1a2a:	0e 94 23 0b 	call	0x1646	; 0x1646 <prvCopyDataFromQueue>
    1a2e:	81 10       	cpse	r8, r1
    1a30:	19 c0       	rjmp	.+50     	; 0x1a64 <xQueueGenericReceive+0x8a>
    1a32:	fa 94       	dec	r15
    1a34:	f8 01       	movw	r30, r16
    1a36:	f2 8e       	std	Z+26, r15	; 0x1a
    1a38:	80 81       	ld	r24, Z
    1a3a:	91 81       	ldd	r25, Z+1	; 0x01
    1a3c:	89 2b       	or	r24, r25
    1a3e:	29 f4       	brne	.+10     	; 0x1a4a <xQueueGenericReceive+0x70>
    1a40:	0e 94 ae 12 	call	0x255c	; 0x255c <pvTaskIncrementMutexHeldCount>
    1a44:	f8 01       	movw	r30, r16
    1a46:	93 83       	std	Z+3, r25	; 0x03
    1a48:	82 83       	std	Z+2, r24	; 0x02
    1a4a:	f8 01       	movw	r30, r16
    1a4c:	80 85       	ldd	r24, Z+8	; 0x08
    1a4e:	88 23       	and	r24, r24
    1a50:	b1 f0       	breq	.+44     	; 0x1a7e <xQueueGenericReceive+0xa4>
    1a52:	c8 01       	movw	r24, r16
    1a54:	08 96       	adiw	r24, 0x08	; 8
    1a56:	0e 94 83 11 	call	0x2306	; 0x2306 <xTaskRemoveFromEventList>
    1a5a:	88 23       	and	r24, r24
    1a5c:	81 f0       	breq	.+32     	; 0x1a7e <xQueueGenericReceive+0xa4>
    1a5e:	0e 94 0d 08 	call	0x101a	; 0x101a <vPortYield>
    1a62:	0d c0       	rjmp	.+26     	; 0x1a7e <xQueueGenericReceive+0xa4>
    1a64:	f8 01       	movw	r30, r16
    1a66:	d7 82       	std	Z+7, r13	; 0x07
    1a68:	c6 82       	std	Z+6, r12	; 0x06
    1a6a:	81 89       	ldd	r24, Z+17	; 0x11
    1a6c:	88 23       	and	r24, r24
    1a6e:	39 f0       	breq	.+14     	; 0x1a7e <xQueueGenericReceive+0xa4>
    1a70:	c8 01       	movw	r24, r16
    1a72:	41 96       	adiw	r24, 0x11	; 17
    1a74:	0e 94 83 11 	call	0x2306	; 0x2306 <xTaskRemoveFromEventList>
    1a78:	81 11       	cpse	r24, r1
    1a7a:	0e 94 0d 08 	call	0x101a	; 0x101a <vPortYield>
    1a7e:	0f 90       	pop	r0
    1a80:	0f be       	out	0x3f, r0	; 63
    1a82:	81 e0       	ldi	r24, 0x01	; 1
    1a84:	64 c0       	rjmp	.+200    	; 0x1b4e <xQueueGenericReceive+0x174>
    1a86:	8c 81       	ldd	r24, Y+4	; 0x04
    1a88:	9d 81       	ldd	r25, Y+5	; 0x05
    1a8a:	89 2b       	or	r24, r25
    1a8c:	21 f4       	brne	.+8      	; 0x1a96 <xQueueGenericReceive+0xbc>
    1a8e:	0f 90       	pop	r0
    1a90:	0f be       	out	0x3f, r0	; 63
    1a92:	80 e0       	ldi	r24, 0x00	; 0
    1a94:	5c c0       	rjmp	.+184    	; 0x1b4e <xQueueGenericReceive+0x174>
    1a96:	e1 10       	cpse	r14, r1
    1a98:	05 c0       	rjmp	.+10     	; 0x1aa4 <xQueueGenericReceive+0xca>
    1a9a:	ce 01       	movw	r24, r28
    1a9c:	01 96       	adiw	r24, 0x01	; 1
    1a9e:	0e 94 cb 11 	call	0x2396	; 0x2396 <vTaskSetTimeOutState>
    1aa2:	e9 2c       	mov	r14, r9
    1aa4:	0f 90       	pop	r0
    1aa6:	0f be       	out	0x3f, r0	; 63
    1aa8:	0e 94 5b 0f 	call	0x1eb6	; 0x1eb6 <vTaskSuspendAll>
    1aac:	0f b6       	in	r0, 0x3f	; 63
    1aae:	f8 94       	cli
    1ab0:	0f 92       	push	r0
    1ab2:	f8 01       	movw	r30, r16
    1ab4:	85 8d       	ldd	r24, Z+29	; 0x1d
    1ab6:	8f 3f       	cpi	r24, 0xFF	; 255
    1ab8:	09 f4       	brne	.+2      	; 0x1abc <xQueueGenericReceive+0xe2>
    1aba:	15 8e       	std	Z+29, r1	; 0x1d
    1abc:	f8 01       	movw	r30, r16
    1abe:	86 8d       	ldd	r24, Z+30	; 0x1e
    1ac0:	8f 3f       	cpi	r24, 0xFF	; 255
    1ac2:	09 f4       	brne	.+2      	; 0x1ac6 <xQueueGenericReceive+0xec>
    1ac4:	16 8e       	std	Z+30, r1	; 0x1e
    1ac6:	0f 90       	pop	r0
    1ac8:	0f be       	out	0x3f, r0	; 63
    1aca:	be 01       	movw	r22, r28
    1acc:	6c 5f       	subi	r22, 0xFC	; 252
    1ace:	7f 4f       	sbci	r23, 0xFF	; 255
    1ad0:	ce 01       	movw	r24, r28
    1ad2:	01 96       	adiw	r24, 0x01	; 1
    1ad4:	0e 94 d6 11 	call	0x23ac	; 0x23ac <xTaskCheckForTimeOut>
    1ad8:	81 11       	cpse	r24, r1
    1ada:	2b c0       	rjmp	.+86     	; 0x1b32 <xQueueGenericReceive+0x158>
    1adc:	0f b6       	in	r0, 0x3f	; 63
    1ade:	f8 94       	cli
    1ae0:	0f 92       	push	r0
    1ae2:	f8 01       	movw	r30, r16
    1ae4:	82 8d       	ldd	r24, Z+26	; 0x1a
    1ae6:	0f 90       	pop	r0
    1ae8:	0f be       	out	0x3f, r0	; 63
    1aea:	81 11       	cpse	r24, r1
    1aec:	1c c0       	rjmp	.+56     	; 0x1b26 <xQueueGenericReceive+0x14c>
    1aee:	80 81       	ld	r24, Z
    1af0:	91 81       	ldd	r25, Z+1	; 0x01
    1af2:	89 2b       	or	r24, r25
    1af4:	49 f4       	brne	.+18     	; 0x1b08 <xQueueGenericReceive+0x12e>
    1af6:	0f b6       	in	r0, 0x3f	; 63
    1af8:	f8 94       	cli
    1afa:	0f 92       	push	r0
    1afc:	82 81       	ldd	r24, Z+2	; 0x02
    1afe:	93 81       	ldd	r25, Z+3	; 0x03
    1b00:	0e 94 0c 12 	call	0x2418	; 0x2418 <vTaskPriorityInherit>
    1b04:	0f 90       	pop	r0
    1b06:	0f be       	out	0x3f, r0	; 63
    1b08:	6c 81       	ldd	r22, Y+4	; 0x04
    1b0a:	7d 81       	ldd	r23, Y+5	; 0x05
    1b0c:	c6 01       	movw	r24, r12
    1b0e:	0e 94 71 11 	call	0x22e2	; 0x22e2 <vTaskPlaceOnEventList>
    1b12:	c8 01       	movw	r24, r16
    1b14:	0e 94 3d 0b 	call	0x167a	; 0x167a <prvUnlockQueue>
    1b18:	0e 94 1c 10 	call	0x2038	; 0x2038 <xTaskResumeAll>
    1b1c:	81 11       	cpse	r24, r1
    1b1e:	7a cf       	rjmp	.-268    	; 0x1a14 <xQueueGenericReceive+0x3a>
    1b20:	0e 94 0d 08 	call	0x101a	; 0x101a <vPortYield>
    1b24:	77 cf       	rjmp	.-274    	; 0x1a14 <xQueueGenericReceive+0x3a>
    1b26:	c8 01       	movw	r24, r16
    1b28:	0e 94 3d 0b 	call	0x167a	; 0x167a <prvUnlockQueue>
    1b2c:	0e 94 1c 10 	call	0x2038	; 0x2038 <xTaskResumeAll>
    1b30:	71 cf       	rjmp	.-286    	; 0x1a14 <xQueueGenericReceive+0x3a>
    1b32:	c8 01       	movw	r24, r16
    1b34:	0e 94 3d 0b 	call	0x167a	; 0x167a <prvUnlockQueue>
    1b38:	0e 94 1c 10 	call	0x2038	; 0x2038 <xTaskResumeAll>
    1b3c:	0f b6       	in	r0, 0x3f	; 63
    1b3e:	f8 94       	cli
    1b40:	0f 92       	push	r0
    1b42:	f8 01       	movw	r30, r16
    1b44:	82 8d       	ldd	r24, Z+26	; 0x1a
    1b46:	0f 90       	pop	r0
    1b48:	0f be       	out	0x3f, r0	; 63
    1b4a:	81 11       	cpse	r24, r1
    1b4c:	63 cf       	rjmp	.-314    	; 0x1a14 <xQueueGenericReceive+0x3a>
    1b4e:	0f 90       	pop	r0
    1b50:	0f 90       	pop	r0
    1b52:	0f 90       	pop	r0
    1b54:	0f 90       	pop	r0
    1b56:	0f 90       	pop	r0
    1b58:	df 91       	pop	r29
    1b5a:	cf 91       	pop	r28
    1b5c:	1f 91       	pop	r17
    1b5e:	0f 91       	pop	r16
    1b60:	ff 90       	pop	r15
    1b62:	ef 90       	pop	r14
    1b64:	df 90       	pop	r13
    1b66:	cf 90       	pop	r12
    1b68:	bf 90       	pop	r11
    1b6a:	af 90       	pop	r10
    1b6c:	9f 90       	pop	r9
    1b6e:	8f 90       	pop	r8
    1b70:	08 95       	ret

00001b72 <prvResetNextTaskUnblockTime>:
    1b72:	e0 91 ea 05 	lds	r30, 0x05EA	; 0x8005ea <pxDelayedTaskList>
    1b76:	f0 91 eb 05 	lds	r31, 0x05EB	; 0x8005eb <pxDelayedTaskList+0x1>
    1b7a:	80 81       	ld	r24, Z
    1b7c:	81 11       	cpse	r24, r1
    1b7e:	07 c0       	rjmp	.+14     	; 0x1b8e <prvResetNextTaskUnblockTime+0x1c>
    1b80:	8f ef       	ldi	r24, 0xFF	; 255
    1b82:	9f ef       	ldi	r25, 0xFF	; 255
    1b84:	90 93 cb 05 	sts	0x05CB, r25	; 0x8005cb <xNextTaskUnblockTime+0x1>
    1b88:	80 93 ca 05 	sts	0x05CA, r24	; 0x8005ca <xNextTaskUnblockTime>
    1b8c:	08 95       	ret
    1b8e:	e0 91 ea 05 	lds	r30, 0x05EA	; 0x8005ea <pxDelayedTaskList>
    1b92:	f0 91 eb 05 	lds	r31, 0x05EB	; 0x8005eb <pxDelayedTaskList+0x1>
    1b96:	05 80       	ldd	r0, Z+5	; 0x05
    1b98:	f6 81       	ldd	r31, Z+6	; 0x06
    1b9a:	e0 2d       	mov	r30, r0
    1b9c:	06 80       	ldd	r0, Z+6	; 0x06
    1b9e:	f7 81       	ldd	r31, Z+7	; 0x07
    1ba0:	e0 2d       	mov	r30, r0
    1ba2:	82 81       	ldd	r24, Z+2	; 0x02
    1ba4:	93 81       	ldd	r25, Z+3	; 0x03
    1ba6:	90 93 cb 05 	sts	0x05CB, r25	; 0x8005cb <xNextTaskUnblockTime+0x1>
    1baa:	80 93 ca 05 	sts	0x05CA, r24	; 0x8005ca <xNextTaskUnblockTime>
    1bae:	08 95       	ret

00001bb0 <prvAddCurrentTaskToDelayedList>:
    1bb0:	0f 93       	push	r16
    1bb2:	1f 93       	push	r17
    1bb4:	cf 93       	push	r28
    1bb6:	df 93       	push	r29
    1bb8:	ec 01       	movw	r28, r24
    1bba:	00 91 d2 05 	lds	r16, 0x05D2	; 0x8005d2 <xTickCount>
    1bbe:	10 91 d3 05 	lds	r17, 0x05D3	; 0x8005d3 <xTickCount+0x1>
    1bc2:	80 91 22 06 	lds	r24, 0x0622	; 0x800622 <pxCurrentTCB>
    1bc6:	90 91 23 06 	lds	r25, 0x0623	; 0x800623 <pxCurrentTCB+0x1>
    1bca:	02 96       	adiw	r24, 0x02	; 2
    1bcc:	0e 94 41 07 	call	0xe82	; 0xe82 <uxListRemove>
    1bd0:	c0 0f       	add	r28, r16
    1bd2:	d1 1f       	adc	r29, r17
    1bd4:	e0 91 22 06 	lds	r30, 0x0622	; 0x800622 <pxCurrentTCB>
    1bd8:	f0 91 23 06 	lds	r31, 0x0623	; 0x800623 <pxCurrentTCB+0x1>
    1bdc:	d3 83       	std	Z+3, r29	; 0x03
    1bde:	c2 83       	std	Z+2, r28	; 0x02
    1be0:	c0 17       	cp	r28, r16
    1be2:	d1 07       	cpc	r29, r17
    1be4:	68 f4       	brcc	.+26     	; 0x1c00 <prvAddCurrentTaskToDelayedList+0x50>
    1be6:	60 91 22 06 	lds	r22, 0x0622	; 0x800622 <pxCurrentTCB>
    1bea:	70 91 23 06 	lds	r23, 0x0623	; 0x800623 <pxCurrentTCB+0x1>
    1bee:	80 91 e8 05 	lds	r24, 0x05E8	; 0x8005e8 <pxOverflowDelayedTaskList>
    1bf2:	90 91 e9 05 	lds	r25, 0x05E9	; 0x8005e9 <pxOverflowDelayedTaskList+0x1>
    1bf6:	6e 5f       	subi	r22, 0xFE	; 254
    1bf8:	7f 4f       	sbci	r23, 0xFF	; 255
    1bfa:	0e 94 10 07 	call	0xe20	; 0xe20 <vListInsert>
    1bfe:	17 c0       	rjmp	.+46     	; 0x1c2e <prvAddCurrentTaskToDelayedList+0x7e>
    1c00:	60 91 22 06 	lds	r22, 0x0622	; 0x800622 <pxCurrentTCB>
    1c04:	70 91 23 06 	lds	r23, 0x0623	; 0x800623 <pxCurrentTCB+0x1>
    1c08:	80 91 ea 05 	lds	r24, 0x05EA	; 0x8005ea <pxDelayedTaskList>
    1c0c:	90 91 eb 05 	lds	r25, 0x05EB	; 0x8005eb <pxDelayedTaskList+0x1>
    1c10:	6e 5f       	subi	r22, 0xFE	; 254
    1c12:	7f 4f       	sbci	r23, 0xFF	; 255
    1c14:	0e 94 10 07 	call	0xe20	; 0xe20 <vListInsert>
    1c18:	80 91 ca 05 	lds	r24, 0x05CA	; 0x8005ca <xNextTaskUnblockTime>
    1c1c:	90 91 cb 05 	lds	r25, 0x05CB	; 0x8005cb <xNextTaskUnblockTime+0x1>
    1c20:	c8 17       	cp	r28, r24
    1c22:	d9 07       	cpc	r29, r25
    1c24:	20 f4       	brcc	.+8      	; 0x1c2e <prvAddCurrentTaskToDelayedList+0x7e>
    1c26:	d0 93 cb 05 	sts	0x05CB, r29	; 0x8005cb <xNextTaskUnblockTime+0x1>
    1c2a:	c0 93 ca 05 	sts	0x05CA, r28	; 0x8005ca <xNextTaskUnblockTime>
    1c2e:	df 91       	pop	r29
    1c30:	cf 91       	pop	r28
    1c32:	1f 91       	pop	r17
    1c34:	0f 91       	pop	r16
    1c36:	08 95       	ret

00001c38 <xTaskCreate>:
    1c38:	4f 92       	push	r4
    1c3a:	5f 92       	push	r5
    1c3c:	6f 92       	push	r6
    1c3e:	7f 92       	push	r7
    1c40:	8f 92       	push	r8
    1c42:	9f 92       	push	r9
    1c44:	af 92       	push	r10
    1c46:	bf 92       	push	r11
    1c48:	cf 92       	push	r12
    1c4a:	df 92       	push	r13
    1c4c:	ef 92       	push	r14
    1c4e:	ff 92       	push	r15
    1c50:	0f 93       	push	r16
    1c52:	cf 93       	push	r28
    1c54:	df 93       	push	r29
    1c56:	4c 01       	movw	r8, r24
    1c58:	6b 01       	movw	r12, r22
    1c5a:	5a 01       	movw	r10, r20
    1c5c:	29 01       	movw	r4, r18
    1c5e:	ca 01       	movw	r24, r20
    1c60:	0e 94 c5 08 	call	0x118a	; 0x118a <pvPortMalloc>
    1c64:	3c 01       	movw	r6, r24
    1c66:	89 2b       	or	r24, r25
    1c68:	09 f4       	brne	.+2      	; 0x1c6c <xTaskCreate+0x34>
    1c6a:	ea c0       	rjmp	.+468    	; 0x1e40 <xTaskCreate+0x208>
    1c6c:	8c e2       	ldi	r24, 0x2C	; 44
    1c6e:	90 e0       	ldi	r25, 0x00	; 0
    1c70:	0e 94 c5 08 	call	0x118a	; 0x118a <pvPortMalloc>
    1c74:	ec 01       	movw	r28, r24
    1c76:	89 2b       	or	r24, r25
    1c78:	b1 f0       	breq	.+44     	; 0x1ca6 <xTaskCreate+0x6e>
    1c7a:	78 8e       	std	Y+24, r7	; 0x18
    1c7c:	6f 8a       	std	Y+23, r6	; 0x17
    1c7e:	a5 01       	movw	r20, r10
    1c80:	65 ea       	ldi	r22, 0xA5	; 165
    1c82:	70 e0       	ldi	r23, 0x00	; 0
    1c84:	c3 01       	movw	r24, r6
    1c86:	0e 94 90 14 	call	0x2920	; 0x2920 <memset>
    1c8a:	81 e0       	ldi	r24, 0x01	; 1
    1c8c:	a8 1a       	sub	r10, r24
    1c8e:	b1 08       	sbc	r11, r1
    1c90:	8f 89       	ldd	r24, Y+23	; 0x17
    1c92:	98 8d       	ldd	r25, Y+24	; 0x18
    1c94:	a8 0e       	add	r10, r24
    1c96:	b9 1e       	adc	r11, r25
    1c98:	d6 01       	movw	r26, r12
    1c9a:	8c 91       	ld	r24, X
    1c9c:	89 8f       	std	Y+25, r24	; 0x19
    1c9e:	8c 91       	ld	r24, X
    1ca0:	81 11       	cpse	r24, r1
    1ca2:	05 c0       	rjmp	.+10     	; 0x1cae <xTaskCreate+0x76>
    1ca4:	18 c0       	rjmp	.+48     	; 0x1cd6 <xTaskCreate+0x9e>
    1ca6:	c3 01       	movw	r24, r6
    1ca8:	0e 94 fa 08 	call	0x11f4	; 0x11f4 <vPortFree>
    1cac:	c9 c0       	rjmp	.+402    	; 0x1e40 <xTaskCreate+0x208>
    1cae:	ae 01       	movw	r20, r28
    1cb0:	46 5e       	subi	r20, 0xE6	; 230
    1cb2:	5f 4f       	sbci	r21, 0xFF	; 255
    1cb4:	f6 01       	movw	r30, r12
    1cb6:	31 96       	adiw	r30, 0x01	; 1
    1cb8:	b8 e0       	ldi	r27, 0x08	; 8
    1cba:	cb 0e       	add	r12, r27
    1cbc:	d1 1c       	adc	r13, r1
    1cbe:	cf 01       	movw	r24, r30
    1cc0:	21 91       	ld	r18, Z+
    1cc2:	da 01       	movw	r26, r20
    1cc4:	2d 93       	st	X+, r18
    1cc6:	ad 01       	movw	r20, r26
    1cc8:	dc 01       	movw	r26, r24
    1cca:	8c 91       	ld	r24, X
    1ccc:	88 23       	and	r24, r24
    1cce:	19 f0       	breq	.+6      	; 0x1cd6 <xTaskCreate+0x9e>
    1cd0:	ec 15       	cp	r30, r12
    1cd2:	fd 05       	cpc	r31, r13
    1cd4:	a1 f7       	brne	.-24     	; 0x1cbe <xTaskCreate+0x86>
    1cd6:	18 a2       	std	Y+32, r1	; 0x20
    1cd8:	04 30       	cpi	r16, 0x04	; 4
    1cda:	08 f0       	brcs	.+2      	; 0x1cde <xTaskCreate+0xa6>
    1cdc:	03 e0       	ldi	r16, 0x03	; 3
    1cde:	0e 8b       	std	Y+22, r16	; 0x16
    1ce0:	0b a3       	std	Y+35, r16	; 0x23
    1ce2:	1c a2       	std	Y+36, r1	; 0x24
    1ce4:	6e 01       	movw	r12, r28
    1ce6:	b2 e0       	ldi	r27, 0x02	; 2
    1ce8:	cb 0e       	add	r12, r27
    1cea:	d1 1c       	adc	r13, r1
    1cec:	c6 01       	movw	r24, r12
    1cee:	0e 94 eb 06 	call	0xdd6	; 0xdd6 <vListInitialiseItem>
    1cf2:	ce 01       	movw	r24, r28
    1cf4:	0c 96       	adiw	r24, 0x0c	; 12
    1cf6:	0e 94 eb 06 	call	0xdd6	; 0xdd6 <vListInitialiseItem>
    1cfa:	d9 87       	std	Y+9, r29	; 0x09
    1cfc:	c8 87       	std	Y+8, r28	; 0x08
    1cfe:	84 e0       	ldi	r24, 0x04	; 4
    1d00:	90 e0       	ldi	r25, 0x00	; 0
    1d02:	80 1b       	sub	r24, r16
    1d04:	91 09       	sbc	r25, r1
    1d06:	9d 87       	std	Y+13, r25	; 0x0d
    1d08:	8c 87       	std	Y+12, r24	; 0x0c
    1d0a:	db 8b       	std	Y+19, r29	; 0x13
    1d0c:	ca 8b       	std	Y+18, r28	; 0x12
    1d0e:	1e a2       	std	Y+38, r1	; 0x26
    1d10:	1d a2       	std	Y+37, r1	; 0x25
    1d12:	1f a2       	std	Y+39, r1	; 0x27
    1d14:	18 a6       	std	Y+40, r1	; 0x28
    1d16:	19 a6       	std	Y+41, r1	; 0x29
    1d18:	1a a6       	std	Y+42, r1	; 0x2a
    1d1a:	1b a6       	std	Y+43, r1	; 0x2b
    1d1c:	a2 01       	movw	r20, r4
    1d1e:	b4 01       	movw	r22, r8
    1d20:	c5 01       	movw	r24, r10
    1d22:	0e 94 67 07 	call	0xece	; 0xece <pxPortInitialiseStack>
    1d26:	99 83       	std	Y+1, r25	; 0x01
    1d28:	88 83       	st	Y, r24
    1d2a:	e1 14       	cp	r14, r1
    1d2c:	f1 04       	cpc	r15, r1
    1d2e:	19 f0       	breq	.+6      	; 0x1d36 <xTaskCreate+0xfe>
    1d30:	f7 01       	movw	r30, r14
    1d32:	d1 83       	std	Z+1, r29	; 0x01
    1d34:	c0 83       	st	Z, r28
    1d36:	0f b6       	in	r0, 0x3f	; 63
    1d38:	f8 94       	cli
    1d3a:	0f 92       	push	r0
    1d3c:	80 91 d4 05 	lds	r24, 0x05D4	; 0x8005d4 <uxCurrentNumberOfTasks>
    1d40:	8f 5f       	subi	r24, 0xFF	; 255
    1d42:	80 93 d4 05 	sts	0x05D4, r24	; 0x8005d4 <uxCurrentNumberOfTasks>
    1d46:	80 91 22 06 	lds	r24, 0x0622	; 0x800622 <pxCurrentTCB>
    1d4a:	90 91 23 06 	lds	r25, 0x0623	; 0x800623 <pxCurrentTCB+0x1>
    1d4e:	89 2b       	or	r24, r25
    1d50:	a9 f5       	brne	.+106    	; 0x1dbc <xTaskCreate+0x184>
    1d52:	d0 93 23 06 	sts	0x0623, r29	; 0x800623 <pxCurrentTCB+0x1>
    1d56:	c0 93 22 06 	sts	0x0622, r28	; 0x800622 <pxCurrentTCB>
    1d5a:	80 91 d4 05 	lds	r24, 0x05D4	; 0x8005d4 <uxCurrentNumberOfTasks>
    1d5e:	81 30       	cpi	r24, 0x01	; 1
    1d60:	e9 f5       	brne	.+122    	; 0x1ddc <xTaskCreate+0x1a4>
    1d62:	8e ef       	ldi	r24, 0xFE	; 254
    1d64:	95 e0       	ldi	r25, 0x05	; 5
    1d66:	0e 94 dd 06 	call	0xdba	; 0xdba <vListInitialise>
    1d6a:	87 e0       	ldi	r24, 0x07	; 7
    1d6c:	96 e0       	ldi	r25, 0x06	; 6
    1d6e:	0e 94 dd 06 	call	0xdba	; 0xdba <vListInitialise>
    1d72:	80 e1       	ldi	r24, 0x10	; 16
    1d74:	96 e0       	ldi	r25, 0x06	; 6
    1d76:	0e 94 dd 06 	call	0xdba	; 0xdba <vListInitialise>
    1d7a:	89 e1       	ldi	r24, 0x19	; 25
    1d7c:	96 e0       	ldi	r25, 0x06	; 6
    1d7e:	0e 94 dd 06 	call	0xdba	; 0xdba <vListInitialise>
    1d82:	85 ef       	ldi	r24, 0xF5	; 245
    1d84:	95 e0       	ldi	r25, 0x05	; 5
    1d86:	0e 94 dd 06 	call	0xdba	; 0xdba <vListInitialise>
    1d8a:	8c ee       	ldi	r24, 0xEC	; 236
    1d8c:	95 e0       	ldi	r25, 0x05	; 5
    1d8e:	0e 94 dd 06 	call	0xdba	; 0xdba <vListInitialise>
    1d92:	8f ed       	ldi	r24, 0xDF	; 223
    1d94:	95 e0       	ldi	r25, 0x05	; 5
    1d96:	0e 94 dd 06 	call	0xdba	; 0xdba <vListInitialise>
    1d9a:	86 ed       	ldi	r24, 0xD6	; 214
    1d9c:	95 e0       	ldi	r25, 0x05	; 5
    1d9e:	0e 94 dd 06 	call	0xdba	; 0xdba <vListInitialise>
    1da2:	85 ef       	ldi	r24, 0xF5	; 245
    1da4:	95 e0       	ldi	r25, 0x05	; 5
    1da6:	90 93 eb 05 	sts	0x05EB, r25	; 0x8005eb <pxDelayedTaskList+0x1>
    1daa:	80 93 ea 05 	sts	0x05EA, r24	; 0x8005ea <pxDelayedTaskList>
    1dae:	8c ee       	ldi	r24, 0xEC	; 236
    1db0:	95 e0       	ldi	r25, 0x05	; 5
    1db2:	90 93 e9 05 	sts	0x05E9, r25	; 0x8005e9 <pxOverflowDelayedTaskList+0x1>
    1db6:	80 93 e8 05 	sts	0x05E8, r24	; 0x8005e8 <pxOverflowDelayedTaskList>
    1dba:	10 c0       	rjmp	.+32     	; 0x1ddc <xTaskCreate+0x1a4>
    1dbc:	80 91 d0 05 	lds	r24, 0x05D0	; 0x8005d0 <xSchedulerRunning>
    1dc0:	81 11       	cpse	r24, r1
    1dc2:	0c c0       	rjmp	.+24     	; 0x1ddc <xTaskCreate+0x1a4>
    1dc4:	e0 91 22 06 	lds	r30, 0x0622	; 0x800622 <pxCurrentTCB>
    1dc8:	f0 91 23 06 	lds	r31, 0x0623	; 0x800623 <pxCurrentTCB+0x1>
    1dcc:	96 89       	ldd	r25, Z+22	; 0x16
    1dce:	8e 89       	ldd	r24, Y+22	; 0x16
    1dd0:	89 17       	cp	r24, r25
    1dd2:	20 f0       	brcs	.+8      	; 0x1ddc <xTaskCreate+0x1a4>
    1dd4:	d0 93 23 06 	sts	0x0623, r29	; 0x800623 <pxCurrentTCB+0x1>
    1dd8:	c0 93 22 06 	sts	0x0622, r28	; 0x800622 <pxCurrentTCB>
    1ddc:	80 91 cc 05 	lds	r24, 0x05CC	; 0x8005cc <uxTaskNumber>
    1de0:	8f 5f       	subi	r24, 0xFF	; 255
    1de2:	80 93 cc 05 	sts	0x05CC, r24	; 0x8005cc <uxTaskNumber>
    1de6:	89 a3       	std	Y+33, r24	; 0x21
    1de8:	8e 89       	ldd	r24, Y+22	; 0x16
    1dea:	90 91 d1 05 	lds	r25, 0x05D1	; 0x8005d1 <uxTopReadyPriority>
    1dee:	98 17       	cp	r25, r24
    1df0:	10 f4       	brcc	.+4      	; 0x1df6 <xTaskCreate+0x1be>
    1df2:	80 93 d1 05 	sts	0x05D1, r24	; 0x8005d1 <uxTopReadyPriority>
    1df6:	90 e0       	ldi	r25, 0x00	; 0
    1df8:	9c 01       	movw	r18, r24
    1dfa:	22 0f       	add	r18, r18
    1dfc:	33 1f       	adc	r19, r19
    1dfe:	22 0f       	add	r18, r18
    1e00:	33 1f       	adc	r19, r19
    1e02:	22 0f       	add	r18, r18
    1e04:	33 1f       	adc	r19, r19
    1e06:	82 0f       	add	r24, r18
    1e08:	93 1f       	adc	r25, r19
    1e0a:	b6 01       	movw	r22, r12
    1e0c:	82 50       	subi	r24, 0x02	; 2
    1e0e:	9a 4f       	sbci	r25, 0xFA	; 250
    1e10:	0e 94 ef 06 	call	0xdde	; 0xdde <vListInsertEnd>
    1e14:	0f 90       	pop	r0
    1e16:	0f be       	out	0x3f, r0	; 63
    1e18:	80 91 d0 05 	lds	r24, 0x05D0	; 0x8005d0 <xSchedulerRunning>
    1e1c:	88 23       	and	r24, r24
    1e1e:	61 f0       	breq	.+24     	; 0x1e38 <xTaskCreate+0x200>
    1e20:	e0 91 22 06 	lds	r30, 0x0622	; 0x800622 <pxCurrentTCB>
    1e24:	f0 91 23 06 	lds	r31, 0x0623	; 0x800623 <pxCurrentTCB+0x1>
    1e28:	96 89       	ldd	r25, Z+22	; 0x16
    1e2a:	8e 89       	ldd	r24, Y+22	; 0x16
    1e2c:	98 17       	cp	r25, r24
    1e2e:	30 f4       	brcc	.+12     	; 0x1e3c <xTaskCreate+0x204>
    1e30:	0e 94 0d 08 	call	0x101a	; 0x101a <vPortYield>
    1e34:	81 e0       	ldi	r24, 0x01	; 1
    1e36:	05 c0       	rjmp	.+10     	; 0x1e42 <xTaskCreate+0x20a>
    1e38:	81 e0       	ldi	r24, 0x01	; 1
    1e3a:	03 c0       	rjmp	.+6      	; 0x1e42 <xTaskCreate+0x20a>
    1e3c:	81 e0       	ldi	r24, 0x01	; 1
    1e3e:	01 c0       	rjmp	.+2      	; 0x1e42 <xTaskCreate+0x20a>
    1e40:	8f ef       	ldi	r24, 0xFF	; 255
    1e42:	df 91       	pop	r29
    1e44:	cf 91       	pop	r28
    1e46:	0f 91       	pop	r16
    1e48:	ff 90       	pop	r15
    1e4a:	ef 90       	pop	r14
    1e4c:	df 90       	pop	r13
    1e4e:	cf 90       	pop	r12
    1e50:	bf 90       	pop	r11
    1e52:	af 90       	pop	r10
    1e54:	9f 90       	pop	r9
    1e56:	8f 90       	pop	r8
    1e58:	7f 90       	pop	r7
    1e5a:	6f 90       	pop	r6
    1e5c:	5f 90       	pop	r5
    1e5e:	4f 90       	pop	r4
    1e60:	08 95       	ret

00001e62 <vTaskStartScheduler>:
    1e62:	ef 92       	push	r14
    1e64:	ff 92       	push	r15
    1e66:	0f 93       	push	r16
    1e68:	0f 2e       	mov	r0, r31
    1e6a:	f8 ec       	ldi	r31, 0xC8	; 200
    1e6c:	ef 2e       	mov	r14, r31
    1e6e:	f5 e0       	ldi	r31, 0x05	; 5
    1e70:	ff 2e       	mov	r15, r31
    1e72:	f0 2d       	mov	r31, r0
    1e74:	00 e0       	ldi	r16, 0x00	; 0
    1e76:	20 e0       	ldi	r18, 0x00	; 0
    1e78:	30 e0       	ldi	r19, 0x00	; 0
    1e7a:	45 e5       	ldi	r20, 0x55	; 85
    1e7c:	50 e0       	ldi	r21, 0x00	; 0
    1e7e:	60 e5       	ldi	r22, 0x50	; 80
    1e80:	71 e0       	ldi	r23, 0x01	; 1
    1e82:	8f ea       	ldi	r24, 0xAF	; 175
    1e84:	90 e1       	ldi	r25, 0x10	; 16
    1e86:	0e 94 1c 0e 	call	0x1c38	; 0x1c38 <xTaskCreate>
    1e8a:	81 30       	cpi	r24, 0x01	; 1
    1e8c:	81 f4       	brne	.+32     	; 0x1eae <vTaskStartScheduler+0x4c>
    1e8e:	f8 94       	cli
    1e90:	8f ef       	ldi	r24, 0xFF	; 255
    1e92:	9f ef       	ldi	r25, 0xFF	; 255
    1e94:	90 93 cb 05 	sts	0x05CB, r25	; 0x8005cb <xNextTaskUnblockTime+0x1>
    1e98:	80 93 ca 05 	sts	0x05CA, r24	; 0x8005ca <xNextTaskUnblockTime>
    1e9c:	81 e0       	ldi	r24, 0x01	; 1
    1e9e:	80 93 d0 05 	sts	0x05D0, r24	; 0x8005d0 <xSchedulerRunning>
    1ea2:	10 92 d3 05 	sts	0x05D3, r1	; 0x8005d3 <xTickCount+0x1>
    1ea6:	10 92 d2 05 	sts	0x05D2, r1	; 0x8005d2 <xTickCount>
    1eaa:	0e 94 d3 07 	call	0xfa6	; 0xfa6 <xPortStartScheduler>
    1eae:	0f 91       	pop	r16
    1eb0:	ff 90       	pop	r15
    1eb2:	ef 90       	pop	r14
    1eb4:	08 95       	ret

00001eb6 <vTaskSuspendAll>:
    1eb6:	80 91 c7 05 	lds	r24, 0x05C7	; 0x8005c7 <uxSchedulerSuspended>
    1eba:	8f 5f       	subi	r24, 0xFF	; 255
    1ebc:	80 93 c7 05 	sts	0x05C7, r24	; 0x8005c7 <uxSchedulerSuspended>
    1ec0:	08 95       	ret

00001ec2 <xTaskIncrementTick>:
    1ec2:	cf 92       	push	r12
    1ec4:	df 92       	push	r13
    1ec6:	ef 92       	push	r14
    1ec8:	ff 92       	push	r15
    1eca:	0f 93       	push	r16
    1ecc:	1f 93       	push	r17
    1ece:	cf 93       	push	r28
    1ed0:	df 93       	push	r29
    1ed2:	80 91 c7 05 	lds	r24, 0x05C7	; 0x8005c7 <uxSchedulerSuspended>
    1ed6:	81 11       	cpse	r24, r1
    1ed8:	99 c0       	rjmp	.+306    	; 0x200c <xTaskIncrementTick+0x14a>
    1eda:	e0 90 d2 05 	lds	r14, 0x05D2	; 0x8005d2 <xTickCount>
    1ede:	f0 90 d3 05 	lds	r15, 0x05D3	; 0x8005d3 <xTickCount+0x1>
    1ee2:	8f ef       	ldi	r24, 0xFF	; 255
    1ee4:	e8 1a       	sub	r14, r24
    1ee6:	f8 0a       	sbc	r15, r24
    1ee8:	f0 92 d3 05 	sts	0x05D3, r15	; 0x8005d3 <xTickCount+0x1>
    1eec:	e0 92 d2 05 	sts	0x05D2, r14	; 0x8005d2 <xTickCount>
    1ef0:	e1 14       	cp	r14, r1
    1ef2:	f1 04       	cpc	r15, r1
    1ef4:	b9 f4       	brne	.+46     	; 0x1f24 <xTaskIncrementTick+0x62>
    1ef6:	80 91 ea 05 	lds	r24, 0x05EA	; 0x8005ea <pxDelayedTaskList>
    1efa:	90 91 eb 05 	lds	r25, 0x05EB	; 0x8005eb <pxDelayedTaskList+0x1>
    1efe:	20 91 e8 05 	lds	r18, 0x05E8	; 0x8005e8 <pxOverflowDelayedTaskList>
    1f02:	30 91 e9 05 	lds	r19, 0x05E9	; 0x8005e9 <pxOverflowDelayedTaskList+0x1>
    1f06:	30 93 eb 05 	sts	0x05EB, r19	; 0x8005eb <pxDelayedTaskList+0x1>
    1f0a:	20 93 ea 05 	sts	0x05EA, r18	; 0x8005ea <pxDelayedTaskList>
    1f0e:	90 93 e9 05 	sts	0x05E9, r25	; 0x8005e9 <pxOverflowDelayedTaskList+0x1>
    1f12:	80 93 e8 05 	sts	0x05E8, r24	; 0x8005e8 <pxOverflowDelayedTaskList>
    1f16:	80 91 cd 05 	lds	r24, 0x05CD	; 0x8005cd <xNumOfOverflows>
    1f1a:	8f 5f       	subi	r24, 0xFF	; 255
    1f1c:	80 93 cd 05 	sts	0x05CD, r24	; 0x8005cd <xNumOfOverflows>
    1f20:	0e 94 b9 0d 	call	0x1b72	; 0x1b72 <prvResetNextTaskUnblockTime>
    1f24:	80 91 ca 05 	lds	r24, 0x05CA	; 0x8005ca <xNextTaskUnblockTime>
    1f28:	90 91 cb 05 	lds	r25, 0x05CB	; 0x8005cb <xNextTaskUnblockTime+0x1>
    1f2c:	e8 16       	cp	r14, r24
    1f2e:	f9 06       	cpc	r15, r25
    1f30:	10 f4       	brcc	.+4      	; 0x1f36 <xTaskIncrementTick+0x74>
    1f32:	d1 2c       	mov	r13, r1
    1f34:	53 c0       	rjmp	.+166    	; 0x1fdc <xTaskIncrementTick+0x11a>
    1f36:	d1 2c       	mov	r13, r1
    1f38:	cc 24       	eor	r12, r12
    1f3a:	c3 94       	inc	r12
    1f3c:	e0 91 ea 05 	lds	r30, 0x05EA	; 0x8005ea <pxDelayedTaskList>
    1f40:	f0 91 eb 05 	lds	r31, 0x05EB	; 0x8005eb <pxDelayedTaskList+0x1>
    1f44:	80 81       	ld	r24, Z
    1f46:	81 11       	cpse	r24, r1
    1f48:	07 c0       	rjmp	.+14     	; 0x1f58 <xTaskIncrementTick+0x96>
    1f4a:	8f ef       	ldi	r24, 0xFF	; 255
    1f4c:	9f ef       	ldi	r25, 0xFF	; 255
    1f4e:	90 93 cb 05 	sts	0x05CB, r25	; 0x8005cb <xNextTaskUnblockTime+0x1>
    1f52:	80 93 ca 05 	sts	0x05CA, r24	; 0x8005ca <xNextTaskUnblockTime>
    1f56:	42 c0       	rjmp	.+132    	; 0x1fdc <xTaskIncrementTick+0x11a>
    1f58:	e0 91 ea 05 	lds	r30, 0x05EA	; 0x8005ea <pxDelayedTaskList>
    1f5c:	f0 91 eb 05 	lds	r31, 0x05EB	; 0x8005eb <pxDelayedTaskList+0x1>
    1f60:	05 80       	ldd	r0, Z+5	; 0x05
    1f62:	f6 81       	ldd	r31, Z+6	; 0x06
    1f64:	e0 2d       	mov	r30, r0
    1f66:	c6 81       	ldd	r28, Z+6	; 0x06
    1f68:	d7 81       	ldd	r29, Z+7	; 0x07
    1f6a:	8a 81       	ldd	r24, Y+2	; 0x02
    1f6c:	9b 81       	ldd	r25, Y+3	; 0x03
    1f6e:	e8 16       	cp	r14, r24
    1f70:	f9 06       	cpc	r15, r25
    1f72:	28 f4       	brcc	.+10     	; 0x1f7e <xTaskIncrementTick+0xbc>
    1f74:	90 93 cb 05 	sts	0x05CB, r25	; 0x8005cb <xNextTaskUnblockTime+0x1>
    1f78:	80 93 ca 05 	sts	0x05CA, r24	; 0x8005ca <xNextTaskUnblockTime>
    1f7c:	2f c0       	rjmp	.+94     	; 0x1fdc <xTaskIncrementTick+0x11a>
    1f7e:	8e 01       	movw	r16, r28
    1f80:	0e 5f       	subi	r16, 0xFE	; 254
    1f82:	1f 4f       	sbci	r17, 0xFF	; 255
    1f84:	c8 01       	movw	r24, r16
    1f86:	0e 94 41 07 	call	0xe82	; 0xe82 <uxListRemove>
    1f8a:	8c 89       	ldd	r24, Y+20	; 0x14
    1f8c:	9d 89       	ldd	r25, Y+21	; 0x15
    1f8e:	89 2b       	or	r24, r25
    1f90:	21 f0       	breq	.+8      	; 0x1f9a <xTaskIncrementTick+0xd8>
    1f92:	ce 01       	movw	r24, r28
    1f94:	0c 96       	adiw	r24, 0x0c	; 12
    1f96:	0e 94 41 07 	call	0xe82	; 0xe82 <uxListRemove>
    1f9a:	8e 89       	ldd	r24, Y+22	; 0x16
    1f9c:	90 91 d1 05 	lds	r25, 0x05D1	; 0x8005d1 <uxTopReadyPriority>
    1fa0:	98 17       	cp	r25, r24
    1fa2:	10 f4       	brcc	.+4      	; 0x1fa8 <xTaskIncrementTick+0xe6>
    1fa4:	80 93 d1 05 	sts	0x05D1, r24	; 0x8005d1 <uxTopReadyPriority>
    1fa8:	90 e0       	ldi	r25, 0x00	; 0
    1faa:	9c 01       	movw	r18, r24
    1fac:	22 0f       	add	r18, r18
    1fae:	33 1f       	adc	r19, r19
    1fb0:	22 0f       	add	r18, r18
    1fb2:	33 1f       	adc	r19, r19
    1fb4:	22 0f       	add	r18, r18
    1fb6:	33 1f       	adc	r19, r19
    1fb8:	82 0f       	add	r24, r18
    1fba:	93 1f       	adc	r25, r19
    1fbc:	b8 01       	movw	r22, r16
    1fbe:	82 50       	subi	r24, 0x02	; 2
    1fc0:	9a 4f       	sbci	r25, 0xFA	; 250
    1fc2:	0e 94 ef 06 	call	0xdde	; 0xdde <vListInsertEnd>
    1fc6:	e0 91 22 06 	lds	r30, 0x0622	; 0x800622 <pxCurrentTCB>
    1fca:	f0 91 23 06 	lds	r31, 0x0623	; 0x800623 <pxCurrentTCB+0x1>
    1fce:	9e 89       	ldd	r25, Y+22	; 0x16
    1fd0:	86 89       	ldd	r24, Z+22	; 0x16
    1fd2:	98 17       	cp	r25, r24
    1fd4:	08 f4       	brcc	.+2      	; 0x1fd8 <xTaskIncrementTick+0x116>
    1fd6:	b2 cf       	rjmp	.-156    	; 0x1f3c <xTaskIncrementTick+0x7a>
    1fd8:	dc 2c       	mov	r13, r12
    1fda:	b0 cf       	rjmp	.-160    	; 0x1f3c <xTaskIncrementTick+0x7a>
    1fdc:	e0 91 22 06 	lds	r30, 0x0622	; 0x800622 <pxCurrentTCB>
    1fe0:	f0 91 23 06 	lds	r31, 0x0623	; 0x800623 <pxCurrentTCB+0x1>
    1fe4:	86 89       	ldd	r24, Z+22	; 0x16
    1fe6:	90 e0       	ldi	r25, 0x00	; 0
    1fe8:	fc 01       	movw	r30, r24
    1fea:	ee 0f       	add	r30, r30
    1fec:	ff 1f       	adc	r31, r31
    1fee:	ee 0f       	add	r30, r30
    1ff0:	ff 1f       	adc	r31, r31
    1ff2:	ee 0f       	add	r30, r30
    1ff4:	ff 1f       	adc	r31, r31
    1ff6:	8e 0f       	add	r24, r30
    1ff8:	9f 1f       	adc	r25, r31
    1ffa:	fc 01       	movw	r30, r24
    1ffc:	e2 50       	subi	r30, 0x02	; 2
    1ffe:	fa 4f       	sbci	r31, 0xFA	; 250
    2000:	80 81       	ld	r24, Z
    2002:	82 30       	cpi	r24, 0x02	; 2
    2004:	48 f0       	brcs	.+18     	; 0x2018 <xTaskIncrementTick+0x156>
    2006:	dd 24       	eor	r13, r13
    2008:	d3 94       	inc	r13
    200a:	06 c0       	rjmp	.+12     	; 0x2018 <xTaskIncrementTick+0x156>
    200c:	80 91 cf 05 	lds	r24, 0x05CF	; 0x8005cf <uxPendedTicks>
    2010:	8f 5f       	subi	r24, 0xFF	; 255
    2012:	80 93 cf 05 	sts	0x05CF, r24	; 0x8005cf <uxPendedTicks>
    2016:	d1 2c       	mov	r13, r1
    2018:	80 91 ce 05 	lds	r24, 0x05CE	; 0x8005ce <xYieldPending>
    201c:	88 23       	and	r24, r24
    201e:	11 f0       	breq	.+4      	; 0x2024 <xTaskIncrementTick+0x162>
    2020:	dd 24       	eor	r13, r13
    2022:	d3 94       	inc	r13
    2024:	8d 2d       	mov	r24, r13
    2026:	df 91       	pop	r29
    2028:	cf 91       	pop	r28
    202a:	1f 91       	pop	r17
    202c:	0f 91       	pop	r16
    202e:	ff 90       	pop	r15
    2030:	ef 90       	pop	r14
    2032:	df 90       	pop	r13
    2034:	cf 90       	pop	r12
    2036:	08 95       	ret

00002038 <xTaskResumeAll>:
    2038:	df 92       	push	r13
    203a:	ef 92       	push	r14
    203c:	ff 92       	push	r15
    203e:	0f 93       	push	r16
    2040:	1f 93       	push	r17
    2042:	cf 93       	push	r28
    2044:	df 93       	push	r29
    2046:	0f b6       	in	r0, 0x3f	; 63
    2048:	f8 94       	cli
    204a:	0f 92       	push	r0
    204c:	80 91 c7 05 	lds	r24, 0x05C7	; 0x8005c7 <uxSchedulerSuspended>
    2050:	81 50       	subi	r24, 0x01	; 1
    2052:	80 93 c7 05 	sts	0x05C7, r24	; 0x8005c7 <uxSchedulerSuspended>
    2056:	80 91 c7 05 	lds	r24, 0x05C7	; 0x8005c7 <uxSchedulerSuspended>
    205a:	81 11       	cpse	r24, r1
    205c:	5f c0       	rjmp	.+190    	; 0x211c <xTaskResumeAll+0xe4>
    205e:	80 91 d4 05 	lds	r24, 0x05D4	; 0x8005d4 <uxCurrentNumberOfTasks>
    2062:	81 11       	cpse	r24, r1
    2064:	33 c0       	rjmp	.+102    	; 0x20cc <xTaskResumeAll+0x94>
    2066:	5d c0       	rjmp	.+186    	; 0x2122 <xTaskResumeAll+0xea>
    2068:	d7 01       	movw	r26, r14
    206a:	15 96       	adiw	r26, 0x05	; 5
    206c:	ed 91       	ld	r30, X+
    206e:	fc 91       	ld	r31, X
    2070:	16 97       	sbiw	r26, 0x06	; 6
    2072:	c6 81       	ldd	r28, Z+6	; 0x06
    2074:	d7 81       	ldd	r29, Z+7	; 0x07
    2076:	ce 01       	movw	r24, r28
    2078:	0c 96       	adiw	r24, 0x0c	; 12
    207a:	0e 94 41 07 	call	0xe82	; 0xe82 <uxListRemove>
    207e:	8e 01       	movw	r16, r28
    2080:	0e 5f       	subi	r16, 0xFE	; 254
    2082:	1f 4f       	sbci	r17, 0xFF	; 255
    2084:	c8 01       	movw	r24, r16
    2086:	0e 94 41 07 	call	0xe82	; 0xe82 <uxListRemove>
    208a:	8e 89       	ldd	r24, Y+22	; 0x16
    208c:	90 91 d1 05 	lds	r25, 0x05D1	; 0x8005d1 <uxTopReadyPriority>
    2090:	98 17       	cp	r25, r24
    2092:	10 f4       	brcc	.+4      	; 0x2098 <xTaskResumeAll+0x60>
    2094:	80 93 d1 05 	sts	0x05D1, r24	; 0x8005d1 <uxTopReadyPriority>
    2098:	90 e0       	ldi	r25, 0x00	; 0
    209a:	9c 01       	movw	r18, r24
    209c:	22 0f       	add	r18, r18
    209e:	33 1f       	adc	r19, r19
    20a0:	22 0f       	add	r18, r18
    20a2:	33 1f       	adc	r19, r19
    20a4:	22 0f       	add	r18, r18
    20a6:	33 1f       	adc	r19, r19
    20a8:	82 0f       	add	r24, r18
    20aa:	93 1f       	adc	r25, r19
    20ac:	b8 01       	movw	r22, r16
    20ae:	82 50       	subi	r24, 0x02	; 2
    20b0:	9a 4f       	sbci	r25, 0xFA	; 250
    20b2:	0e 94 ef 06 	call	0xdde	; 0xdde <vListInsertEnd>
    20b6:	e0 91 22 06 	lds	r30, 0x0622	; 0x800622 <pxCurrentTCB>
    20ba:	f0 91 23 06 	lds	r31, 0x0623	; 0x800623 <pxCurrentTCB+0x1>
    20be:	9e 89       	ldd	r25, Y+22	; 0x16
    20c0:	86 89       	ldd	r24, Z+22	; 0x16
    20c2:	98 17       	cp	r25, r24
    20c4:	68 f0       	brcs	.+26     	; 0x20e0 <xTaskResumeAll+0xa8>
    20c6:	d0 92 ce 05 	sts	0x05CE, r13	; 0x8005ce <xYieldPending>
    20ca:	0a c0       	rjmp	.+20     	; 0x20e0 <xTaskResumeAll+0xa8>
    20cc:	c0 e0       	ldi	r28, 0x00	; 0
    20ce:	d0 e0       	ldi	r29, 0x00	; 0
    20d0:	0f 2e       	mov	r0, r31
    20d2:	ff ed       	ldi	r31, 0xDF	; 223
    20d4:	ef 2e       	mov	r14, r31
    20d6:	f5 e0       	ldi	r31, 0x05	; 5
    20d8:	ff 2e       	mov	r15, r31
    20da:	f0 2d       	mov	r31, r0
    20dc:	dd 24       	eor	r13, r13
    20de:	d3 94       	inc	r13
    20e0:	f7 01       	movw	r30, r14
    20e2:	80 81       	ld	r24, Z
    20e4:	81 11       	cpse	r24, r1
    20e6:	c0 cf       	rjmp	.-128    	; 0x2068 <xTaskResumeAll+0x30>
    20e8:	cd 2b       	or	r28, r29
    20ea:	11 f0       	breq	.+4      	; 0x20f0 <xTaskResumeAll+0xb8>
    20ec:	0e 94 b9 0d 	call	0x1b72	; 0x1b72 <prvResetNextTaskUnblockTime>
    20f0:	c0 91 cf 05 	lds	r28, 0x05CF	; 0x8005cf <uxPendedTicks>
    20f4:	cc 23       	and	r28, r28
    20f6:	51 f0       	breq	.+20     	; 0x210c <xTaskResumeAll+0xd4>
    20f8:	d1 e0       	ldi	r29, 0x01	; 1
    20fa:	0e 94 61 0f 	call	0x1ec2	; 0x1ec2 <xTaskIncrementTick>
    20fe:	81 11       	cpse	r24, r1
    2100:	d0 93 ce 05 	sts	0x05CE, r29	; 0x8005ce <xYieldPending>
    2104:	c1 50       	subi	r28, 0x01	; 1
    2106:	c9 f7       	brne	.-14     	; 0x20fa <xTaskResumeAll+0xc2>
    2108:	10 92 cf 05 	sts	0x05CF, r1	; 0x8005cf <uxPendedTicks>
    210c:	80 91 ce 05 	lds	r24, 0x05CE	; 0x8005ce <xYieldPending>
    2110:	88 23       	and	r24, r24
    2112:	31 f0       	breq	.+12     	; 0x2120 <xTaskResumeAll+0xe8>
    2114:	0e 94 0d 08 	call	0x101a	; 0x101a <vPortYield>
    2118:	81 e0       	ldi	r24, 0x01	; 1
    211a:	03 c0       	rjmp	.+6      	; 0x2122 <xTaskResumeAll+0xea>
    211c:	80 e0       	ldi	r24, 0x00	; 0
    211e:	01 c0       	rjmp	.+2      	; 0x2122 <xTaskResumeAll+0xea>
    2120:	80 e0       	ldi	r24, 0x00	; 0
    2122:	0f 90       	pop	r0
    2124:	0f be       	out	0x3f, r0	; 63
    2126:	df 91       	pop	r29
    2128:	cf 91       	pop	r28
    212a:	1f 91       	pop	r17
    212c:	0f 91       	pop	r16
    212e:	ff 90       	pop	r15
    2130:	ef 90       	pop	r14
    2132:	df 90       	pop	r13
    2134:	08 95       	ret

00002136 <vTaskDelay>:
    2136:	cf 93       	push	r28
    2138:	df 93       	push	r29
    213a:	ec 01       	movw	r28, r24
    213c:	89 2b       	or	r24, r25
    213e:	51 f0       	breq	.+20     	; 0x2154 <vTaskDelay+0x1e>
    2140:	0e 94 5b 0f 	call	0x1eb6	; 0x1eb6 <vTaskSuspendAll>
    2144:	60 e0       	ldi	r22, 0x00	; 0
    2146:	ce 01       	movw	r24, r28
    2148:	0e 94 d8 0d 	call	0x1bb0	; 0x1bb0 <prvAddCurrentTaskToDelayedList>
    214c:	0e 94 1c 10 	call	0x2038	; 0x2038 <xTaskResumeAll>
    2150:	81 11       	cpse	r24, r1
    2152:	02 c0       	rjmp	.+4      	; 0x2158 <vTaskDelay+0x22>
    2154:	0e 94 0d 08 	call	0x101a	; 0x101a <vPortYield>
    2158:	df 91       	pop	r29
    215a:	cf 91       	pop	r28
    215c:	08 95       	ret

0000215e <prvIdleTask>:
    215e:	06 ed       	ldi	r16, 0xD6	; 214
    2160:	15 e0       	ldi	r17, 0x05	; 5
    2162:	0f 2e       	mov	r0, r31
    2164:	fe ef       	ldi	r31, 0xFE	; 254
    2166:	ef 2e       	mov	r14, r31
    2168:	f5 e0       	ldi	r31, 0x05	; 5
    216a:	ff 2e       	mov	r15, r31
    216c:	f0 2d       	mov	r31, r0
    216e:	29 c0       	rjmp	.+82     	; 0x21c2 <prvIdleTask+0x64>
    2170:	0e 94 5b 0f 	call	0x1eb6	; 0x1eb6 <vTaskSuspendAll>
    2174:	d8 01       	movw	r26, r16
    2176:	cc 91       	ld	r28, X
    2178:	0e 94 1c 10 	call	0x2038	; 0x2038 <xTaskResumeAll>
    217c:	cc 23       	and	r28, r28
    217e:	09 f1       	breq	.+66     	; 0x21c2 <prvIdleTask+0x64>
    2180:	0f b6       	in	r0, 0x3f	; 63
    2182:	f8 94       	cli
    2184:	0f 92       	push	r0
    2186:	d8 01       	movw	r26, r16
    2188:	15 96       	adiw	r26, 0x05	; 5
    218a:	ed 91       	ld	r30, X+
    218c:	fc 91       	ld	r31, X
    218e:	16 97       	sbiw	r26, 0x06	; 6
    2190:	c6 81       	ldd	r28, Z+6	; 0x06
    2192:	d7 81       	ldd	r29, Z+7	; 0x07
    2194:	ce 01       	movw	r24, r28
    2196:	02 96       	adiw	r24, 0x02	; 2
    2198:	0e 94 41 07 	call	0xe82	; 0xe82 <uxListRemove>
    219c:	80 91 d4 05 	lds	r24, 0x05D4	; 0x8005d4 <uxCurrentNumberOfTasks>
    21a0:	81 50       	subi	r24, 0x01	; 1
    21a2:	80 93 d4 05 	sts	0x05D4, r24	; 0x8005d4 <uxCurrentNumberOfTasks>
    21a6:	80 91 d5 05 	lds	r24, 0x05D5	; 0x8005d5 <uxDeletedTasksWaitingCleanUp>
    21aa:	81 50       	subi	r24, 0x01	; 1
    21ac:	80 93 d5 05 	sts	0x05D5, r24	; 0x8005d5 <uxDeletedTasksWaitingCleanUp>
    21b0:	0f 90       	pop	r0
    21b2:	0f be       	out	0x3f, r0	; 63
    21b4:	8f 89       	ldd	r24, Y+23	; 0x17
    21b6:	98 8d       	ldd	r25, Y+24	; 0x18
    21b8:	0e 94 fa 08 	call	0x11f4	; 0x11f4 <vPortFree>
    21bc:	ce 01       	movw	r24, r28
    21be:	0e 94 fa 08 	call	0x11f4	; 0x11f4 <vPortFree>
    21c2:	80 91 d5 05 	lds	r24, 0x05D5	; 0x8005d5 <uxDeletedTasksWaitingCleanUp>
    21c6:	81 11       	cpse	r24, r1
    21c8:	d3 cf       	rjmp	.-90     	; 0x2170 <prvIdleTask+0x12>
    21ca:	f7 01       	movw	r30, r14
    21cc:	80 81       	ld	r24, Z
    21ce:	82 30       	cpi	r24, 0x02	; 2
    21d0:	10 f0       	brcs	.+4      	; 0x21d6 <prvIdleTask+0x78>
    21d2:	0e 94 0d 08 	call	0x101a	; 0x101a <vPortYield>
    21d6:	0e 94 c0 05 	call	0xb80	; 0xb80 <vApplicationIdleHook>
    21da:	f3 cf       	rjmp	.-26     	; 0x21c2 <prvIdleTask+0x64>

000021dc <vTaskSetApplicationTaskTag>:
    21dc:	00 97       	sbiw	r24, 0x00	; 0
    21de:	21 f4       	brne	.+8      	; 0x21e8 <vTaskSetApplicationTaskTag+0xc>
    21e0:	80 91 22 06 	lds	r24, 0x0622	; 0x800622 <pxCurrentTCB>
    21e4:	90 91 23 06 	lds	r25, 0x0623	; 0x800623 <pxCurrentTCB+0x1>
    21e8:	0f b6       	in	r0, 0x3f	; 63
    21ea:	f8 94       	cli
    21ec:	0f 92       	push	r0
    21ee:	fc 01       	movw	r30, r24
    21f0:	76 a3       	std	Z+38, r23	; 0x26
    21f2:	65 a3       	std	Z+37, r22	; 0x25
    21f4:	0f 90       	pop	r0
    21f6:	0f be       	out	0x3f, r0	; 63
    21f8:	08 95       	ret

000021fa <vTaskSwitchContext>:
    21fa:	80 91 c7 05 	lds	r24, 0x05C7	; 0x8005c7 <uxSchedulerSuspended>
    21fe:	88 23       	and	r24, r24
    2200:	21 f0       	breq	.+8      	; 0x220a <vTaskSwitchContext+0x10>
    2202:	81 e0       	ldi	r24, 0x01	; 1
    2204:	80 93 ce 05 	sts	0x05CE, r24	; 0x8005ce <xYieldPending>
    2208:	08 95       	ret
    220a:	10 92 ce 05 	sts	0x05CE, r1	; 0x8005ce <xYieldPending>
    220e:	e0 91 22 06 	lds	r30, 0x0622	; 0x800622 <pxCurrentTCB>
    2212:	f0 91 23 06 	lds	r31, 0x0623	; 0x800623 <pxCurrentTCB+0x1>
    2216:	85 a1       	ldd	r24, Z+37	; 0x25
    2218:	0e 94 96 06 	call	0xd2c	; 0xd2c <switch_out>
    221c:	20 91 d1 05 	lds	r18, 0x05D1	; 0x8005d1 <uxTopReadyPriority>
    2220:	82 2f       	mov	r24, r18
    2222:	90 e0       	ldi	r25, 0x00	; 0
    2224:	fc 01       	movw	r30, r24
    2226:	ee 0f       	add	r30, r30
    2228:	ff 1f       	adc	r31, r31
    222a:	ee 0f       	add	r30, r30
    222c:	ff 1f       	adc	r31, r31
    222e:	ee 0f       	add	r30, r30
    2230:	ff 1f       	adc	r31, r31
    2232:	e8 0f       	add	r30, r24
    2234:	f9 1f       	adc	r31, r25
    2236:	e2 50       	subi	r30, 0x02	; 2
    2238:	fa 4f       	sbci	r31, 0xFA	; 250
    223a:	30 81       	ld	r19, Z
    223c:	31 11       	cpse	r19, r1
    223e:	11 c0       	rjmp	.+34     	; 0x2262 <vTaskSwitchContext+0x68>
    2240:	21 50       	subi	r18, 0x01	; 1
    2242:	82 2f       	mov	r24, r18
    2244:	90 e0       	ldi	r25, 0x00	; 0
    2246:	fc 01       	movw	r30, r24
    2248:	ee 0f       	add	r30, r30
    224a:	ff 1f       	adc	r31, r31
    224c:	ee 0f       	add	r30, r30
    224e:	ff 1f       	adc	r31, r31
    2250:	ee 0f       	add	r30, r30
    2252:	ff 1f       	adc	r31, r31
    2254:	e8 0f       	add	r30, r24
    2256:	f9 1f       	adc	r31, r25
    2258:	e2 50       	subi	r30, 0x02	; 2
    225a:	fa 4f       	sbci	r31, 0xFA	; 250
    225c:	30 81       	ld	r19, Z
    225e:	33 23       	and	r19, r19
    2260:	79 f3       	breq	.-34     	; 0x2240 <vTaskSwitchContext+0x46>
    2262:	ac 01       	movw	r20, r24
    2264:	44 0f       	add	r20, r20
    2266:	55 1f       	adc	r21, r21
    2268:	44 0f       	add	r20, r20
    226a:	55 1f       	adc	r21, r21
    226c:	44 0f       	add	r20, r20
    226e:	55 1f       	adc	r21, r21
    2270:	48 0f       	add	r20, r24
    2272:	59 1f       	adc	r21, r25
    2274:	da 01       	movw	r26, r20
    2276:	a2 50       	subi	r26, 0x02	; 2
    2278:	ba 4f       	sbci	r27, 0xFA	; 250
    227a:	11 96       	adiw	r26, 0x01	; 1
    227c:	ed 91       	ld	r30, X+
    227e:	fc 91       	ld	r31, X
    2280:	12 97       	sbiw	r26, 0x02	; 2
    2282:	02 80       	ldd	r0, Z+2	; 0x02
    2284:	f3 81       	ldd	r31, Z+3	; 0x03
    2286:	e0 2d       	mov	r30, r0
    2288:	12 96       	adiw	r26, 0x02	; 2
    228a:	fc 93       	st	X, r31
    228c:	ee 93       	st	-X, r30
    228e:	11 97       	sbiw	r26, 0x01	; 1
    2290:	4f 5f       	subi	r20, 0xFF	; 255
    2292:	59 4f       	sbci	r21, 0xF9	; 249
    2294:	e4 17       	cp	r30, r20
    2296:	f5 07       	cpc	r31, r21
    2298:	29 f4       	brne	.+10     	; 0x22a4 <vTaskSwitchContext+0xaa>
    229a:	42 81       	ldd	r20, Z+2	; 0x02
    229c:	53 81       	ldd	r21, Z+3	; 0x03
    229e:	fd 01       	movw	r30, r26
    22a0:	52 83       	std	Z+2, r21	; 0x02
    22a2:	41 83       	std	Z+1, r20	; 0x01
    22a4:	fc 01       	movw	r30, r24
    22a6:	ee 0f       	add	r30, r30
    22a8:	ff 1f       	adc	r31, r31
    22aa:	ee 0f       	add	r30, r30
    22ac:	ff 1f       	adc	r31, r31
    22ae:	ee 0f       	add	r30, r30
    22b0:	ff 1f       	adc	r31, r31
    22b2:	8e 0f       	add	r24, r30
    22b4:	9f 1f       	adc	r25, r31
    22b6:	fc 01       	movw	r30, r24
    22b8:	e2 50       	subi	r30, 0x02	; 2
    22ba:	fa 4f       	sbci	r31, 0xFA	; 250
    22bc:	01 80       	ldd	r0, Z+1	; 0x01
    22be:	f2 81       	ldd	r31, Z+2	; 0x02
    22c0:	e0 2d       	mov	r30, r0
    22c2:	86 81       	ldd	r24, Z+6	; 0x06
    22c4:	97 81       	ldd	r25, Z+7	; 0x07
    22c6:	90 93 23 06 	sts	0x0623, r25	; 0x800623 <pxCurrentTCB+0x1>
    22ca:	80 93 22 06 	sts	0x0622, r24	; 0x800622 <pxCurrentTCB>
    22ce:	20 93 d1 05 	sts	0x05D1, r18	; 0x8005d1 <uxTopReadyPriority>
    22d2:	e0 91 22 06 	lds	r30, 0x0622	; 0x800622 <pxCurrentTCB>
    22d6:	f0 91 23 06 	lds	r31, 0x0623	; 0x800623 <pxCurrentTCB+0x1>
    22da:	85 a1       	ldd	r24, Z+37	; 0x25
    22dc:	0e 94 8b 06 	call	0xd16	; 0xd16 <switch_in>
    22e0:	08 95       	ret

000022e2 <vTaskPlaceOnEventList>:
    22e2:	cf 93       	push	r28
    22e4:	df 93       	push	r29
    22e6:	eb 01       	movw	r28, r22
    22e8:	60 91 22 06 	lds	r22, 0x0622	; 0x800622 <pxCurrentTCB>
    22ec:	70 91 23 06 	lds	r23, 0x0623	; 0x800623 <pxCurrentTCB+0x1>
    22f0:	64 5f       	subi	r22, 0xF4	; 244
    22f2:	7f 4f       	sbci	r23, 0xFF	; 255
    22f4:	0e 94 10 07 	call	0xe20	; 0xe20 <vListInsert>
    22f8:	61 e0       	ldi	r22, 0x01	; 1
    22fa:	ce 01       	movw	r24, r28
    22fc:	0e 94 d8 0d 	call	0x1bb0	; 0x1bb0 <prvAddCurrentTaskToDelayedList>
    2300:	df 91       	pop	r29
    2302:	cf 91       	pop	r28
    2304:	08 95       	ret

00002306 <xTaskRemoveFromEventList>:
    2306:	0f 93       	push	r16
    2308:	1f 93       	push	r17
    230a:	cf 93       	push	r28
    230c:	df 93       	push	r29
    230e:	dc 01       	movw	r26, r24
    2310:	15 96       	adiw	r26, 0x05	; 5
    2312:	ed 91       	ld	r30, X+
    2314:	fc 91       	ld	r31, X
    2316:	16 97       	sbiw	r26, 0x06	; 6
    2318:	c6 81       	ldd	r28, Z+6	; 0x06
    231a:	d7 81       	ldd	r29, Z+7	; 0x07
    231c:	8e 01       	movw	r16, r28
    231e:	04 5f       	subi	r16, 0xF4	; 244
    2320:	1f 4f       	sbci	r17, 0xFF	; 255
    2322:	c8 01       	movw	r24, r16
    2324:	0e 94 41 07 	call	0xe82	; 0xe82 <uxListRemove>
    2328:	80 91 c7 05 	lds	r24, 0x05C7	; 0x8005c7 <uxSchedulerSuspended>
    232c:	81 11       	cpse	r24, r1
    232e:	1c c0       	rjmp	.+56     	; 0x2368 <xTaskRemoveFromEventList+0x62>
    2330:	0a 50       	subi	r16, 0x0A	; 10
    2332:	11 09       	sbc	r17, r1
    2334:	c8 01       	movw	r24, r16
    2336:	0e 94 41 07 	call	0xe82	; 0xe82 <uxListRemove>
    233a:	8e 89       	ldd	r24, Y+22	; 0x16
    233c:	90 91 d1 05 	lds	r25, 0x05D1	; 0x8005d1 <uxTopReadyPriority>
    2340:	98 17       	cp	r25, r24
    2342:	10 f4       	brcc	.+4      	; 0x2348 <xTaskRemoveFromEventList+0x42>
    2344:	80 93 d1 05 	sts	0x05D1, r24	; 0x8005d1 <uxTopReadyPriority>
    2348:	90 e0       	ldi	r25, 0x00	; 0
    234a:	9c 01       	movw	r18, r24
    234c:	22 0f       	add	r18, r18
    234e:	33 1f       	adc	r19, r19
    2350:	22 0f       	add	r18, r18
    2352:	33 1f       	adc	r19, r19
    2354:	22 0f       	add	r18, r18
    2356:	33 1f       	adc	r19, r19
    2358:	82 0f       	add	r24, r18
    235a:	93 1f       	adc	r25, r19
    235c:	b8 01       	movw	r22, r16
    235e:	82 50       	subi	r24, 0x02	; 2
    2360:	9a 4f       	sbci	r25, 0xFA	; 250
    2362:	0e 94 ef 06 	call	0xdde	; 0xdde <vListInsertEnd>
    2366:	05 c0       	rjmp	.+10     	; 0x2372 <xTaskRemoveFromEventList+0x6c>
    2368:	b8 01       	movw	r22, r16
    236a:	8f ed       	ldi	r24, 0xDF	; 223
    236c:	95 e0       	ldi	r25, 0x05	; 5
    236e:	0e 94 ef 06 	call	0xdde	; 0xdde <vListInsertEnd>
    2372:	e0 91 22 06 	lds	r30, 0x0622	; 0x800622 <pxCurrentTCB>
    2376:	f0 91 23 06 	lds	r31, 0x0623	; 0x800623 <pxCurrentTCB+0x1>
    237a:	9e 89       	ldd	r25, Y+22	; 0x16
    237c:	86 89       	ldd	r24, Z+22	; 0x16
    237e:	89 17       	cp	r24, r25
    2380:	20 f4       	brcc	.+8      	; 0x238a <xTaskRemoveFromEventList+0x84>
    2382:	81 e0       	ldi	r24, 0x01	; 1
    2384:	80 93 ce 05 	sts	0x05CE, r24	; 0x8005ce <xYieldPending>
    2388:	01 c0       	rjmp	.+2      	; 0x238c <xTaskRemoveFromEventList+0x86>
    238a:	80 e0       	ldi	r24, 0x00	; 0
    238c:	df 91       	pop	r29
    238e:	cf 91       	pop	r28
    2390:	1f 91       	pop	r17
    2392:	0f 91       	pop	r16
    2394:	08 95       	ret

00002396 <vTaskSetTimeOutState>:
    2396:	20 91 cd 05 	lds	r18, 0x05CD	; 0x8005cd <xNumOfOverflows>
    239a:	fc 01       	movw	r30, r24
    239c:	20 83       	st	Z, r18
    239e:	20 91 d2 05 	lds	r18, 0x05D2	; 0x8005d2 <xTickCount>
    23a2:	30 91 d3 05 	lds	r19, 0x05D3	; 0x8005d3 <xTickCount+0x1>
    23a6:	32 83       	std	Z+2, r19	; 0x02
    23a8:	21 83       	std	Z+1, r18	; 0x01
    23aa:	08 95       	ret

000023ac <xTaskCheckForTimeOut>:
    23ac:	cf 93       	push	r28
    23ae:	df 93       	push	r29
    23b0:	fc 01       	movw	r30, r24
    23b2:	0f b6       	in	r0, 0x3f	; 63
    23b4:	f8 94       	cli
    23b6:	0f 92       	push	r0
    23b8:	20 91 d2 05 	lds	r18, 0x05D2	; 0x8005d2 <xTickCount>
    23bc:	30 91 d3 05 	lds	r19, 0x05D3	; 0x8005d3 <xTickCount+0x1>
    23c0:	80 91 cd 05 	lds	r24, 0x05CD	; 0x8005cd <xNumOfOverflows>
    23c4:	90 81       	ld	r25, Z
    23c6:	98 17       	cp	r25, r24
    23c8:	29 f0       	breq	.+10     	; 0x23d4 <xTaskCheckForTimeOut+0x28>
    23ca:	81 81       	ldd	r24, Z+1	; 0x01
    23cc:	92 81       	ldd	r25, Z+2	; 0x02
    23ce:	28 17       	cp	r18, r24
    23d0:	39 07       	cpc	r19, r25
    23d2:	b0 f4       	brcc	.+44     	; 0x2400 <xTaskCheckForTimeOut+0x54>
    23d4:	a1 81       	ldd	r26, Z+1	; 0x01
    23d6:	b2 81       	ldd	r27, Z+2	; 0x02
    23d8:	eb 01       	movw	r28, r22
    23da:	48 81       	ld	r20, Y
    23dc:	59 81       	ldd	r21, Y+1	; 0x01
    23de:	c9 01       	movw	r24, r18
    23e0:	8a 1b       	sub	r24, r26
    23e2:	9b 0b       	sbc	r25, r27
    23e4:	84 17       	cp	r24, r20
    23e6:	95 07       	cpc	r25, r21
    23e8:	68 f4       	brcc	.+26     	; 0x2404 <xTaskCheckForTimeOut+0x58>
    23ea:	cf 01       	movw	r24, r30
    23ec:	a2 1b       	sub	r26, r18
    23ee:	b3 0b       	sbc	r27, r19
    23f0:	4a 0f       	add	r20, r26
    23f2:	5b 1f       	adc	r21, r27
    23f4:	59 83       	std	Y+1, r21	; 0x01
    23f6:	48 83       	st	Y, r20
    23f8:	0e 94 cb 11 	call	0x2396	; 0x2396 <vTaskSetTimeOutState>
    23fc:	80 e0       	ldi	r24, 0x00	; 0
    23fe:	03 c0       	rjmp	.+6      	; 0x2406 <xTaskCheckForTimeOut+0x5a>
    2400:	81 e0       	ldi	r24, 0x01	; 1
    2402:	01 c0       	rjmp	.+2      	; 0x2406 <xTaskCheckForTimeOut+0x5a>
    2404:	81 e0       	ldi	r24, 0x01	; 1
    2406:	0f 90       	pop	r0
    2408:	0f be       	out	0x3f, r0	; 63
    240a:	df 91       	pop	r29
    240c:	cf 91       	pop	r28
    240e:	08 95       	ret

00002410 <vTaskMissedYield>:
    2410:	81 e0       	ldi	r24, 0x01	; 1
    2412:	80 93 ce 05 	sts	0x05CE, r24	; 0x8005ce <xYieldPending>
    2416:	08 95       	ret

00002418 <vTaskPriorityInherit>:
    2418:	0f 93       	push	r16
    241a:	1f 93       	push	r17
    241c:	cf 93       	push	r28
    241e:	df 93       	push	r29
    2420:	fc 01       	movw	r30, r24
    2422:	89 2b       	or	r24, r25
    2424:	09 f4       	brne	.+2      	; 0x2428 <vTaskPriorityInherit+0x10>
    2426:	55 c0       	rjmp	.+170    	; 0x24d2 <vTaskPriorityInherit+0xba>
    2428:	26 89       	ldd	r18, Z+22	; 0x16
    242a:	a0 91 22 06 	lds	r26, 0x0622	; 0x800622 <pxCurrentTCB>
    242e:	b0 91 23 06 	lds	r27, 0x0623	; 0x800623 <pxCurrentTCB+0x1>
    2432:	56 96       	adiw	r26, 0x16	; 22
    2434:	8c 91       	ld	r24, X
    2436:	28 17       	cp	r18, r24
    2438:	08 f0       	brcs	.+2      	; 0x243c <vTaskPriorityInherit+0x24>
    243a:	4b c0       	rjmp	.+150    	; 0x24d2 <vTaskPriorityInherit+0xba>
    243c:	84 85       	ldd	r24, Z+12	; 0x0c
    243e:	95 85       	ldd	r25, Z+13	; 0x0d
    2440:	99 23       	and	r25, r25
    2442:	64 f0       	brlt	.+24     	; 0x245c <vTaskPriorityInherit+0x44>
    2444:	a0 91 22 06 	lds	r26, 0x0622	; 0x800622 <pxCurrentTCB>
    2448:	b0 91 23 06 	lds	r27, 0x0623	; 0x800623 <pxCurrentTCB+0x1>
    244c:	56 96       	adiw	r26, 0x16	; 22
    244e:	3c 91       	ld	r19, X
    2450:	84 e0       	ldi	r24, 0x04	; 4
    2452:	90 e0       	ldi	r25, 0x00	; 0
    2454:	83 1b       	sub	r24, r19
    2456:	91 09       	sbc	r25, r1
    2458:	95 87       	std	Z+13, r25	; 0x0d
    245a:	84 87       	std	Z+12, r24	; 0x0c
    245c:	30 e0       	ldi	r19, 0x00	; 0
    245e:	c9 01       	movw	r24, r18
    2460:	88 0f       	add	r24, r24
    2462:	99 1f       	adc	r25, r25
    2464:	88 0f       	add	r24, r24
    2466:	99 1f       	adc	r25, r25
    2468:	88 0f       	add	r24, r24
    246a:	99 1f       	adc	r25, r25
    246c:	28 0f       	add	r18, r24
    246e:	39 1f       	adc	r19, r25
    2470:	22 50       	subi	r18, 0x02	; 2
    2472:	3a 4f       	sbci	r19, 0xFA	; 250
    2474:	82 85       	ldd	r24, Z+10	; 0x0a
    2476:	93 85       	ldd	r25, Z+11	; 0x0b
    2478:	82 17       	cp	r24, r18
    247a:	93 07       	cpc	r25, r19
    247c:	19 f5       	brne	.+70     	; 0x24c4 <vTaskPriorityInherit+0xac>
    247e:	8f 01       	movw	r16, r30
    2480:	ef 01       	movw	r28, r30
    2482:	22 96       	adiw	r28, 0x02	; 2
    2484:	ce 01       	movw	r24, r28
    2486:	0e 94 41 07 	call	0xe82	; 0xe82 <uxListRemove>
    248a:	e0 91 22 06 	lds	r30, 0x0622	; 0x800622 <pxCurrentTCB>
    248e:	f0 91 23 06 	lds	r31, 0x0623	; 0x800623 <pxCurrentTCB+0x1>
    2492:	86 89       	ldd	r24, Z+22	; 0x16
    2494:	f8 01       	movw	r30, r16
    2496:	86 8b       	std	Z+22, r24	; 0x16
    2498:	90 91 d1 05 	lds	r25, 0x05D1	; 0x8005d1 <uxTopReadyPriority>
    249c:	98 17       	cp	r25, r24
    249e:	10 f4       	brcc	.+4      	; 0x24a4 <vTaskPriorityInherit+0x8c>
    24a0:	80 93 d1 05 	sts	0x05D1, r24	; 0x8005d1 <uxTopReadyPriority>
    24a4:	90 e0       	ldi	r25, 0x00	; 0
    24a6:	9c 01       	movw	r18, r24
    24a8:	22 0f       	add	r18, r18
    24aa:	33 1f       	adc	r19, r19
    24ac:	22 0f       	add	r18, r18
    24ae:	33 1f       	adc	r19, r19
    24b0:	22 0f       	add	r18, r18
    24b2:	33 1f       	adc	r19, r19
    24b4:	82 0f       	add	r24, r18
    24b6:	93 1f       	adc	r25, r19
    24b8:	be 01       	movw	r22, r28
    24ba:	82 50       	subi	r24, 0x02	; 2
    24bc:	9a 4f       	sbci	r25, 0xFA	; 250
    24be:	0e 94 ef 06 	call	0xdde	; 0xdde <vListInsertEnd>
    24c2:	07 c0       	rjmp	.+14     	; 0x24d2 <vTaskPriorityInherit+0xba>
    24c4:	a0 91 22 06 	lds	r26, 0x0622	; 0x800622 <pxCurrentTCB>
    24c8:	b0 91 23 06 	lds	r27, 0x0623	; 0x800623 <pxCurrentTCB+0x1>
    24cc:	56 96       	adiw	r26, 0x16	; 22
    24ce:	8c 91       	ld	r24, X
    24d0:	86 8b       	std	Z+22, r24	; 0x16
    24d2:	df 91       	pop	r29
    24d4:	cf 91       	pop	r28
    24d6:	1f 91       	pop	r17
    24d8:	0f 91       	pop	r16
    24da:	08 95       	ret

000024dc <xTaskPriorityDisinherit>:
    24dc:	0f 93       	push	r16
    24de:	1f 93       	push	r17
    24e0:	cf 93       	push	r28
    24e2:	df 93       	push	r29
    24e4:	fc 01       	movw	r30, r24
    24e6:	89 2b       	or	r24, r25
    24e8:	79 f1       	breq	.+94     	; 0x2548 <xTaskPriorityDisinherit+0x6c>
    24ea:	84 a1       	ldd	r24, Z+36	; 0x24
    24ec:	81 50       	subi	r24, 0x01	; 1
    24ee:	84 a3       	std	Z+36, r24	; 0x24
    24f0:	26 89       	ldd	r18, Z+22	; 0x16
    24f2:	93 a1       	ldd	r25, Z+35	; 0x23
    24f4:	29 17       	cp	r18, r25
    24f6:	51 f1       	breq	.+84     	; 0x254c <xTaskPriorityDisinherit+0x70>
    24f8:	81 11       	cpse	r24, r1
    24fa:	2a c0       	rjmp	.+84     	; 0x2550 <xTaskPriorityDisinherit+0x74>
    24fc:	ef 01       	movw	r28, r30
    24fe:	8f 01       	movw	r16, r30
    2500:	0e 5f       	subi	r16, 0xFE	; 254
    2502:	1f 4f       	sbci	r17, 0xFF	; 255
    2504:	c8 01       	movw	r24, r16
    2506:	0e 94 41 07 	call	0xe82	; 0xe82 <uxListRemove>
    250a:	8b a1       	ldd	r24, Y+35	; 0x23
    250c:	8e 8b       	std	Y+22, r24	; 0x16
    250e:	24 e0       	ldi	r18, 0x04	; 4
    2510:	30 e0       	ldi	r19, 0x00	; 0
    2512:	28 1b       	sub	r18, r24
    2514:	31 09       	sbc	r19, r1
    2516:	3d 87       	std	Y+13, r19	; 0x0d
    2518:	2c 87       	std	Y+12, r18	; 0x0c
    251a:	90 91 d1 05 	lds	r25, 0x05D1	; 0x8005d1 <uxTopReadyPriority>
    251e:	98 17       	cp	r25, r24
    2520:	10 f4       	brcc	.+4      	; 0x2526 <xTaskPriorityDisinherit+0x4a>
    2522:	80 93 d1 05 	sts	0x05D1, r24	; 0x8005d1 <uxTopReadyPriority>
    2526:	90 e0       	ldi	r25, 0x00	; 0
    2528:	9c 01       	movw	r18, r24
    252a:	22 0f       	add	r18, r18
    252c:	33 1f       	adc	r19, r19
    252e:	22 0f       	add	r18, r18
    2530:	33 1f       	adc	r19, r19
    2532:	22 0f       	add	r18, r18
    2534:	33 1f       	adc	r19, r19
    2536:	82 0f       	add	r24, r18
    2538:	93 1f       	adc	r25, r19
    253a:	b8 01       	movw	r22, r16
    253c:	82 50       	subi	r24, 0x02	; 2
    253e:	9a 4f       	sbci	r25, 0xFA	; 250
    2540:	0e 94 ef 06 	call	0xdde	; 0xdde <vListInsertEnd>
    2544:	81 e0       	ldi	r24, 0x01	; 1
    2546:	05 c0       	rjmp	.+10     	; 0x2552 <xTaskPriorityDisinherit+0x76>
    2548:	80 e0       	ldi	r24, 0x00	; 0
    254a:	03 c0       	rjmp	.+6      	; 0x2552 <xTaskPriorityDisinherit+0x76>
    254c:	80 e0       	ldi	r24, 0x00	; 0
    254e:	01 c0       	rjmp	.+2      	; 0x2552 <xTaskPriorityDisinherit+0x76>
    2550:	80 e0       	ldi	r24, 0x00	; 0
    2552:	df 91       	pop	r29
    2554:	cf 91       	pop	r28
    2556:	1f 91       	pop	r17
    2558:	0f 91       	pop	r16
    255a:	08 95       	ret

0000255c <pvTaskIncrementMutexHeldCount>:
    255c:	80 91 22 06 	lds	r24, 0x0622	; 0x800622 <pxCurrentTCB>
    2560:	90 91 23 06 	lds	r25, 0x0623	; 0x800623 <pxCurrentTCB+0x1>
    2564:	89 2b       	or	r24, r25
    2566:	39 f0       	breq	.+14     	; 0x2576 <pvTaskIncrementMutexHeldCount+0x1a>
    2568:	e0 91 22 06 	lds	r30, 0x0622	; 0x800622 <pxCurrentTCB>
    256c:	f0 91 23 06 	lds	r31, 0x0623	; 0x800623 <pxCurrentTCB+0x1>
    2570:	84 a1       	ldd	r24, Z+36	; 0x24
    2572:	8f 5f       	subi	r24, 0xFF	; 255
    2574:	84 a3       	std	Z+36, r24	; 0x24
    2576:	80 91 22 06 	lds	r24, 0x0622	; 0x800622 <pxCurrentTCB>
    257a:	90 91 23 06 	lds	r25, 0x0623	; 0x800623 <pxCurrentTCB+0x1>
    257e:	08 95       	ret

00002580 <__divmodhi4>:
    2580:	97 fb       	bst	r25, 7
    2582:	07 2e       	mov	r0, r23
    2584:	16 f4       	brtc	.+4      	; 0x258a <__divmodhi4+0xa>
    2586:	00 94       	com	r0
    2588:	07 d0       	rcall	.+14     	; 0x2598 <__divmodhi4_neg1>
    258a:	77 fd       	sbrc	r23, 7
    258c:	09 d0       	rcall	.+18     	; 0x25a0 <__divmodhi4_neg2>
    258e:	0e 94 f6 12 	call	0x25ec	; 0x25ec <__udivmodhi4>
    2592:	07 fc       	sbrc	r0, 7
    2594:	05 d0       	rcall	.+10     	; 0x25a0 <__divmodhi4_neg2>
    2596:	3e f4       	brtc	.+14     	; 0x25a6 <__divmodhi4_exit>

00002598 <__divmodhi4_neg1>:
    2598:	90 95       	com	r25
    259a:	81 95       	neg	r24
    259c:	9f 4f       	sbci	r25, 0xFF	; 255
    259e:	08 95       	ret

000025a0 <__divmodhi4_neg2>:
    25a0:	70 95       	com	r23
    25a2:	61 95       	neg	r22
    25a4:	7f 4f       	sbci	r23, 0xFF	; 255

000025a6 <__divmodhi4_exit>:
    25a6:	08 95       	ret

000025a8 <__udivmodsi4>:
    25a8:	a1 e2       	ldi	r26, 0x21	; 33
    25aa:	1a 2e       	mov	r1, r26
    25ac:	aa 1b       	sub	r26, r26
    25ae:	bb 1b       	sub	r27, r27
    25b0:	fd 01       	movw	r30, r26
    25b2:	0d c0       	rjmp	.+26     	; 0x25ce <__udivmodsi4_ep>

000025b4 <__udivmodsi4_loop>:
    25b4:	aa 1f       	adc	r26, r26
    25b6:	bb 1f       	adc	r27, r27
    25b8:	ee 1f       	adc	r30, r30
    25ba:	ff 1f       	adc	r31, r31
    25bc:	a2 17       	cp	r26, r18
    25be:	b3 07       	cpc	r27, r19
    25c0:	e4 07       	cpc	r30, r20
    25c2:	f5 07       	cpc	r31, r21
    25c4:	20 f0       	brcs	.+8      	; 0x25ce <__udivmodsi4_ep>
    25c6:	a2 1b       	sub	r26, r18
    25c8:	b3 0b       	sbc	r27, r19
    25ca:	e4 0b       	sbc	r30, r20
    25cc:	f5 0b       	sbc	r31, r21

000025ce <__udivmodsi4_ep>:
    25ce:	66 1f       	adc	r22, r22
    25d0:	77 1f       	adc	r23, r23
    25d2:	88 1f       	adc	r24, r24
    25d4:	99 1f       	adc	r25, r25
    25d6:	1a 94       	dec	r1
    25d8:	69 f7       	brne	.-38     	; 0x25b4 <__udivmodsi4_loop>
    25da:	60 95       	com	r22
    25dc:	70 95       	com	r23
    25de:	80 95       	com	r24
    25e0:	90 95       	com	r25
    25e2:	9b 01       	movw	r18, r22
    25e4:	ac 01       	movw	r20, r24
    25e6:	bd 01       	movw	r22, r26
    25e8:	cf 01       	movw	r24, r30
    25ea:	08 95       	ret

000025ec <__udivmodhi4>:
    25ec:	aa 1b       	sub	r26, r26
    25ee:	bb 1b       	sub	r27, r27
    25f0:	51 e1       	ldi	r21, 0x11	; 17
    25f2:	07 c0       	rjmp	.+14     	; 0x2602 <__udivmodhi4_ep>

000025f4 <__udivmodhi4_loop>:
    25f4:	aa 1f       	adc	r26, r26
    25f6:	bb 1f       	adc	r27, r27
    25f8:	a6 17       	cp	r26, r22
    25fa:	b7 07       	cpc	r27, r23
    25fc:	10 f0       	brcs	.+4      	; 0x2602 <__udivmodhi4_ep>
    25fe:	a6 1b       	sub	r26, r22
    2600:	b7 0b       	sbc	r27, r23

00002602 <__udivmodhi4_ep>:
    2602:	88 1f       	adc	r24, r24
    2604:	99 1f       	adc	r25, r25
    2606:	5a 95       	dec	r21
    2608:	a9 f7       	brne	.-22     	; 0x25f4 <__udivmodhi4_loop>
    260a:	80 95       	com	r24
    260c:	90 95       	com	r25
    260e:	bc 01       	movw	r22, r24
    2610:	cd 01       	movw	r24, r26
    2612:	08 95       	ret

00002614 <malloc>:
    2614:	0f 93       	push	r16
    2616:	1f 93       	push	r17
    2618:	cf 93       	push	r28
    261a:	df 93       	push	r29
    261c:	82 30       	cpi	r24, 0x02	; 2
    261e:	91 05       	cpc	r25, r1
    2620:	10 f4       	brcc	.+4      	; 0x2626 <malloc+0x12>
    2622:	82 e0       	ldi	r24, 0x02	; 2
    2624:	90 e0       	ldi	r25, 0x00	; 0
    2626:	e0 91 3e 07 	lds	r30, 0x073E	; 0x80073e <__flp>
    262a:	f0 91 3f 07 	lds	r31, 0x073F	; 0x80073f <__flp+0x1>
    262e:	20 e0       	ldi	r18, 0x00	; 0
    2630:	30 e0       	ldi	r19, 0x00	; 0
    2632:	a0 e0       	ldi	r26, 0x00	; 0
    2634:	b0 e0       	ldi	r27, 0x00	; 0
    2636:	30 97       	sbiw	r30, 0x00	; 0
    2638:	19 f1       	breq	.+70     	; 0x2680 <malloc+0x6c>
    263a:	40 81       	ld	r20, Z
    263c:	51 81       	ldd	r21, Z+1	; 0x01
    263e:	02 81       	ldd	r16, Z+2	; 0x02
    2640:	13 81       	ldd	r17, Z+3	; 0x03
    2642:	48 17       	cp	r20, r24
    2644:	59 07       	cpc	r21, r25
    2646:	c8 f0       	brcs	.+50     	; 0x267a <malloc+0x66>
    2648:	84 17       	cp	r24, r20
    264a:	95 07       	cpc	r25, r21
    264c:	69 f4       	brne	.+26     	; 0x2668 <malloc+0x54>
    264e:	10 97       	sbiw	r26, 0x00	; 0
    2650:	31 f0       	breq	.+12     	; 0x265e <malloc+0x4a>
    2652:	12 96       	adiw	r26, 0x02	; 2
    2654:	0c 93       	st	X, r16
    2656:	12 97       	sbiw	r26, 0x02	; 2
    2658:	13 96       	adiw	r26, 0x03	; 3
    265a:	1c 93       	st	X, r17
    265c:	27 c0       	rjmp	.+78     	; 0x26ac <malloc+0x98>
    265e:	00 93 3e 07 	sts	0x073E, r16	; 0x80073e <__flp>
    2662:	10 93 3f 07 	sts	0x073F, r17	; 0x80073f <__flp+0x1>
    2666:	22 c0       	rjmp	.+68     	; 0x26ac <malloc+0x98>
    2668:	21 15       	cp	r18, r1
    266a:	31 05       	cpc	r19, r1
    266c:	19 f0       	breq	.+6      	; 0x2674 <malloc+0x60>
    266e:	42 17       	cp	r20, r18
    2670:	53 07       	cpc	r21, r19
    2672:	18 f4       	brcc	.+6      	; 0x267a <malloc+0x66>
    2674:	9a 01       	movw	r18, r20
    2676:	bd 01       	movw	r22, r26
    2678:	ef 01       	movw	r28, r30
    267a:	df 01       	movw	r26, r30
    267c:	f8 01       	movw	r30, r16
    267e:	db cf       	rjmp	.-74     	; 0x2636 <malloc+0x22>
    2680:	21 15       	cp	r18, r1
    2682:	31 05       	cpc	r19, r1
    2684:	f9 f0       	breq	.+62     	; 0x26c4 <malloc+0xb0>
    2686:	28 1b       	sub	r18, r24
    2688:	39 0b       	sbc	r19, r25
    268a:	24 30       	cpi	r18, 0x04	; 4
    268c:	31 05       	cpc	r19, r1
    268e:	80 f4       	brcc	.+32     	; 0x26b0 <malloc+0x9c>
    2690:	8a 81       	ldd	r24, Y+2	; 0x02
    2692:	9b 81       	ldd	r25, Y+3	; 0x03
    2694:	61 15       	cp	r22, r1
    2696:	71 05       	cpc	r23, r1
    2698:	21 f0       	breq	.+8      	; 0x26a2 <malloc+0x8e>
    269a:	fb 01       	movw	r30, r22
    269c:	93 83       	std	Z+3, r25	; 0x03
    269e:	82 83       	std	Z+2, r24	; 0x02
    26a0:	04 c0       	rjmp	.+8      	; 0x26aa <malloc+0x96>
    26a2:	90 93 3f 07 	sts	0x073F, r25	; 0x80073f <__flp+0x1>
    26a6:	80 93 3e 07 	sts	0x073E, r24	; 0x80073e <__flp>
    26aa:	fe 01       	movw	r30, r28
    26ac:	32 96       	adiw	r30, 0x02	; 2
    26ae:	44 c0       	rjmp	.+136    	; 0x2738 <malloc+0x124>
    26b0:	fe 01       	movw	r30, r28
    26b2:	e2 0f       	add	r30, r18
    26b4:	f3 1f       	adc	r31, r19
    26b6:	81 93       	st	Z+, r24
    26b8:	91 93       	st	Z+, r25
    26ba:	22 50       	subi	r18, 0x02	; 2
    26bc:	31 09       	sbc	r19, r1
    26be:	39 83       	std	Y+1, r19	; 0x01
    26c0:	28 83       	st	Y, r18
    26c2:	3a c0       	rjmp	.+116    	; 0x2738 <malloc+0x124>
    26c4:	20 91 3c 07 	lds	r18, 0x073C	; 0x80073c <__brkval>
    26c8:	30 91 3d 07 	lds	r19, 0x073D	; 0x80073d <__brkval+0x1>
    26cc:	23 2b       	or	r18, r19
    26ce:	41 f4       	brne	.+16     	; 0x26e0 <malloc+0xcc>
    26d0:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__malloc_heap_start>
    26d4:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
    26d8:	30 93 3d 07 	sts	0x073D, r19	; 0x80073d <__brkval+0x1>
    26dc:	20 93 3c 07 	sts	0x073C, r18	; 0x80073c <__brkval>
    26e0:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
    26e4:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__data_start+0x1>
    26e8:	21 15       	cp	r18, r1
    26ea:	31 05       	cpc	r19, r1
    26ec:	41 f4       	brne	.+16     	; 0x26fe <malloc+0xea>
    26ee:	2d b7       	in	r18, 0x3d	; 61
    26f0:	3e b7       	in	r19, 0x3e	; 62
    26f2:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
    26f6:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
    26fa:	24 1b       	sub	r18, r20
    26fc:	35 0b       	sbc	r19, r21
    26fe:	e0 91 3c 07 	lds	r30, 0x073C	; 0x80073c <__brkval>
    2702:	f0 91 3d 07 	lds	r31, 0x073D	; 0x80073d <__brkval+0x1>
    2706:	e2 17       	cp	r30, r18
    2708:	f3 07       	cpc	r31, r19
    270a:	a0 f4       	brcc	.+40     	; 0x2734 <malloc+0x120>
    270c:	2e 1b       	sub	r18, r30
    270e:	3f 0b       	sbc	r19, r31
    2710:	28 17       	cp	r18, r24
    2712:	39 07       	cpc	r19, r25
    2714:	78 f0       	brcs	.+30     	; 0x2734 <malloc+0x120>
    2716:	ac 01       	movw	r20, r24
    2718:	4e 5f       	subi	r20, 0xFE	; 254
    271a:	5f 4f       	sbci	r21, 0xFF	; 255
    271c:	24 17       	cp	r18, r20
    271e:	35 07       	cpc	r19, r21
    2720:	48 f0       	brcs	.+18     	; 0x2734 <malloc+0x120>
    2722:	4e 0f       	add	r20, r30
    2724:	5f 1f       	adc	r21, r31
    2726:	50 93 3d 07 	sts	0x073D, r21	; 0x80073d <__brkval+0x1>
    272a:	40 93 3c 07 	sts	0x073C, r20	; 0x80073c <__brkval>
    272e:	81 93       	st	Z+, r24
    2730:	91 93       	st	Z+, r25
    2732:	02 c0       	rjmp	.+4      	; 0x2738 <malloc+0x124>
    2734:	e0 e0       	ldi	r30, 0x00	; 0
    2736:	f0 e0       	ldi	r31, 0x00	; 0
    2738:	cf 01       	movw	r24, r30
    273a:	df 91       	pop	r29
    273c:	cf 91       	pop	r28
    273e:	1f 91       	pop	r17
    2740:	0f 91       	pop	r16
    2742:	08 95       	ret

00002744 <free>:
    2744:	cf 93       	push	r28
    2746:	df 93       	push	r29
    2748:	00 97       	sbiw	r24, 0x00	; 0
    274a:	09 f4       	brne	.+2      	; 0x274e <free+0xa>
    274c:	81 c0       	rjmp	.+258    	; 0x2850 <free+0x10c>
    274e:	fc 01       	movw	r30, r24
    2750:	32 97       	sbiw	r30, 0x02	; 2
    2752:	13 82       	std	Z+3, r1	; 0x03
    2754:	12 82       	std	Z+2, r1	; 0x02
    2756:	a0 91 3e 07 	lds	r26, 0x073E	; 0x80073e <__flp>
    275a:	b0 91 3f 07 	lds	r27, 0x073F	; 0x80073f <__flp+0x1>
    275e:	10 97       	sbiw	r26, 0x00	; 0
    2760:	81 f4       	brne	.+32     	; 0x2782 <free+0x3e>
    2762:	20 81       	ld	r18, Z
    2764:	31 81       	ldd	r19, Z+1	; 0x01
    2766:	82 0f       	add	r24, r18
    2768:	93 1f       	adc	r25, r19
    276a:	20 91 3c 07 	lds	r18, 0x073C	; 0x80073c <__brkval>
    276e:	30 91 3d 07 	lds	r19, 0x073D	; 0x80073d <__brkval+0x1>
    2772:	28 17       	cp	r18, r24
    2774:	39 07       	cpc	r19, r25
    2776:	51 f5       	brne	.+84     	; 0x27cc <free+0x88>
    2778:	f0 93 3d 07 	sts	0x073D, r31	; 0x80073d <__brkval+0x1>
    277c:	e0 93 3c 07 	sts	0x073C, r30	; 0x80073c <__brkval>
    2780:	67 c0       	rjmp	.+206    	; 0x2850 <free+0x10c>
    2782:	ed 01       	movw	r28, r26
    2784:	20 e0       	ldi	r18, 0x00	; 0
    2786:	30 e0       	ldi	r19, 0x00	; 0
    2788:	ce 17       	cp	r28, r30
    278a:	df 07       	cpc	r29, r31
    278c:	40 f4       	brcc	.+16     	; 0x279e <free+0x5a>
    278e:	4a 81       	ldd	r20, Y+2	; 0x02
    2790:	5b 81       	ldd	r21, Y+3	; 0x03
    2792:	9e 01       	movw	r18, r28
    2794:	41 15       	cp	r20, r1
    2796:	51 05       	cpc	r21, r1
    2798:	f1 f0       	breq	.+60     	; 0x27d6 <free+0x92>
    279a:	ea 01       	movw	r28, r20
    279c:	f5 cf       	rjmp	.-22     	; 0x2788 <free+0x44>
    279e:	d3 83       	std	Z+3, r29	; 0x03
    27a0:	c2 83       	std	Z+2, r28	; 0x02
    27a2:	40 81       	ld	r20, Z
    27a4:	51 81       	ldd	r21, Z+1	; 0x01
    27a6:	84 0f       	add	r24, r20
    27a8:	95 1f       	adc	r25, r21
    27aa:	c8 17       	cp	r28, r24
    27ac:	d9 07       	cpc	r29, r25
    27ae:	59 f4       	brne	.+22     	; 0x27c6 <free+0x82>
    27b0:	88 81       	ld	r24, Y
    27b2:	99 81       	ldd	r25, Y+1	; 0x01
    27b4:	84 0f       	add	r24, r20
    27b6:	95 1f       	adc	r25, r21
    27b8:	02 96       	adiw	r24, 0x02	; 2
    27ba:	91 83       	std	Z+1, r25	; 0x01
    27bc:	80 83       	st	Z, r24
    27be:	8a 81       	ldd	r24, Y+2	; 0x02
    27c0:	9b 81       	ldd	r25, Y+3	; 0x03
    27c2:	93 83       	std	Z+3, r25	; 0x03
    27c4:	82 83       	std	Z+2, r24	; 0x02
    27c6:	21 15       	cp	r18, r1
    27c8:	31 05       	cpc	r19, r1
    27ca:	29 f4       	brne	.+10     	; 0x27d6 <free+0x92>
    27cc:	f0 93 3f 07 	sts	0x073F, r31	; 0x80073f <__flp+0x1>
    27d0:	e0 93 3e 07 	sts	0x073E, r30	; 0x80073e <__flp>
    27d4:	3d c0       	rjmp	.+122    	; 0x2850 <free+0x10c>
    27d6:	e9 01       	movw	r28, r18
    27d8:	fb 83       	std	Y+3, r31	; 0x03
    27da:	ea 83       	std	Y+2, r30	; 0x02
    27dc:	49 91       	ld	r20, Y+
    27de:	59 91       	ld	r21, Y+
    27e0:	c4 0f       	add	r28, r20
    27e2:	d5 1f       	adc	r29, r21
    27e4:	ec 17       	cp	r30, r28
    27e6:	fd 07       	cpc	r31, r29
    27e8:	61 f4       	brne	.+24     	; 0x2802 <free+0xbe>
    27ea:	80 81       	ld	r24, Z
    27ec:	91 81       	ldd	r25, Z+1	; 0x01
    27ee:	84 0f       	add	r24, r20
    27f0:	95 1f       	adc	r25, r21
    27f2:	02 96       	adiw	r24, 0x02	; 2
    27f4:	e9 01       	movw	r28, r18
    27f6:	99 83       	std	Y+1, r25	; 0x01
    27f8:	88 83       	st	Y, r24
    27fa:	82 81       	ldd	r24, Z+2	; 0x02
    27fc:	93 81       	ldd	r25, Z+3	; 0x03
    27fe:	9b 83       	std	Y+3, r25	; 0x03
    2800:	8a 83       	std	Y+2, r24	; 0x02
    2802:	e0 e0       	ldi	r30, 0x00	; 0
    2804:	f0 e0       	ldi	r31, 0x00	; 0
    2806:	12 96       	adiw	r26, 0x02	; 2
    2808:	8d 91       	ld	r24, X+
    280a:	9c 91       	ld	r25, X
    280c:	13 97       	sbiw	r26, 0x03	; 3
    280e:	00 97       	sbiw	r24, 0x00	; 0
    2810:	19 f0       	breq	.+6      	; 0x2818 <free+0xd4>
    2812:	fd 01       	movw	r30, r26
    2814:	dc 01       	movw	r26, r24
    2816:	f7 cf       	rjmp	.-18     	; 0x2806 <free+0xc2>
    2818:	8d 91       	ld	r24, X+
    281a:	9c 91       	ld	r25, X
    281c:	11 97       	sbiw	r26, 0x01	; 1
    281e:	9d 01       	movw	r18, r26
    2820:	2e 5f       	subi	r18, 0xFE	; 254
    2822:	3f 4f       	sbci	r19, 0xFF	; 255
    2824:	82 0f       	add	r24, r18
    2826:	93 1f       	adc	r25, r19
    2828:	20 91 3c 07 	lds	r18, 0x073C	; 0x80073c <__brkval>
    282c:	30 91 3d 07 	lds	r19, 0x073D	; 0x80073d <__brkval+0x1>
    2830:	28 17       	cp	r18, r24
    2832:	39 07       	cpc	r19, r25
    2834:	69 f4       	brne	.+26     	; 0x2850 <free+0x10c>
    2836:	30 97       	sbiw	r30, 0x00	; 0
    2838:	29 f4       	brne	.+10     	; 0x2844 <free+0x100>
    283a:	10 92 3f 07 	sts	0x073F, r1	; 0x80073f <__flp+0x1>
    283e:	10 92 3e 07 	sts	0x073E, r1	; 0x80073e <__flp>
    2842:	02 c0       	rjmp	.+4      	; 0x2848 <free+0x104>
    2844:	13 82       	std	Z+3, r1	; 0x03
    2846:	12 82       	std	Z+2, r1	; 0x02
    2848:	b0 93 3d 07 	sts	0x073D, r27	; 0x80073d <__brkval+0x1>
    284c:	a0 93 3c 07 	sts	0x073C, r26	; 0x80073c <__brkval>
    2850:	df 91       	pop	r29
    2852:	cf 91       	pop	r28
    2854:	08 95       	ret

00002856 <do_rand>:
    2856:	8f 92       	push	r8
    2858:	9f 92       	push	r9
    285a:	af 92       	push	r10
    285c:	bf 92       	push	r11
    285e:	cf 92       	push	r12
    2860:	df 92       	push	r13
    2862:	ef 92       	push	r14
    2864:	ff 92       	push	r15
    2866:	cf 93       	push	r28
    2868:	df 93       	push	r29
    286a:	ec 01       	movw	r28, r24
    286c:	68 81       	ld	r22, Y
    286e:	79 81       	ldd	r23, Y+1	; 0x01
    2870:	8a 81       	ldd	r24, Y+2	; 0x02
    2872:	9b 81       	ldd	r25, Y+3	; 0x03
    2874:	61 15       	cp	r22, r1
    2876:	71 05       	cpc	r23, r1
    2878:	81 05       	cpc	r24, r1
    287a:	91 05       	cpc	r25, r1
    287c:	21 f4       	brne	.+8      	; 0x2886 <do_rand+0x30>
    287e:	64 e2       	ldi	r22, 0x24	; 36
    2880:	79 ed       	ldi	r23, 0xD9	; 217
    2882:	8b e5       	ldi	r24, 0x5B	; 91
    2884:	97 e0       	ldi	r25, 0x07	; 7
    2886:	2d e1       	ldi	r18, 0x1D	; 29
    2888:	33 ef       	ldi	r19, 0xF3	; 243
    288a:	41 e0       	ldi	r20, 0x01	; 1
    288c:	50 e0       	ldi	r21, 0x00	; 0
    288e:	0e 94 97 14 	call	0x292e	; 0x292e <__divmodsi4>
    2892:	49 01       	movw	r8, r18
    2894:	5a 01       	movw	r10, r20
    2896:	9b 01       	movw	r18, r22
    2898:	ac 01       	movw	r20, r24
    289a:	a7 ea       	ldi	r26, 0xA7	; 167
    289c:	b1 e4       	ldi	r27, 0x41	; 65
    289e:	0e 94 b6 14 	call	0x296c	; 0x296c <__muluhisi3>
    28a2:	6b 01       	movw	r12, r22
    28a4:	7c 01       	movw	r14, r24
    28a6:	ac ee       	ldi	r26, 0xEC	; 236
    28a8:	b4 ef       	ldi	r27, 0xF4	; 244
    28aa:	a5 01       	movw	r20, r10
    28ac:	94 01       	movw	r18, r8
    28ae:	0e 94 c4 14 	call	0x2988	; 0x2988 <__mulohisi3>
    28b2:	dc 01       	movw	r26, r24
    28b4:	cb 01       	movw	r24, r22
    28b6:	8c 0d       	add	r24, r12
    28b8:	9d 1d       	adc	r25, r13
    28ba:	ae 1d       	adc	r26, r14
    28bc:	bf 1d       	adc	r27, r15
    28be:	b7 ff       	sbrs	r27, 7
    28c0:	03 c0       	rjmp	.+6      	; 0x28c8 <do_rand+0x72>
    28c2:	01 97       	sbiw	r24, 0x01	; 1
    28c4:	a1 09       	sbc	r26, r1
    28c6:	b0 48       	sbci	r27, 0x80	; 128
    28c8:	88 83       	st	Y, r24
    28ca:	99 83       	std	Y+1, r25	; 0x01
    28cc:	aa 83       	std	Y+2, r26	; 0x02
    28ce:	bb 83       	std	Y+3, r27	; 0x03
    28d0:	9f 77       	andi	r25, 0x7F	; 127
    28d2:	df 91       	pop	r29
    28d4:	cf 91       	pop	r28
    28d6:	ff 90       	pop	r15
    28d8:	ef 90       	pop	r14
    28da:	df 90       	pop	r13
    28dc:	cf 90       	pop	r12
    28de:	bf 90       	pop	r11
    28e0:	af 90       	pop	r10
    28e2:	9f 90       	pop	r9
    28e4:	8f 90       	pop	r8
    28e6:	08 95       	ret

000028e8 <rand_r>:
    28e8:	0e 94 2b 14 	call	0x2856	; 0x2856 <do_rand>
    28ec:	08 95       	ret

000028ee <rand>:
    28ee:	86 e0       	ldi	r24, 0x06	; 6
    28f0:	91 e0       	ldi	r25, 0x01	; 1
    28f2:	0e 94 2b 14 	call	0x2856	; 0x2856 <do_rand>
    28f6:	08 95       	ret

000028f8 <srand>:
    28f8:	a0 e0       	ldi	r26, 0x00	; 0
    28fa:	b0 e0       	ldi	r27, 0x00	; 0
    28fc:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <next>
    2900:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <next+0x1>
    2904:	a0 93 08 01 	sts	0x0108, r26	; 0x800108 <next+0x2>
    2908:	b0 93 09 01 	sts	0x0109, r27	; 0x800109 <next+0x3>
    290c:	08 95       	ret

0000290e <memcpy>:
    290e:	fb 01       	movw	r30, r22
    2910:	dc 01       	movw	r26, r24
    2912:	02 c0       	rjmp	.+4      	; 0x2918 <memcpy+0xa>
    2914:	01 90       	ld	r0, Z+
    2916:	0d 92       	st	X+, r0
    2918:	41 50       	subi	r20, 0x01	; 1
    291a:	50 40       	sbci	r21, 0x00	; 0
    291c:	d8 f7       	brcc	.-10     	; 0x2914 <memcpy+0x6>
    291e:	08 95       	ret

00002920 <memset>:
    2920:	dc 01       	movw	r26, r24
    2922:	01 c0       	rjmp	.+2      	; 0x2926 <memset+0x6>
    2924:	6d 93       	st	X+, r22
    2926:	41 50       	subi	r20, 0x01	; 1
    2928:	50 40       	sbci	r21, 0x00	; 0
    292a:	e0 f7       	brcc	.-8      	; 0x2924 <memset+0x4>
    292c:	08 95       	ret

0000292e <__divmodsi4>:
    292e:	05 2e       	mov	r0, r21
    2930:	97 fb       	bst	r25, 7
    2932:	1e f4       	brtc	.+6      	; 0x293a <__divmodsi4+0xc>
    2934:	00 94       	com	r0
    2936:	0e 94 ae 14 	call	0x295c	; 0x295c <__negsi2>
    293a:	57 fd       	sbrc	r21, 7
    293c:	07 d0       	rcall	.+14     	; 0x294c <__divmodsi4_neg2>
    293e:	0e 94 d4 12 	call	0x25a8	; 0x25a8 <__udivmodsi4>
    2942:	07 fc       	sbrc	r0, 7
    2944:	03 d0       	rcall	.+6      	; 0x294c <__divmodsi4_neg2>
    2946:	4e f4       	brtc	.+18     	; 0x295a <__divmodsi4_exit>
    2948:	0c 94 ae 14 	jmp	0x295c	; 0x295c <__negsi2>

0000294c <__divmodsi4_neg2>:
    294c:	50 95       	com	r21
    294e:	40 95       	com	r20
    2950:	30 95       	com	r19
    2952:	21 95       	neg	r18
    2954:	3f 4f       	sbci	r19, 0xFF	; 255
    2956:	4f 4f       	sbci	r20, 0xFF	; 255
    2958:	5f 4f       	sbci	r21, 0xFF	; 255

0000295a <__divmodsi4_exit>:
    295a:	08 95       	ret

0000295c <__negsi2>:
    295c:	90 95       	com	r25
    295e:	80 95       	com	r24
    2960:	70 95       	com	r23
    2962:	61 95       	neg	r22
    2964:	7f 4f       	sbci	r23, 0xFF	; 255
    2966:	8f 4f       	sbci	r24, 0xFF	; 255
    2968:	9f 4f       	sbci	r25, 0xFF	; 255
    296a:	08 95       	ret

0000296c <__muluhisi3>:
    296c:	0e 94 c9 14 	call	0x2992	; 0x2992 <__umulhisi3>
    2970:	a5 9f       	mul	r26, r21
    2972:	90 0d       	add	r25, r0
    2974:	b4 9f       	mul	r27, r20
    2976:	90 0d       	add	r25, r0
    2978:	a4 9f       	mul	r26, r20
    297a:	80 0d       	add	r24, r0
    297c:	91 1d       	adc	r25, r1
    297e:	11 24       	eor	r1, r1
    2980:	08 95       	ret

00002982 <__mulshisi3>:
    2982:	b7 ff       	sbrs	r27, 7
    2984:	0c 94 b6 14 	jmp	0x296c	; 0x296c <__muluhisi3>

00002988 <__mulohisi3>:
    2988:	0e 94 b6 14 	call	0x296c	; 0x296c <__muluhisi3>
    298c:	82 1b       	sub	r24, r18
    298e:	93 0b       	sbc	r25, r19
    2990:	08 95       	ret

00002992 <__umulhisi3>:
    2992:	a2 9f       	mul	r26, r18
    2994:	b0 01       	movw	r22, r0
    2996:	b3 9f       	mul	r27, r19
    2998:	c0 01       	movw	r24, r0
    299a:	a3 9f       	mul	r26, r19
    299c:	70 0d       	add	r23, r0
    299e:	81 1d       	adc	r24, r1
    29a0:	11 24       	eor	r1, r1
    29a2:	91 1d       	adc	r25, r1
    29a4:	b2 9f       	mul	r27, r18
    29a6:	70 0d       	add	r23, r0
    29a8:	81 1d       	adc	r24, r1
    29aa:	11 24       	eor	r1, r1
    29ac:	91 1d       	adc	r25, r1
    29ae:	08 95       	ret

000029b0 <_exit>:
    29b0:	f8 94       	cli

000029b2 <__stop_program>:
    29b2:	ff cf       	rjmp	.-2      	; 0x29b2 <__stop_program>
